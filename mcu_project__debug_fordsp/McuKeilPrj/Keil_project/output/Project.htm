<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\Project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\Project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6190004: Last Updated: Fri Sep  6 16:02:46 2024
<BR><P>
<H3>Maximum Stack Usage =        408 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; ddm_process &rArr; update_om_diagnose &rArr; update_om_tx_power &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[15]">ADC_CMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">ADC_CMP_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[15]">ADC_CMP_IRQHandler</a> from startup_gd32e501.o(.text) referenced from startup_gd32e501.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_gd32e501.o(.text) referenced from startup_gd32e501.o(RESET)
 <LI><a href="#[2a]">CLA_IRQHandler</a> from startup_gd32e501.o(.text) referenced from startup_gd32e501.o(RESET)
 <LI><a href="#[12]">DMA_Channel0_IRQHandler</a> from startup_gd32e501.o(.text) referenced from startup_gd32e501.o(RESET)
 <LI><a href="#[13]">DMA_Channel1_2_IRQHandler</a> from startup_gd32e501.o(.text) referenced from startup_gd32e501.o(RESET)
 <LI><a href="#[14]">DMA_Channel3_4_IRQHandler</a> from startup_gd32e501.o(.text) referenced from startup_gd32e501.o(RESET)
 <LI><a href="#[2c]">DMA_Channel5_6_IRQHandler</a> from startup_gd32e501.o(.text) referenced from startup_gd32e501.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_gd32e501.o(.text) referenced from startup_gd32e501.o(RESET)
 <LI><a href="#[f]">EXTI0_1_IRQHandler</a> from gd32e501_it.o(.text.EXTI0_1_IRQHandler) referenced from startup_gd32e501.o(RESET)
 <LI><a href="#[10]">EXTI2_3_IRQHandler</a> from startup_gd32e501.o(.text) referenced from startup_gd32e501.o(RESET)
 <LI><a href="#[11]">EXTI4_15_IRQHandler</a> from startup_gd32e501.o(.text) referenced from startup_gd32e501.o(RESET)
 <LI><a href="#[d]">FMC_IRQHandler</a> from startup_gd32e501.o(.text) referenced from startup_gd32e501.o(RESET)
 <LI><a href="#[2e]">FPU_IRQHandler</a> from startup_gd32e501.o(.text) referenced from startup_gd32e501.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from gd32e501_it.o(.text.HardFault_Handler) referenced from startup_gd32e501.o(RESET)
 <LI><a href="#[26]">I2C0_ER_IRQHandler</a> from gd32e501_it.o(.text.I2C0_ER_IRQHandler) referenced from startup_gd32e501.o(RESET)
 <LI><a href="#[20]">I2C0_EV_IRQHandler</a> from gd32e501_it.o(.text.I2C0_EV_IRQHandler) referenced from startup_gd32e501.o(RESET)
 <LI><a href="#[27]">I2C1_ER_IRQHandler</a> from gd32e501_it.o(.text.I2C1_ER_IRQHandler) referenced from startup_gd32e501.o(RESET)
 <LI><a href="#[21]">I2C1_EV_IRQHandler</a> from gd32e501_it.o(.text.I2C1_EV_IRQHandler) referenced from startup_gd32e501.o(RESET)
 <LI><a href="#[29]">I2C2_ER_IRQHandler</a> from gd32e501_it.o(.text.I2C2_ER_IRQHandler) referenced from startup_gd32e501.o(RESET)
 <LI><a href="#[28]">I2C2_EV_IRQHandler</a> from gd32e501_it.o(.text.I2C2_EV_IRQHandler) referenced from startup_gd32e501.o(RESET)
 <LI><a href="#[b]">LVD_IRQHandler</a> from startup_gd32e501.o(.text) referenced from startup_gd32e501.o(RESET)
 <LI><a href="#[2b]">MDIO_IRQHandler</a> from startup_gd32e501.o(.text) referenced from startup_gd32e501.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_gd32e501.o(.text) referenced from startup_gd32e501.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from gd32e501_it.o(.text.NMI_Handler) referenced from startup_gd32e501.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from gd32e501_it.o(.text.PendSV_Handler) referenced from startup_gd32e501.o(RESET)
 <LI><a href="#[e]">RCU_IRQHandler</a> from startup_gd32e501.o(.text) referenced from startup_gd32e501.o(RESET)
 <LI><a href="#[c]">RTC_IRQHandler</a> from startup_gd32e501.o(.text) referenced from startup_gd32e501.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_gd32e501.o(.text) referenced from startup_gd32e501.o(RESET)
 <LI><a href="#[22]">SPI0_IRQHandler</a> from startup_gd32e501.o(.text) referenced from startup_gd32e501.o(RESET)
 <LI><a href="#[23]">SPI1_IRQHandler</a> from startup_gd32e501.o(.text) referenced from startup_gd32e501.o(RESET)
 <LI><a href="#[2d]">SPI2_IRQHandler</a> from startup_gd32e501.o(.text) referenced from startup_gd32e501.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from gd32e501_it.o(.text.SVC_Handler) referenced from startup_gd32e501.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from gd32e501_it.o(.text.SysTick_Handler) referenced from startup_gd32e501.o(RESET)
 <LI><a href="#[30]">SystemInit</a> from system_gd32e501.o(.text.SystemInit) referenced from startup_gd32e501.o(.text)
 <LI><a href="#[16]">TIMER0_BRK_UP_TRG_COM_IRQHandler</a> from startup_gd32e501.o(.text) referenced from startup_gd32e501.o(RESET)
 <LI><a href="#[17]">TIMER0_Channel_IRQHandler</a> from startup_gd32e501.o(.text) referenced from startup_gd32e501.o(RESET)
 <LI><a href="#[1c]">TIMER13_IRQHandler</a> from gd32e501_it.o(.text.TIMER13_IRQHandler) referenced from startup_gd32e501.o(RESET)
 <LI><a href="#[1d]">TIMER14_IRQHandler</a> from startup_gd32e501.o(.text) referenced from startup_gd32e501.o(RESET)
 <LI><a href="#[1e]">TIMER15_IRQHandler</a> from startup_gd32e501.o(.text) referenced from startup_gd32e501.o(RESET)
 <LI><a href="#[1f]">TIMER16_IRQHandler</a> from startup_gd32e501.o(.text) referenced from startup_gd32e501.o(RESET)
 <LI><a href="#[18]">TIMER1_IRQHandler</a> from startup_gd32e501.o(.text) referenced from startup_gd32e501.o(RESET)
 <LI><a href="#[19]">TIMER2_IRQHandler</a> from startup_gd32e501.o(.text) referenced from startup_gd32e501.o(RESET)
 <LI><a href="#[1a]">TIMER5_DAC0_1_IRQHandler</a> from startup_gd32e501.o(.text) referenced from startup_gd32e501.o(RESET)
 <LI><a href="#[1b]">TIMER6_DAC2_3_IRQHandler</a> from startup_gd32e501.o(.text) referenced from startup_gd32e501.o(RESET)
 <LI><a href="#[24]">USART0_IRQHandler</a> from gd32e501_it.o(.text.USART0_IRQHandler) referenced from startup_gd32e501.o(RESET)
 <LI><a href="#[25]">USART1_IRQHandler</a> from startup_gd32e501.o(.text) referenced from startup_gd32e501.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_gd32e501.o(.text) referenced from startup_gd32e501.o(RESET)
 <LI><a href="#[a]">WWDGT_IRQHandler</a> from startup_gd32e501.o(.text) referenced from startup_gd32e501.o(RESET)
 <LI><a href="#[31]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_gd32e501.o(.text)
 <LI><a href="#[3d]">apd_i2c_vcc_reg_write</a> from sff_8472.o(.text.apd_i2c_vcc_reg_write) referenced 2 times from main.o(.text.i2c_cmd_register_init)
 <LI><a href="#[50]">cmd_command_map_reg_write</a> from mcu_config_public.o(.text.cmd_command_map_reg_write) referenced 2 times from main.o(.text.i2c_cmd_register_init)
 <LI><a href="#[44]">cpa_i2c_reg_write</a> from sff_8472.o(.text.cpa_i2c_reg_write) referenced 2 times from main.o(.text.i2c_cmd_register_init)
 <LI><a href="#[3c]">ddm_i2c_switch_auto_process_reg_write</a> from sff_8472.o(.text.ddm_i2c_switch_auto_process_reg_write) referenced 2 times from main.o(.text.i2c_cmd_register_init)
 <LI><a href="#[43]">eq_i2c_reg_write</a> from sff_8472.o(.text.eq_i2c_reg_write) referenced 2 times from main.o(.text.i2c_cmd_register_init)
 <LI><a href="#[56]">fputc</a> from main.o(.text.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[40]">ibias_i2c_reg_write</a> from sff_8472.o(.text.ibias_i2c_reg_write) referenced 2 times from main.o(.text.i2c_cmd_register_init)
 <LI><a href="#[41]">imod_i2c_reg_write</a> from sff_8472.o(.text.imod_i2c_reg_write) referenced 2 times from main.o(.text.i2c_cmd_register_init)
 <LI><a href="#[2f]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[33]">mcu_addr0xspec_reg_byte_read</a> from i2c_comm.o(.text.mcu_addr0xspec_reg_byte_read) referenced 2 times from main.o(.text.i2c_cmd_register_init)
 <LI><a href="#[32]">mcu_addr0xspec_reg_byte_write</a> from i2c_comm.o(.text.mcu_addr0xspec_reg_byte_write) referenced 2 times from main.o(.text.i2c_cmd_register_init)
 <LI><a href="#[3a]">om_cmd_ddm_read_reg_byte</a> from sff_8472.o(.text.om_cmd_ddm_read_reg_byte) referenced 2 times from main.o(.text.i2c_cmd_register_init)
 <LI><a href="#[34]">om_flash_write_reg_byte</a> from sff_8472.o(.text.om_flash_write_reg_byte) referenced 2 times from main.o(.text.i2c_cmd_register_init)
 <LI><a href="#[51]">om_memory_state_ctrl_write_reg_byte</a> from sff_8472.o(.text.om_memory_state_ctrl_write_reg_byte) referenced 2 times from main.o(.text.i2c_cmd_register_init)
 <LI><a href="#[35]">om_v2_flash_read_reg_byte</a> from sff_8472.o(.text.om_v2_flash_read_reg_byte) referenced 2 times from main.o(.text.i2c_cmd_register_init)
 <LI><a href="#[36]">om_v2_memory_read_reg_byte</a> from sff_8472.o(.text.om_v2_memory_read_reg_byte) referenced 2 times from main.o(.text.i2c_cmd_register_init)
 <LI><a href="#[46]">rx_deemph_i2c_reg_write</a> from sff_8472.o(.text.rx_deemph_i2c_reg_write) referenced 2 times from main.o(.text.i2c_cmd_register_init)
 <LI><a href="#[48]">rx_los_hyst_i2c_reg_write</a> from sff_8472.o(.text.rx_los_hyst_i2c_reg_write) referenced 2 times from main.o(.text.i2c_cmd_register_init)
 <LI><a href="#[47]">rx_los_threshold_i2c_reg_write</a> from sff_8472.o(.text.rx_los_threshold_i2c_reg_write) referenced 2 times from main.o(.text.i2c_cmd_register_init)
 <LI><a href="#[3e]">soa_i2c_ild_reg_write</a> from sff_8472.o(.text.soa_i2c_ild_reg_write) referenced 2 times from main.o(.text.i2c_cmd_register_init)
 <LI><a href="#[42]">swing_i2c_reg_write</a> from sff_8472.o(.text.swing_i2c_reg_write) referenced 2 times from main.o(.text.i2c_cmd_register_init)
 <LI><a href="#[49]">tec_i2_ctl_temperature_reg_read</a> from tec_comm.o(.text.tec_i2_ctl_temperature_reg_read) referenced 2 times from main.o(.text.i2c_cmd_register_init)
 <LI><a href="#[4e]">tec_i2c_auto_ctl_reg_write</a> from tec_comm.o(.text.tec_i2c_auto_ctl_reg_write) referenced 2 times from main.o(.text.i2c_cmd_register_init)
 <LI><a href="#[4c]">tec_i2c_calc_ctl_auto_reg_write</a> from tec_comm.o(.text.tec_i2c_calc_ctl_auto_reg_write) referenced 2 times from main.o(.text.i2c_cmd_register_init)
 <LI><a href="#[4f]">tec_i2c_temperature_obj_write</a> from tec_comm.o(.text.tec_i2c_temperature_obj_write) referenced 2 times from main.o(.text.i2c_cmd_register_init)
 <LI><a href="#[4b]">tec_i2c_vtec_ctl_reg_read</a> from tec_comm.o(.text.tec_i2c_vtec_ctl_reg_read) referenced 2 times from main.o(.text.i2c_cmd_register_init)
 <LI><a href="#[4a]">tec_i2c_vtec_ctl_reg_write</a> from tec_comm.o(.text.tec_i2c_vtec_ctl_reg_write) referenced 2 times from main.o(.text.i2c_cmd_register_init)
 <LI><a href="#[4d]">tec_xtec_value_reg_read</a> from tec_comm.o(.text.tec_xtec_value_reg_read) referenced 2 times from main.o(.text.i2c_cmd_register_init)
 <LI><a href="#[52]">test_dac_value_write_reg</a> from update_comm.o(.text.test_dac_value_write_reg) referenced 2 times from main.o(.text.i2c_cmd_register_init)
 <LI><a href="#[55]">test_gpio_info_read_reg</a> from update_comm.o(.text.test_gpio_info_read_reg) referenced 2 times from main.o(.text.i2c_cmd_register_init)
 <LI><a href="#[54]">test_gpio_info_write_reg</a> from update_comm.o(.text.test_gpio_info_write_reg) referenced 2 times from main.o(.text.i2c_cmd_register_init)
 <LI><a href="#[53]">test_gpio_value_write_reg</a> from update_comm.o(.text.test_gpio_value_write_reg) referenced 2 times from main.o(.text.i2c_cmd_register_init)
 <LI><a href="#[45]">tx_deemph_i2c_reg_write</a> from sff_8472.o(.text.tx_deemph_i2c_reg_write) referenced 2 times from main.o(.text.i2c_cmd_register_init)
 <LI><a href="#[37]">update_app_write_reg_byte</a> from update_comm.o(.text.update_app_write_reg_byte) referenced 2 times from main.o(.text.i2c_cmd_register_init)
 <LI><a href="#[38]">update_firmware_write_reg_byte</a> from update_comm.o(.text.update_firmware_write_reg_byte) referenced 2 times from main.o(.text.i2c_cmd_register_init)
 <LI><a href="#[39]">upgrade_dev_version_reg_read</a> from update_comm.o(.text.upgrade_dev_version_reg_read) referenced 2 times from main.o(.text.i2c_cmd_register_init)
 <LI><a href="#[3b]">user_check_password_write_reg</a> from i2c_opt_ie.o(.text.user_check_password_write_reg) referenced 2 times from main.o(.text.i2c_cmd_register_init)
 <LI><a href="#[3f]">vea_i2c_vcc_reg_write</a> from sff_8472.o(.text.vea_i2c_vcc_reg_write) referenced 2 times from main.o(.text.i2c_cmd_register_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[31]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e501.o(.text)
</UL>
<P><STRONG><a name="[1c4]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[57]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[6d]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1c5]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1c6]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1c7]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1c8]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1c9]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_gd32e501.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e501.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32e501.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e501.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32e501.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e501.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32e501.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e501.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32e501.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e501.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>ADC_CMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e501.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e501.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>CLA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e501.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e501.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>DMA_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e501.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e501.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>DMA_Channel1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e501.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e501.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>DMA_Channel3_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e501.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e501.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA_Channel5_6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e501.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e501.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e501.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e501.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e501.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e501.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e501.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e501.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e501.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e501.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e501.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e501.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>MDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e501.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e501.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RCU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e501.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e501.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e501.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e501.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e501.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e501.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e501.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e501.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e501.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e501.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIMER0_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e501.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e501.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIMER0_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e501.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e501.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TIMER14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e501.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e501.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TIMER15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e501.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e501.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TIMER16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e501.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e501.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e501.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e501.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e501.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e501.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TIMER5_DAC0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e501.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e501.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TIMER6_DAC2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e501.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e501.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e501.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e501.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDGT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e501.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e501.o(RESET)
</UL>
<P><STRONG><a name="[bc]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_read
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_update_write_mem_one_page_to_flash
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upgrade_dev_version_reg_read
</UL>

<P><STRONG><a name="[129]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_read
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_buffer_mng_regaddress_info
</UL>

<P><STRONG><a name="[1ca]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1cb]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1cc]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_update_write_mem_one_page_to_flash
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_mem_all_memset
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_mem_malloc
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upgrade_dev_version_reg_read
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_download_firmware
</UL>

<P><STRONG><a name="[125]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_config_init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_info_buffer_clear
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_buffer_mng_regaddress_info
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_buffer_info_clear
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_i2c_event_irq_handler
</UL>

<P><STRONG><a name="[1cd]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1a9]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_check_password_write_reg
</UL>

<P><STRONG><a name="[1aa]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_check_password_write_reg
</UL>

<P><STRONG><a name="[5c]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;om_default_config_flash_read
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_i2c_reg_write
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imod_i2c_reg_write
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ibias_i2c_reg_write
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vea_i2c_vcc_reg_write
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm41282c_set_apd
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apd_i2c_vcc_reg_write
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_get_mpd_ibias
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_get_mpd_ibias
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_get_ld_ibias
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_get_ld_ibias
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_get_voltage
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_get_voltage
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_om_temperature
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tec_calc_auto_rth_temp
</UL>

<P><STRONG><a name="[61]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[62]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[63]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;om_default_config_flash_read
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_los_hyst_i2c_reg_write
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_los_threshold_i2c_reg_write
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpa_i2c_reg_write
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_deemph_i2c_reg_write
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_deemph_i2c_reg_write
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_i2c_reg_write
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eq_i2c_reg_write
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imod_i2c_reg_write
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ibias_i2c_reg_write
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm2508_set_vea
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm41295_set_vea
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vea_i2c_vcc_reg_write
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soa_i2c_ild_reg_write
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm41282c_set_apd
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apd_i2c_vcc_reg_write
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_get_mpd_ibias
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_get_mpd_ibias
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_om_tx_power
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ux3326_get_ld_ibias
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_get_ld_ibias
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_get_ld_ibias
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ux3326_get_voltage
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_get_voltage
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_get_voltage
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tec_get_xtec_voltage
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tec_calc_auto_rth_temp
</UL>

<P><STRONG><a name="[64]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;om_default_config_flash_read
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ux3326_set_ld_imod
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_set_ld_imod
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ibias_i2c_reg_write
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm2508_set_vea
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm41295_set_vea
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm41282c_set_apd
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_vtec_ctl_set
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[188]"></a>__aeabi_dcmpge</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, dcmpge.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_dcmpge
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tec_set_ctl_voltage
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tec_calc_auto_rth_temp
</UL>

<P><STRONG><a name="[65]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;om_default_config_flash_read
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_los_hyst_i2c_reg_write
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_los_threshold_i2c_reg_write
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpa_i2c_reg_write
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_deemph_i2c_reg_write
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_deemph_i2c_reg_write
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_i2c_reg_write
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eq_i2c_reg_write
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ux3326_set_ld_imod
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_set_ld_imod
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imod_i2c_reg_write
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ibias_i2c_reg_write
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vea_i2c_vcc_reg_write
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soa_i2c_ild_reg_write
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apd_i2c_vcc_reg_write
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_get_mpd_ibias
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_get_mpd_ibias
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_get_ld_ibias
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_get_ld_ibias
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_get_voltage
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_get_voltage
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tec_get_xtec_voltage
</UL>

<P><STRONG><a name="[66]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;om_default_config_flash_read
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_los_hyst_i2c_reg_write
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_los_threshold_i2c_reg_write
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpa_i2c_reg_write
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_deemph_i2c_reg_write
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_deemph_i2c_reg_write
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_i2c_reg_write
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eq_i2c_reg_write
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ux3326_set_ld_imod
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_set_ld_imod
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imod_i2c_reg_write
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ibias_i2c_reg_write
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm2508_set_vea
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm41295_set_vea
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm41282c_set_apd
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_om_temperature
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_vtec_ctl_set
</UL>

<P><STRONG><a name="[68]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tec_calc_auto_rth_temp
</UL>

<P><STRONG><a name="[a0]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ibias_i2c_reg_write
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm2508_set_vea
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm41295_set_vea
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vea_i2c_vcc_reg_write
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soa_i2c_ild_reg_write
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm41282c_set_apd
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apd_i2c_vcc_reg_write
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_om_rx_power
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_get_mpd_ibias
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_om_tx_power
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_om_tx_power
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ux3326_get_ld_ibias
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_get_ld_ibias
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ux3326_get_voltage
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_get_voltage
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_om_temperature
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_vtec_ctl_set
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tec_set_ctl_voltage
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tec_calc_auto_rth_temp
</UL>

<P><STRONG><a name="[69]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;om_default_config_flash_read
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ibias_i2c_reg_write
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vea_i2c_vcc_reg_write
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soa_i2c_ild_reg_write
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apd_i2c_vcc_reg_write
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_om_rx_power
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_get_mpd_ibias
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_get_mpd_ibias
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_om_tx_power
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_om_tx_power
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ux3326_get_ld_ibias
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_get_ld_ibias
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_get_ld_ibias
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ux3326_get_voltage
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_get_voltage
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_get_voltage
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tec_get_xtec_voltage
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tec_calc_auto_rth_temp
</UL>

<P><STRONG><a name="[1ce]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[1c3]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[6b]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[5d]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[1cf]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>

<P><STRONG><a name="[1d0]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1d1]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[1d2]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[1d3]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[5f]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1be]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1d4]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1bd]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[58]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1d5]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[1b5]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[1d6]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[1d7]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1d8]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[f]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, gd32e501_it.o(.text.EXTI0_1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = EXTI0_1_IRQHandler &rArr; adc_inserted_channel_sample_average &rArr; get_adc_inserted_channel_sample &rArr; adc_inserted_channel_config
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm41282c_set_rssi_value
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_inserted_channel_sample_average
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_get
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e501.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32e501_it.o(.text.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e501.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>I2C0_ER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32e501_it.o(.text.I2C0_ER_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e501.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>I2C0_EV_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gd32e501_it.o(.text.I2C0_EV_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = I2C0_EV_IRQHandler &rArr; master_i2c_event_irq_handler &rArr; i2c_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_i2c_event_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e501.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32e501_it.o(.text.I2C1_ER_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e501.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gd32e501_it.o(.text.I2C1_EV_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = I2C1_EV_IRQHandler &rArr; master_i2c_event_irq_handler &rArr; i2c_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_i2c_event_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e501.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32e501_it.o(.text.I2C2_ER_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e501.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gd32e501_it.o(.text.I2C2_EV_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C2_EV_IRQHandler &rArr; slave_event_irq_handler &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_event_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e501.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32e501_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e501.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32e501_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e501.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32e501_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e501.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gd32e501_it.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_decrement
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e501.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SystemInit</STRONG> (Thumb, 316 bytes, Stack size 16 bytes, system_gd32e501.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SystemInit &rArr; system_clock_config &rArr; system_clock_100m_irc8m
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_vector_table_set
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e501.o(.text)
</UL>
<P><STRONG><a name="[1c]"></a>TIMER13_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, gd32e501_it.o(.text.TIMER13_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIMER13_IRQHandler &rArr; timer_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e501.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>USART0_IRQHandler</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, gd32e501_it.o(.text.USART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USART0_IRQHandler &rArr; usart_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_disable
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e501.o(RESET)
</UL>
<P><STRONG><a name="[169]"></a>adc_calc_temp_value</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, mcu_system_comm.o(.text.adc_calc_temp_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = adc_calc_temp_value
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_bisection_temp_by_adc
</UL>

<P><STRONG><a name="[95]"></a>adc_calibration_enable</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, gd32e501_adc.o(.text.adc_calibration_enable))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_module_config_init
</UL>

<P><STRONG><a name="[91]"></a>adc_channel_length_config</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, gd32e501_adc.o(.text.adc_channel_length_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = adc_channel_length_config
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_module_config_init
</UL>

<P><STRONG><a name="[81]"></a>adc_channel_sample_average</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, adc_comm.o(.text.adc_channel_sample_average))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = adc_channel_sample_average &rArr; fh_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_dma_data_channel
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fh_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm41282c_get_rssi_value
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_case_therm_temperature
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tec_get_xtec_voltage
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tec_i2_ctl_temperature_reg_read
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tec_get_therm_temperature
</UL>

<P><STRONG><a name="[90]"></a>adc_data_alignment_config</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, gd32e501_adc.o(.text.adc_data_alignment_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = adc_data_alignment_config
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_module_config_init
</UL>

<P><STRONG><a name="[84]"></a>adc_dma_config_init</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, adc_comm.o(.text.adc_dma_config_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = adc_dma_config_init &rArr; dma_init &rArr; dma_channel_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_circulation_enable
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_periph_config
</UL>

<P><STRONG><a name="[96]"></a>adc_dma_mode_enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32e501_adc.o(.text.adc_dma_mode_enable))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_module_config_init
</UL>

<P><STRONG><a name="[93]"></a>adc_enable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, gd32e501_adc.o(.text.adc_enable))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_module_config_init
</UL>

<P><STRONG><a name="[8f]"></a>adc_external_trigger_config</STRONG> (Thumb, 142 bytes, Stack size 4 bytes, gd32e501_adc.o(.text.adc_external_trigger_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = adc_external_trigger_config
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_module_config_init
</UL>

<P><STRONG><a name="[8e]"></a>adc_external_trigger_source_config</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, gd32e501_adc.o(.text.adc_external_trigger_source_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = adc_external_trigger_source_config
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_module_config_init
</UL>

<P><STRONG><a name="[e6]"></a>adc_flag_clear</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, gd32e501_adc.o(.text.adc_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = adc_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_adc_inserted_channel_sample
</UL>

<P><STRONG><a name="[e5]"></a>adc_flag_get</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gd32e501_adc.o(.text.adc_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_adc_inserted_channel_sample
</UL>

<P><STRONG><a name="[82]"></a>adc_get_dma_data_channel</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, adc_comm.o(.text.adc_get_dma_data_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_get_dma_data_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_channel_sample_average
</UL>

<P><STRONG><a name="[89]"></a>adc_gpio_init</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, adc_comm.o(.text.adc_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = adc_gpio_init &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_periph_config
</UL>

<P><STRONG><a name="[e4]"></a>adc_inserted_channel_config</STRONG> (Thumb, 250 bytes, Stack size 20 bytes, gd32e501_adc.o(.text.adc_inserted_channel_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = adc_inserted_channel_config
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_adc_inserted_channel_sample
</UL>

<P><STRONG><a name="[71]"></a>adc_inserted_channel_sample_average</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, adc_comm.o(.text.adc_inserted_channel_sample_average))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = adc_inserted_channel_sample_average &rArr; get_adc_inserted_channel_sample &rArr; adc_inserted_channel_config
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_adc_inserted_channel_sample
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fh_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
</UL>

<P><STRONG><a name="[e7]"></a>adc_inserted_data_read</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, gd32e501_adc.o(.text.adc_inserted_data_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = adc_inserted_data_read
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_adc_inserted_channel_sample
</UL>

<P><STRONG><a name="[8c]"></a>adc_module_config_init</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, adc_comm.o(.text.adc_module_config_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = adc_module_config_init &rArr; adc_regular_channel_config
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_software_trigger_enable
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_dma_mode_enable
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_calibration_enable
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_regular_channel_config
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_channel_length_config
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_data_alignment_config
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_external_trigger_config
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_external_trigger_source_config
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_special_function_config
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_periph_config
</UL>

<P><STRONG><a name="[98]"></a>adc_periph_config</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, adc_comm.o(.text.adc_periph_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = adc_periph_config &rArr; adc_dma_config_init &rArr; dma_init &rArr; dma_channel_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_module_config_init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_dma_config_init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[92]"></a>adc_regular_channel_config</STRONG> (Thumb, 390 bytes, Stack size 16 bytes, gd32e501_adc.o(.text.adc_regular_channel_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adc_regular_channel_config
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_module_config_init
</UL>

<P><STRONG><a name="[97]"></a>adc_software_trigger_enable</STRONG> (Thumb, 68 bytes, Stack size 4 bytes, gd32e501_adc.o(.text.adc_software_trigger_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = adc_software_trigger_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_adc_inserted_channel_sample
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_module_config_init
</UL>

<P><STRONG><a name="[8d]"></a>adc_special_function_config</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, gd32e501_adc.o(.text.adc_special_function_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_special_function_config
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_module_config_init
</UL>

<P><STRONG><a name="[99]"></a>apc_auto_enable_reg_write</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, sff_8472.o(.text.apc_auto_enable_reg_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = apc_auto_enable_reg_write &rArr; gn7161_apc_auto_enable_ctrl &rArr; master_reg_2byte_size_read &rArr; master_reg_byte_read &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_apc_auto_enable_ctrl
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_apc_auto_enable_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_command_map_reg_write
</UL>

<P><STRONG><a name="[9c]"></a>apc_target_voltage_reg_write</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, sff_8472.o(.text.apc_target_voltage_reg_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = apc_target_voltage_reg_write &rArr; gn7161_apc_target_voltage &rArr; master_reg_byte_write &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_apc_target_voltage
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_apc_target_voltage
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_command_map_reg_write
</UL>

<P><STRONG><a name="[3d]"></a>apd_i2c_vcc_reg_write</STRONG> (Thumb, 464 bytes, Stack size 48 bytes, sff_8472.o(.text.apd_i2c_vcc_reg_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = apd_i2c_vcc_reg_write &rArr; sgm41282c_set_apd &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm41282c_set_apd
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.i2c_cmd_register_init)
</UL>
<P><STRONG><a name="[d8]"></a>calc_temp_value</STRONG> (Thumb, 168 bytes, Stack size 20 bytes, tec_comm.o(.text.calc_temp_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = calc_temp_value
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_adc_temp
</UL>

<P><STRONG><a name="[a2]"></a>calculate_om_rx_power</STRONG> (Thumb, 370 bytes, Stack size 32 bytes, sff_8472.o(.text.calculate_om_rx_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = calculate_om_rx_power &rArr; sgm41282c_get_rssi_value &rArr; adc_channel_sample_average &rArr; fh_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm41282c_get_rssi_value
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_om_rx_power
</UL>

<P><STRONG><a name="[a4]"></a>calculate_om_tx_power</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, sff_8472.o(.text.calculate_om_tx_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = calculate_om_tx_power &rArr; __hardfp_log10 &rArr; log &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ux3326_get_mpd_ibias
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_get_mpd_ibias
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_get_mpd_ibias
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_om_tx_power
</UL>

<P><STRONG><a name="[50]"></a>cmd_command_map_reg_write</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, mcu_config_public.o(.text.cmd_command_map_reg_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = cmd_command_map_reg_write &rArr; apc_auto_enable_reg_write &rArr; gn7161_apc_auto_enable_ctrl &rArr; master_reg_2byte_size_read &rArr; master_reg_byte_read &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apc_target_voltage_reg_write
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apc_auto_enable_reg_write
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;om_erase_data_config_flash
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;om_save_data_config_flash
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.i2c_cmd_register_init)
</UL>
<P><STRONG><a name="[ab]"></a>com_usart_gpio_config</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, com_usart_comm.o(.text.com_usart_gpio_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = com_usart_gpio_config &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_usart_init
</UL>

<P><STRONG><a name="[ae]"></a>com_usart_init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, com_usart_comm.o(.text.com_usart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = com_usart_init &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmit_config
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receive_config
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_parity_config
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_stop_bit_set
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_word_length_set
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_usart_gpio_config
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b8]"></a>comm_update_flash_finish_one_page</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, update_comm.o(.text.comm_update_flash_finish_one_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = comm_update_flash_finish_one_page &rArr; flash_write &rArr; fmc_doubleword_program &rArr; fmc_bank1_ready_wait &rArr; fmc_bank1_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_erase_single_page
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_update_write_mem_one_page_to_flash
</UL>

<P><STRONG><a name="[bb]"></a>comm_update_write_mem_one_page_to_flash</STRONG> (Thumb, 278 bytes, Stack size 48 bytes, update_comm.o(.text.comm_update_write_mem_one_page_to_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = comm_update_write_mem_one_page_to_flash &rArr; comm_update_flash_finish_one_page &rArr; flash_write &rArr; fmc_doubleword_program &rArr; fmc_bank1_ready_wait &rArr; fmc_bank1_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_update_flash_finish_one_page
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_firmware_write_reg_byte
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_app_write_reg_byte
</UL>

<P><STRONG><a name="[bd]"></a>comm_update_write_to_flash</STRONG> (Thumb, 334 bytes, Stack size 32 bytes, update_comm.o(.text.comm_update_write_to_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = comm_update_write_to_flash &rArr; flash_write &rArr; fmc_doubleword_program &rArr; fmc_bank1_ready_wait &rArr; fmc_bank1_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_erase_single_page
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upate_mem_is_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_firmware_write_reg_byte
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_app_write_reg_byte
</UL>

<P><STRONG><a name="[44]"></a>cpa_i2c_reg_write</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, sff_8472.o(.text.cpa_i2c_reg_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = cpa_i2c_reg_write &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ux3326_set_tx_ld_cpa
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_set_tx_ld_cpa
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_set_tx_ld_cpa
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.i2c_cmd_register_init)
</UL>
<P><STRONG><a name="[154]"></a>crc_deinit</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, gd32e501_crc.o(.text.crc_deinit))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;om_crc32_reset
</UL>

<P><STRONG><a name="[157]"></a>crc_input_data_reverse_config</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, gd32e501_crc.o(.text.crc_input_data_reverse_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = crc_input_data_reverse_config
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;om_crc32_reset
</UL>

<P><STRONG><a name="[155]"></a>crc_polynomial_size_set</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, gd32e501_crc.o(.text.crc_polynomial_size_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = crc_polynomial_size_set
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;om_crc32_reset
</UL>

<P><STRONG><a name="[156]"></a>crc_reverse_output_data_enable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gd32e501_crc.o(.text.crc_reverse_output_data_enable))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;om_crc32_reset
</UL>

<P><STRONG><a name="[cf]"></a>dac_data_set</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, gd32e501_dac.o(.text.dac_data_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dac_data_set
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm2508_set_vea
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_vtec_ctl_set
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dac_value_write_reg
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm41282c_set_apd_vcc
</UL>

<P><STRONG><a name="[c2]"></a>dac_deinit</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, gd32e501_dac.o(.text.dac_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = dac_deinit &rArr; rcu_periph_reset_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_periph_config
</UL>

<P><STRONG><a name="[cb]"></a>dac_enable</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gd32e501_dac.o(.text.dac_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dac_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_periph_config
</UL>

<P><STRONG><a name="[c5]"></a>dac_gpion_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dac_comm.o(.text.dac_gpion_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = dac_gpion_init &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_periph_config
</UL>

<P><STRONG><a name="[cc]"></a>dac_output_buffer_disable</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gd32e501_dac.o(.text.dac_output_buffer_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dac_output_buffer_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_periph_config
</UL>

<P><STRONG><a name="[ca]"></a>dac_output_buffer_enable</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gd32e501_dac.o(.text.dac_output_buffer_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dac_output_buffer_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_periph_config
</UL>

<P><STRONG><a name="[c6]"></a>dac_periph_config</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, dac_comm.o(.text.dac_periph_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = dac_periph_config &rArr; dac_deinit &rArr; rcu_periph_reset_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_software_trigger_enable
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_output_buffer_disable
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_enable
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_output_buffer_enable
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_wave_mode_config
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_trigger_disable
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_trigger_source_config
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_deinit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_gpion_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cd]"></a>dac_software_trigger_enable</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gd32e501_dac.o(.text.dac_software_trigger_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dac_software_trigger_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_periph_config
</UL>

<P><STRONG><a name="[c8]"></a>dac_trigger_disable</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gd32e501_dac.o(.text.dac_trigger_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dac_trigger_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_periph_config
</UL>

<P><STRONG><a name="[c7]"></a>dac_trigger_source_config</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, gd32e501_dac.o(.text.dac_trigger_source_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dac_trigger_source_config
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_periph_config
</UL>

<P><STRONG><a name="[ce]"></a>dac_vtec_ctl_set</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, dac_comm.o(.text.dac_vtec_ctl_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dac_vtec_ctl_set &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_data_set
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tec_set_ctl_voltage
</UL>

<P><STRONG><a name="[c9]"></a>dac_wave_mode_config</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, gd32e501_dac.o(.text.dac_wave_mode_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dac_wave_mode_config
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_periph_config
</UL>

<P><STRONG><a name="[3c]"></a>ddm_i2c_switch_auto_process_reg_write</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, sff_8472.o(.text.ddm_i2c_switch_auto_process_reg_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ddm_i2c_switch_auto_process_reg_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.i2c_cmd_register_init)
</UL>
<P><STRONG><a name="[d0]"></a>ddm_process</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, sff_8472.o(.text.ddm_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ddm_process &rArr; update_om_diagnose &rArr; update_om_tx_power &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_om_warning
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_om_diagnose
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[78]"></a>delay_decrement</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, systick.o(.text.delay_decrement))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[d4]"></a>dma_channel_disable</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, gd32e501_dma.o(.text.dma_channel_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = dma_channel_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_init
</UL>

<P><STRONG><a name="[88]"></a>dma_channel_enable</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, gd32e501_dma.o(.text.dma_channel_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = dma_channel_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_dma_config_init
</UL>

<P><STRONG><a name="[87]"></a>dma_circulation_enable</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, gd32e501_dma.o(.text.dma_circulation_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = dma_circulation_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_dma_config_init
</UL>

<P><STRONG><a name="[85]"></a>dma_deinit</STRONG> (Thumb, 128 bytes, Stack size 4 bytes, gd32e501_dma.o(.text.dma_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = dma_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_dma_config_init
</UL>

<P><STRONG><a name="[86]"></a>dma_init</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, gd32e501_dma.o(.text.dma_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = dma_init &rArr; dma_channel_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_dma_config_init
</UL>

<P><STRONG><a name="[43]"></a>eq_i2c_reg_write</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, sff_8472.o(.text.eq_i2c_reg_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = eq_i2c_reg_write &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_set_rx_eq_boost
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_set_rx_eq_boost
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.i2c_cmd_register_init)
</UL>
<P><STRONG><a name="[16d]"></a>exti_init</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, gd32e501_exti.o(.text.exti_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = exti_init
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm41282c_init
</UL>

<P><STRONG><a name="[73]"></a>exti_interrupt_flag_clear</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, gd32e501_exti.o(.text.exti_interrupt_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = exti_interrupt_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm41282c_init
</UL>

<P><STRONG><a name="[6f]"></a>exti_interrupt_flag_get</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, gd32e501_exti.o(.text.exti_interrupt_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = exti_interrupt_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
</UL>

<P><STRONG><a name="[10f]"></a>fh_delay_ms</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, mcu_system_comm.o(.text.fh_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fh_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_init
</UL>

<P><STRONG><a name="[83]"></a>fh_delay_us</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, mcu_system_comm.o(.text.fh_delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fh_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_get_mpd_ibias
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_get_mpd_ibias
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_get_ld_ibias
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_get_ld_ibias
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_get_voltage
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_get_voltage
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_channel_sample_average
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_inserted_channel_sample_average
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d7]"></a>find_adc_temp</STRONG> (Thumb, 390 bytes, Stack size 48 bytes, tec_comm.o(.text.find_adc_temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = find_adc_temp &rArr; calc_temp_value
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_temp_value
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tec_i2_ctl_temperature_reg_read
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tec_get_therm_temperature
</UL>

<P><STRONG><a name="[d9]"></a>flash_config_init</STRONG> (Thumb, 854 bytes, Stack size 48 bytes, sff_8472.o(.text.flash_config_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = flash_config_init &rArr; flash_write &rArr; fmc_doubleword_program &rArr; fmc_bank1_ready_wait &rArr; fmc_bank1_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_erase_single_page
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[162]"></a>flash_read</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, sff_8472.o(.text.flash_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;om_v2_flash_read_reg_byte
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_update_flag
</UL>

<P><STRONG><a name="[ba]"></a>flash_write</STRONG> (Thumb, 210 bytes, Stack size 48 bytes, sff_8472.o(.text.flash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = flash_write &rArr; fmc_doubleword_program &rArr; fmc_bank1_ready_wait &rArr; fmc_bank1_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_lock
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_doubleword_program
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_unlock
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank0_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_config_init
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;om_flash_write_reg_byte
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;om_save_data_config_flash
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_update_flash_finish_one_page
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_update_flag
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_update_write_to_flash
</UL>

<P><STRONG><a name="[da]"></a>fmc_bank0_flag_clear</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, gd32e501_fmc.o(.text.fmc_bank0_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fmc_bank0_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_erase_single_page
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>

<P><STRONG><a name="[de]"></a>fmc_bank0_ready_wait</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, gd32e501_fmc.o(.text.fmc_bank0_ready_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = fmc_bank0_ready_wait &rArr; fmc_bank0_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank0_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_doubleword_program
</UL>

<P><STRONG><a name="[df]"></a>fmc_bank0_state_get</STRONG> (Thumb, 96 bytes, Stack size 4 bytes, gd32e501_fmc.o(.text.fmc_bank0_state_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fmc_bank0_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank0_ready_wait
</UL>

<P><STRONG><a name="[e0]"></a>fmc_bank1_ready_wait</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, gd32e501_fmc.o(.text.fmc_bank1_ready_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = fmc_bank1_ready_wait &rArr; fmc_bank1_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank1_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_doubleword_program
</UL>

<P><STRONG><a name="[e1]"></a>fmc_bank1_state_get</STRONG> (Thumb, 96 bytes, Stack size 4 bytes, gd32e501_fmc.o(.text.fmc_bank1_state_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fmc_bank1_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank1_ready_wait
</UL>

<P><STRONG><a name="[dc]"></a>fmc_doubleword_program</STRONG> (Thumb, 502 bytes, Stack size 56 bytes, gd32e501_fmc.o(.text.fmc_doubleword_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = fmc_doubleword_program &rArr; fmc_bank1_ready_wait &rArr; fmc_bank1_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank1_ready_wait
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank0_ready_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>

<P><STRONG><a name="[b9]"></a>fmc_erase_single_page</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sff_8472.o(.text.fmc_erase_single_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = fmc_erase_single_page &rArr; fmc_page_erase &rArr; fmc_bank1_ready_wait &rArr; fmc_bank1_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_lock
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_unlock
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank0_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_config_init
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;om_flash_write_reg_byte
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;om_erase_data_config_flash
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;om_save_data_config_flash
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_update_flash_finish_one_page
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_update_flag
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_update_write_to_flash
</UL>

<P><STRONG><a name="[dd]"></a>fmc_lock</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gd32e501_fmc.o(.text.fmc_lock))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_erase_single_page
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>

<P><STRONG><a name="[e2]"></a>fmc_page_erase</STRONG> (Thumb, 470 bytes, Stack size 40 bytes, gd32e501_fmc.o(.text.fmc_page_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = fmc_page_erase &rArr; fmc_bank1_ready_wait &rArr; fmc_bank1_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank1_ready_wait
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank0_ready_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_erase_single_page
</UL>

<P><STRONG><a name="[db]"></a>fmc_unlock</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, gd32e501_fmc.o(.text.fmc_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_erase_single_page
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>

<P><STRONG><a name="[56]"></a>fputc</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, main.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = fputc &rArr; usart_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[8b]"></a>get_adc_inserted_channel_sample</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, adc_comm.o(.text.get_adc_inserted_channel_sample))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = get_adc_inserted_channel_sample &rArr; adc_inserted_channel_config
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_inserted_data_read
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_flag_clear
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_flag_get
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_inserted_channel_config
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_software_trigger_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_inserted_channel_sample_average
</UL>

<P><STRONG><a name="[e8]"></a>get_case_therm_temperature</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, sff_8472.o(.text.get_case_therm_temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = get_case_therm_temperature &rArr; search_bisection_temp_by_adc &rArr; adc_calc_temp_value
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_channel_sample_average
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_bisection_temp_by_adc
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_om_temperature
</UL>

<P><STRONG><a name="[14b]"></a>get_master_i2c_by_dev_address</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, i2c_opt_ie.o(.text.get_master_i2c_by_dev_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_master_i2c_by_dev_address
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_read
</UL>

<P><STRONG><a name="[9f]"></a>get_u16</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, mcu_system_comm.o(.text.get_u16))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_los_hyst_i2c_reg_write
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_los_threshold_i2c_reg_write
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpa_i2c_reg_write
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_deemph_i2c_reg_write
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_deemph_i2c_reg_write
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_i2c_reg_write
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eq_i2c_reg_write
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imod_i2c_reg_write
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ibias_i2c_reg_write
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vea_i2c_vcc_reg_write
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soa_i2c_ild_reg_write
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apd_i2c_vcc_reg_write
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dac_value_write_reg
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tec_i2c_vtec_ctl_reg_write
</UL>

<P><STRONG><a name="[18d]"></a>get_u32</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, mcu_system_comm.o(.text.get_u32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_firmware_write_reg_byte
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_app_write_reg_byte
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tec_i2c_temperature_obj_write
</UL>

<P><STRONG><a name="[ea]"></a>gn7153_adc</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, gn7153.o(.text.gn7153_adc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gn7153_adc &rArr; master_reg_byte_write &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_init
</UL>

<P><STRONG><a name="[9b]"></a>gn7153_apc_auto_enable_ctrl</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, gn7153.o(.text.gn7153_apc_auto_enable_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = gn7153_apc_auto_enable_ctrl &rArr; master_reg_1byte_size_read &rArr; master_reg_byte_read &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_1byte_size_read
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apc_auto_enable_reg_write
</UL>

<P><STRONG><a name="[ed]"></a>gn7153_apc_ctrl</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gn7153.o(.text.gn7153_apc_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gn7153_apc_ctrl &rArr; master_reg_byte_write &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_normal_setting
</UL>

<P><STRONG><a name="[9e]"></a>gn7153_apc_target_voltage</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, gn7153.o(.text.gn7153_apc_target_voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gn7153_apc_target_voltage &rArr; master_reg_byte_write &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apc_target_voltage_reg_write
</UL>

<P><STRONG><a name="[ee]"></a>gn7153_get_ld_ibias</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, gn7153.o(.text.gn7153_get_ld_ibias))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = gn7153_get_ld_ibias &rArr; master_reg_1byte_size_read &rArr; master_reg_byte_read &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fh_delay_us
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_1byte_size_read
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_ld_ibias_monitor_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_om_bias
</UL>

<P><STRONG><a name="[a6]"></a>gn7153_get_mpd_ibias</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, gn7153.o(.text.gn7153_get_mpd_ibias))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = gn7153_get_mpd_ibias &rArr; master_reg_1byte_size_read &rArr; master_reg_byte_read &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fh_delay_us
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_1byte_size_read
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_mpd_ibias_monitor_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_om_tx_power
</UL>

<P><STRONG><a name="[f1]"></a>gn7153_get_voltage</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, gn7153.o(.text.gn7153_get_voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = gn7153_get_voltage &rArr; master_reg_1byte_size_read &rArr; master_reg_byte_read &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fh_delay_us
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_1byte_size_read
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_voltage_monitor_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_om_voltage
</UL>

<P><STRONG><a name="[f3]"></a>gn7153_gpio_init</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, gn7153.o(.text.gn7153_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = gn7153_gpio_init &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_init
</UL>

<P><STRONG><a name="[f4]"></a>gn7153_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gn7153.o(.text.gn7153_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = gn7153_init &rArr; gn7153_normal_setting &rArr; gn7153_set_ld_imod &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_soft_txdsbl_ctrl
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_adc
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_normal_setting
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_reset
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ef]"></a>gn7153_ld_ibias_monitor_ctrl</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, gn7153.o(.text.gn7153_ld_ibias_monitor_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gn7153_ld_ibias_monitor_ctrl &rArr; master_reg_byte_write &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_get_ld_ibias
</UL>

<P><STRONG><a name="[f0]"></a>gn7153_mpd_ibias_monitor_ctrl</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, gn7153.o(.text.gn7153_mpd_ibias_monitor_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gn7153_mpd_ibias_monitor_ctrl &rArr; master_reg_byte_write &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_get_mpd_ibias
</UL>

<P><STRONG><a name="[f7]"></a>gn7153_normal_setting</STRONG> (Thumb, 224 bytes, Stack size 64 bytes, gn7153.o(.text.gn7153_normal_setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = gn7153_normal_setting &rArr; gn7153_set_ld_imod &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_set_ld_imod
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_override_ctrl
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_apc_ctrl
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_source_sink_select
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_init
</UL>

<P><STRONG><a name="[f9]"></a>gn7153_override_ctrl</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gn7153.o(.text.gn7153_override_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gn7153_override_ctrl &rArr; master_reg_byte_write &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_normal_setting
</UL>

<P><STRONG><a name="[f5]"></a>gn7153_reset</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gn7153.o(.text.gn7153_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = gn7153_reset &rArr; system_delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_ms
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_init
</UL>

<P><STRONG><a name="[fd]"></a>gn7153_set_ld_ibias</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, gn7153.o(.text.gn7153_set_ld_ibias))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gn7153_set_ld_ibias &rArr; master_reg_byte_write &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;om_default_config_flash_init
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ibias_i2c_reg_write
</UL>

<P><STRONG><a name="[fa]"></a>gn7153_set_ld_imod</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, gn7153.o(.text.gn7153_set_ld_imod))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gn7153_set_ld_imod &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;om_default_config_flash_init
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imod_i2c_reg_write
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_normal_setting
</UL>

<P><STRONG><a name="[ff]"></a>gn7153_set_rx_drv_preemph</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, gn7153.o(.text.gn7153_set_rx_drv_preemph))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gn7153_set_rx_drv_preemph &rArr; master_reg_byte_write &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;om_default_config_flash_init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_deemph_i2c_reg_write
</UL>

<P><STRONG><a name="[d6]"></a>gn7153_set_rx_eq_boost</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gn7153.o(.text.gn7153_set_rx_eq_boost))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gn7153_set_rx_eq_boost &rArr; master_reg_byte_write &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;om_default_config_flash_init
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eq_i2c_reg_write
</UL>

<P><STRONG><a name="[100]"></a>gn7153_set_rx_los_hyst</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gn7153.o(.text.gn7153_set_rx_los_hyst))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gn7153_set_rx_los_hyst &rArr; master_reg_byte_write &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;om_default_config_flash_init
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_los_hyst_i2c_reg_write
</UL>

<P><STRONG><a name="[101]"></a>gn7153_set_rx_los_threshold</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gn7153.o(.text.gn7153_set_rx_los_threshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gn7153_set_rx_los_threshold &rArr; master_reg_byte_write &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;om_default_config_flash_init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_los_threshold_i2c_reg_write
</UL>

<P><STRONG><a name="[102]"></a>gn7153_set_rx_swing</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gn7153.o(.text.gn7153_set_rx_swing))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gn7153_set_rx_swing &rArr; master_reg_byte_write &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;om_default_config_flash_init
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_i2c_reg_write
</UL>

<P><STRONG><a name="[c0]"></a>gn7153_set_tx_ld_cpa</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, gn7153.o(.text.gn7153_set_tx_ld_cpa))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gn7153_set_tx_ld_cpa &rArr; master_reg_byte_write &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;om_default_config_flash_init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpa_i2c_reg_write
</UL>

<P><STRONG><a name="[103]"></a>gn7153_set_tx_ld_preemph</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, gn7153.o(.text.gn7153_set_tx_ld_preemph))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gn7153_set_tx_ld_preemph &rArr; master_reg_byte_write &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;om_default_config_flash_init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_deemph_i2c_reg_write
</UL>

<P><STRONG><a name="[f6]"></a>gn7153_soft_txdsbl_ctrl</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, gn7153.o(.text.gn7153_soft_txdsbl_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gn7153_soft_txdsbl_ctrl &rArr; master_reg_byte_write &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;om_memory_state_ctrl_write_reg_byte
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_init
</UL>

<P><STRONG><a name="[f8]"></a>gn7153_source_sink_select</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gn7153.o(.text.gn7153_source_sink_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gn7153_source_sink_select &rArr; master_reg_byte_write &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_normal_setting
</UL>

<P><STRONG><a name="[f2]"></a>gn7153_voltage_monitor_ctrl</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gn7153.o(.text.gn7153_voltage_monitor_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gn7153_voltage_monitor_ctrl &rArr; master_reg_byte_write &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_get_voltage
</UL>

<P><STRONG><a name="[104]"></a>gn7161_adc</STRONG> (Thumb, 218 bytes, Stack size 72 bytes, gn7161.o(.text.gn7161_adc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = gn7161_adc &rArr; master_reg_byte_write &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_init
</UL>

<P><STRONG><a name="[9a]"></a>gn7161_apc_auto_enable_ctrl</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, gn7161.o(.text.gn7161_apc_auto_enable_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = gn7161_apc_auto_enable_ctrl &rArr; master_reg_2byte_size_read &rArr; master_reg_byte_read &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_2byte_size_read
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apc_auto_enable_reg_write
</UL>

<P><STRONG><a name="[9d]"></a>gn7161_apc_target_voltage</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, gn7161.o(.text.gn7161_apc_target_voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gn7161_apc_target_voltage &rArr; master_reg_byte_write &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apc_target_voltage_reg_write
</UL>

<P><STRONG><a name="[106]"></a>gn7161_download_firmware</STRONG> (Thumb, 526 bytes, Stack size 304 bytes, gn7161.o(.text.gn7161_download_firmware))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = gn7161_download_firmware &rArr; master_reg_byte_write &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_init
</UL>

<P><STRONG><a name="[107]"></a>gn7161_get_ld_ibias</STRONG> (Thumb, 272 bytes, Stack size 48 bytes, gn7161.o(.text.gn7161_get_ld_ibias))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = gn7161_get_ld_ibias &rArr; master_reg_2byte_size_read &rArr; master_reg_byte_read &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fh_delay_us
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_2byte_size_read
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_ld_ibias_monitor_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_om_bias
</UL>

<P><STRONG><a name="[a5]"></a>gn7161_get_mpd_ibias</STRONG> (Thumb, 272 bytes, Stack size 48 bytes, gn7161.o(.text.gn7161_get_mpd_ibias))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = gn7161_get_mpd_ibias &rArr; master_reg_2byte_size_read &rArr; master_reg_byte_read &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fh_delay_us
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_2byte_size_read
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_mpd_ibias_monitor_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_om_tx_power
</UL>

<P><STRONG><a name="[10a]"></a>gn7161_get_voltage</STRONG> (Thumb, 272 bytes, Stack size 48 bytes, gn7161.o(.text.gn7161_get_voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = gn7161_get_voltage &rArr; master_reg_2byte_size_read &rArr; master_reg_byte_read &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fh_delay_us
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_2byte_size_read
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_voltage_monitor_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_om_voltage
</UL>

<P><STRONG><a name="[10c]"></a>gn7161_gpio_init</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, gn7161.o(.text.gn7161_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = gn7161_gpio_init &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_init
</UL>

<P><STRONG><a name="[10d]"></a>gn7161_init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, gn7161.o(.text.gn7161_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = gn7161_init &rArr; gn7161_download_firmware &rArr; master_reg_byte_write &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_soft_txdsbl_ctrl
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fh_delay_ms
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_adc
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_tx_lane_ctrl
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_normal_setting
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_download_firmware
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_reset
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[108]"></a>gn7161_ld_ibias_monitor_ctrl</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, gn7161.o(.text.gn7161_ld_ibias_monitor_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gn7161_ld_ibias_monitor_ctrl &rArr; master_reg_byte_write &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_get_ld_ibias
</UL>

<P><STRONG><a name="[109]"></a>gn7161_mpd_ibias_monitor_ctrl</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, gn7161.o(.text.gn7161_mpd_ibias_monitor_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gn7161_mpd_ibias_monitor_ctrl &rArr; master_reg_byte_write &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_get_mpd_ibias
</UL>

<P><STRONG><a name="[111]"></a>gn7161_normal_setting</STRONG> (Thumb, 732 bytes, Stack size 200 bytes, gn7161.o(.text.gn7161_normal_setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = gn7161_normal_setting &rArr; gn7161_set_rx_swing &rArr; master_reg_byte_write &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_set_rx_swing
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_set_rx_eq_boost
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_init
</UL>

<P><STRONG><a name="[10e]"></a>gn7161_reset</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gn7161.o(.text.gn7161_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = gn7161_reset &rArr; system_delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_ms
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_init
</UL>

<P><STRONG><a name="[114]"></a>gn7161_set_ld_ibias</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, gn7161.o(.text.gn7161_set_ld_ibias))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gn7161_set_ld_ibias &rArr; master_reg_byte_write &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;om_default_config_flash_init
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ibias_i2c_reg_write
</UL>

<P><STRONG><a name="[115]"></a>gn7161_set_ld_imod</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, gn7161.o(.text.gn7161_set_ld_imod))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gn7161_set_ld_imod &rArr; master_reg_byte_write &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;om_default_config_flash_init
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imod_i2c_reg_write
</UL>

<P><STRONG><a name="[116]"></a>gn7161_set_rx_drv_deemph</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, gn7161.o(.text.gn7161_set_rx_drv_deemph))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gn7161_set_rx_drv_deemph &rArr; master_reg_byte_write &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;om_default_config_flash_init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_deemph_i2c_reg_write
</UL>

<P><STRONG><a name="[d5]"></a>gn7161_set_rx_eq_boost</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, gn7161.o(.text.gn7161_set_rx_eq_boost))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gn7161_set_rx_eq_boost &rArr; master_reg_byte_write &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;om_default_config_flash_init
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eq_i2c_reg_write
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_normal_setting
</UL>

<P><STRONG><a name="[117]"></a>gn7161_set_rx_los_hyst</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gn7161.o(.text.gn7161_set_rx_los_hyst))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gn7161_set_rx_los_hyst &rArr; master_reg_byte_write &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;om_default_config_flash_init
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_los_hyst_i2c_reg_write
</UL>

<P><STRONG><a name="[118]"></a>gn7161_set_rx_los_threshold</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gn7161.o(.text.gn7161_set_rx_los_threshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gn7161_set_rx_los_threshold &rArr; master_reg_byte_write &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;om_default_config_flash_init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_los_threshold_i2c_reg_write
</UL>

<P><STRONG><a name="[113]"></a>gn7161_set_rx_swing</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, gn7161.o(.text.gn7161_set_rx_swing))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gn7161_set_rx_swing &rArr; master_reg_byte_write &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;om_default_config_flash_init
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_i2c_reg_write
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_normal_setting
</UL>

<P><STRONG><a name="[bf]"></a>gn7161_set_tx_ld_cpa</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gn7161.o(.text.gn7161_set_tx_ld_cpa))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gn7161_set_tx_ld_cpa &rArr; master_reg_byte_write &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;om_default_config_flash_init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpa_i2c_reg_write
</UL>

<P><STRONG><a name="[119]"></a>gn7161_set_tx_ld_deemph</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, gn7161.o(.text.gn7161_set_tx_ld_deemph))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gn7161_set_tx_ld_deemph &rArr; master_reg_byte_write &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;om_default_config_flash_init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_deemph_i2c_reg_write
</UL>

<P><STRONG><a name="[110]"></a>gn7161_soft_txdsbl_ctrl</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, gn7161.o(.text.gn7161_soft_txdsbl_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gn7161_soft_txdsbl_ctrl &rArr; master_reg_byte_write &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;om_memory_state_ctrl_write_reg_byte
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_init
</UL>

<P><STRONG><a name="[112]"></a>gn7161_tx_lane_ctrl</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, gn7161.o(.text.gn7161_tx_lane_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gn7161_tx_lane_ctrl &rArr; master_reg_byte_write &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_init
</UL>

<P><STRONG><a name="[10b]"></a>gn7161_voltage_monitor_ctrl</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, gn7161.o(.text.gn7161_voltage_monitor_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gn7161_voltage_monitor_ctrl &rArr; master_reg_byte_write &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_get_voltage
</UL>

<P><STRONG><a name="[ac]"></a>gpio_af_set</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, gd32e501_gpio.o(.text.gpio_af_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gpio_af_set
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_master_i2c_config_init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_slave_i2c_config_init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_usart_gpio_config
</UL>

<P><STRONG><a name="[fb]"></a>gpio_bit_reset</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gd32e501_gpio.o(.text.gpio_bit_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_bit_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_gpio_value_write_reg
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm41282c_init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ux3326_reset
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_reset
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_reset
</UL>

<P><STRONG><a name="[fc]"></a>gpio_bit_set</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gd32e501_gpio.o(.text.gpio_bit_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_gpio_value_write_reg
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tec_gpio_init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm41282c_init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm2508_init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm41295_init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ux3326_reset
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_reset
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_reset
</UL>

<P><STRONG><a name="[d1]"></a>gpio_input_bit_get</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, gd32e501_gpio.o(.text.gpio_input_bit_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = gpio_input_bit_get
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddm_process
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_gpio_info_read_reg
</UL>

<P><STRONG><a name="[11a]"></a>gpio_master_i2c_config_init</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, i2c_comm.o(.text.gpio_master_i2c_config_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = gpio_master_i2c_config_init &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_config_init
</UL>

<P><STRONG><a name="[8a]"></a>gpio_mode_set</STRONG> (Thumb, 156 bytes, Stack size 28 bytes, gd32e501_gpio.o(.text.gpio_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_gpio_init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_gpion_init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_master_i2c_config_init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_slave_i2c_config_init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_usart_gpio_config
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_gpio_value_write_reg
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tec_gpio_init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm41282c_gpio_init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm2508_gpio_init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm41295_gpio_init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ux3326_gpio_init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_gpio_init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_gpio_init
</UL>

<P><STRONG><a name="[194]"></a>gpio_output_bit_get</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, gd32e501_gpio.o(.text.gpio_output_bit_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = gpio_output_bit_get
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_gpio_info_read_reg
</UL>

<P><STRONG><a name="[ad]"></a>gpio_output_options_set</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, gd32e501_gpio.o(.text.gpio_output_options_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gpio_output_options_set
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_master_i2c_config_init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_slave_i2c_config_init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_usart_gpio_config
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tec_gpio_init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm41282c_gpio_init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm2508_gpio_init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm41295_gpio_init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ux3326_gpio_init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_gpio_init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_gpio_init
</UL>

<P><STRONG><a name="[11b]"></a>gpio_slave_i2c_config_init</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, i2c_comm.o(.text.gpio_slave_i2c_config_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = gpio_slave_i2c_config_init &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_config_init
</UL>

<P><STRONG><a name="[13d]"></a>i2c_address_config</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, gd32e501_i2c.o(.text.i2c_address_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = i2c_address_config
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_i2c_dev_config
</UL>

<P><STRONG><a name="[13e]"></a>i2c_automatic_end_disable</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, gd32e501_i2c.o(.text.i2c_automatic_end_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = i2c_automatic_end_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_i2c_dev_config
</UL>

<P><STRONG><a name="[11c]"></a>i2c_cmd_register_init</STRONG> (Thumb, 656 bytes, Stack size 72 bytes, main.o(.text.i2c_cmd_register_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = i2c_cmd_register_init &rArr; mcu_register_reg_addr_read_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_register_reg_addr_read_callback
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_register_reg_addr_write_callback
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_func_register_write_callback
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_func_register_read_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[121]"></a>i2c_config_init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, i2c_comm.o(.text.i2c_config_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = i2c_config_init &rArr; master_i2c_config_init &rArr; master_i2c_dev_config &rArr; nvic_irq_enable &rArr; nvic_priority_group_set
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_master_i2c_config_init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_slave_i2c_config_init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_optical_pwd_limit_init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_i2c_config_init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_i2c_config_init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[143]"></a>i2c_data_receive</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, gd32e501_i2c.o(.text.i2c_data_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = i2c_data_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_i2c_receive_handle
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_i2c_event_irq_handler
</UL>

<P><STRONG><a name="[146]"></a>i2c_data_transmit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gd32e501_i2c.o(.text.i2c_data_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_data_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_i2c_read_handle
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_i2c_event_irq_handler
</UL>

<P><STRONG><a name="[14f]"></a>i2c_disable</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, gd32e501_i2c.o(.text.i2c_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = i2c_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_read
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_slave_i2c
</UL>

<P><STRONG><a name="[13f]"></a>i2c_enable</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, gd32e501_i2c.o(.text.i2c_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = i2c_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_i2c_dev_config
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_i2c_dev_config
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_read
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_slave_i2c
</UL>

<P><STRONG><a name="[14e]"></a>i2c_flag_get</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, gd32e501_i2c.o(.text.i2c_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = i2c_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_read
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_event_irq_handler
</UL>

<P><STRONG><a name="[180]"></a>i2c_get_write_lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, i2c_opt_ie.o(.text.i2c_get_write_lock))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_i2c_write_handle
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_i2c_receive_handle
</UL>

<P><STRONG><a name="[148]"></a>i2c_interrupt_disable</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gd32e501_i2c.o(.text.i2c_interrupt_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_event_irq_handler
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_i2c_event_irq_handler
</UL>

<P><STRONG><a name="[141]"></a>i2c_interrupt_enable</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gd32e501_i2c.o(.text.i2c_interrupt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_i2c_dev_config
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_i2c_dev_config
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_read
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_i2c_read_handle
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_i2c_receive_handle
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_event_irq_handler
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_i2c_event_irq_handler
</UL>

<P><STRONG><a name="[149]"></a>i2c_interrupt_flag_clear</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gd32e501_i2c.o(.text.i2c_interrupt_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_interrupt_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_event_irq_handler
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_i2c_event_irq_handler
</UL>

<P><STRONG><a name="[142]"></a>i2c_interrupt_flag_get</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, gd32e501_i2c.o(.text.i2c_interrupt_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = i2c_interrupt_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_event_irq_handler
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_i2c_event_irq_handler
</UL>

<P><STRONG><a name="[14c]"></a>i2c_master_addressing</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, gd32e501_i2c.o(.text.i2c_master_addressing))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = i2c_master_addressing
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_read
</UL>

<P><STRONG><a name="[144]"></a>i2c_master_buffer_info_data_add</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, i2c_opt_ie.o(.text.i2c_master_buffer_info_data_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_master_buffer_info_data_add
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_i2c_event_irq_handler
</UL>

<P><STRONG><a name="[13c]"></a>i2c_master_clock_config</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, gd32e501_i2c.o(.text.i2c_master_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = i2c_master_clock_config
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_i2c_dev_config
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_i2c_dev_config
</UL>

<P><STRONG><a name="[126]"></a>i2c_master_info_buffer_clear</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, i2c_opt_ie.o(.text.i2c_master_info_buffer_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_master_info_buffer_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_i2c_dev_config
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_read
</UL>

<P><STRONG><a name="[145]"></a>i2c_master_info_popup_data_from_buffer</STRONG> (Thumb, 110 bytes, Stack size 20 bytes, i2c_opt_ie.o(.text.i2c_master_info_popup_data_from_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = i2c_master_info_popup_data_from_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_i2c_event_irq_handler
</UL>

<P><STRONG><a name="[168]"></a>i2c_read_unlock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, i2c_opt_ie.o(.text.i2c_read_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_slave_i2c
</UL>

<P><STRONG><a name="[173]"></a>i2c_recevied_address_get</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, gd32e501_i2c.o(.text.i2c_recevied_address_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = i2c_recevied_address_get
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_event_irq_handler
</UL>

<P><STRONG><a name="[178]"></a>i2c_second_address_config</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, gd32e501_i2c.o(.text.i2c_second_address_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = i2c_second_address_config
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_i2c_dev_config
</UL>

<P><STRONG><a name="[127]"></a>i2c_slave_buffer_info_clear</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, i2c_opt_ie.o(.text.i2c_slave_buffer_info_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_slave_buffer_info_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_i2c_dev_config
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_reg_byte_write
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_event_irq_handler
</UL>

<P><STRONG><a name="[181]"></a>i2c_slave_buffer_info_data_add</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, i2c_opt_ie.o(.text.i2c_slave_buffer_info_data_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_slave_buffer_info_data_add
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_i2c_receive_handle
</UL>

<P><STRONG><a name="[128]"></a>i2c_slave_buffer_mng_regaddress_info</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, i2c_opt_ie.o(.text.i2c_slave_buffer_mng_regaddress_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = i2c_slave_buffer_mng_regaddress_info
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_i2c_read_handle
</UL>

<P><STRONG><a name="[11e]"></a>i2c_slave_func_register_read_callback</STRONG> (Thumb, 130 bytes, Stack size 12 bytes, i2c_opt_ie.o(.text.i2c_slave_func_register_read_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = i2c_slave_func_register_read_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_cmd_register_init
</UL>

<P><STRONG><a name="[11d]"></a>i2c_slave_func_register_write_callback</STRONG> (Thumb, 128 bytes, Stack size 12 bytes, i2c_opt_ie.o(.text.i2c_slave_func_register_write_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = i2c_slave_func_register_write_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_cmd_register_init
</UL>

<P><STRONG><a name="[17d]"></a>i2c_slave_info_get_buff_info</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, i2c_opt_ie.o(.text.i2c_slave_info_get_buff_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = i2c_slave_info_get_buff_info
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_i2c_write_handle
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_i2c_read_handle
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_i2c_receive_handle
</UL>

<P><STRONG><a name="[17f]"></a>i2c_slave_info_popup_data_from_buffer</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, i2c_opt_ie.o(.text.i2c_slave_info_popup_data_from_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = i2c_slave_info_popup_data_from_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_i2c_read_handle
</UL>

<P><STRONG><a name="[17c]"></a>i2c_slave_info_set_state_read_flag</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, i2c_opt_ie.o(.text.i2c_slave_info_set_state_read_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = i2c_slave_info_set_state_read_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_i2c_read_handle
</UL>

<P><STRONG><a name="[174]"></a>i2c_slave_info_slave_address_add</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, i2c_opt_ie.o(.text.i2c_slave_info_slave_address_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = i2c_slave_info_slave_address_add
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_event_irq_handler
</UL>

<P><STRONG><a name="[176]"></a>i2c_slave_info_state_is_read</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, i2c_opt_ie.o(.text.i2c_slave_info_state_is_read))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_i2c_read_handle
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_event_irq_handler
</UL>

<P><STRONG><a name="[12a]"></a>i2c_slave_read_write_handle</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, i2c_opt_ie.o(.text.i2c_slave_read_write_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = i2c_slave_read_write_handle &rArr; slave_i2c_middle_handle &rArr; slave_i2c_read_handle &rArr; slave_v2_reg_byte_read &rArr; master_reg_byte_read &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_i2c_middle_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[150]"></a>i2c_start_on_bus</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, gd32e501_i2c.o(.text.i2c_start_on_bus))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = i2c_start_on_bus
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_read
</UL>

<P><STRONG><a name="[147]"></a>i2c_stop_on_bus</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, gd32e501_i2c.o(.text.i2c_stop_on_bus))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = i2c_stop_on_bus
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_i2c_event_irq_handler
</UL>

<P><STRONG><a name="[13b]"></a>i2c_timing_config</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, gd32e501_i2c.o(.text.i2c_timing_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_timing_config
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_i2c_dev_config
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_i2c_dev_config
</UL>

<P><STRONG><a name="[14d]"></a>i2c_transfer_byte_number_config</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gd32e501_i2c.o(.text.i2c_transfer_byte_number_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_transfer_byte_number_config
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_read
</UL>

<P><STRONG><a name="[175]"></a>i2c_write_lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, i2c_opt_ie.o(.text.i2c_write_lock))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_event_irq_handler
</UL>

<P><STRONG><a name="[167]"></a>i2c_write_unlock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, i2c_opt_ie.o(.text.i2c_write_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_i2c_write_handle
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_slave_i2c
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_event_irq_handler
</UL>

<P><STRONG><a name="[40]"></a>ibias_i2c_reg_write</STRONG> (Thumb, 624 bytes, Stack size 64 bytes, sff_8472.o(.text.ibias_i2c_reg_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ibias_i2c_reg_write &rArr; gn7161_set_ld_ibias &rArr; master_reg_byte_write &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ux3326_set_ld_ibias
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_set_ld_ibias
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_set_ld_ibias
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.i2c_cmd_register_init)
</UL>
<P><STRONG><a name="[41]"></a>imod_i2c_reg_write</STRONG> (Thumb, 408 bytes, Stack size 32 bytes, sff_8472.o(.text.imod_i2c_reg_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = imod_i2c_reg_write &rArr; gn7161_set_ld_imod &rArr; master_reg_byte_write &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ux3326_set_ld_imod
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_set_ld_imod
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_set_ld_imod
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.i2c_cmd_register_init)
</UL>
<P><STRONG><a name="[2f]"></a>main</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = main &rArr; ddm_process &rArr; update_om_diagnose &rArr; update_om_tx_power &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_process_init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_config_init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddm_process
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;om_default_config_flash_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_periph_config
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_periph_config
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fh_delay_us
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscfg_config
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_config_init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_config_init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_read_write_handle
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_usart_init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_cmd_register_init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tec_process
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tec_config_init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm41282c_init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm2508_init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm41295_init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ux3326_init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[124]"></a>master_i2c_config_init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, i2c_opt_ie.o(.text.master_i2c_config_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = master_i2c_config_init &rArr; master_i2c_dev_config &rArr; nvic_irq_enable &rArr; nvic_priority_group_set
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_i2c_dev_config
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_config_init
</UL>

<P><STRONG><a name="[139]"></a>master_i2c_dev_config</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, i2c_opt_ie.o(.text.master_i2c_dev_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = master_i2c_dev_config &rArr; nvic_irq_enable &rArr; nvic_priority_group_set
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_automatic_end_disable
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_address_config
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_clock_config
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_timing_config
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_i2c_clock_config
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_interrupt_enable
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_info_buffer_clear
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_i2c_config_init
</UL>

<P><STRONG><a name="[74]"></a>master_i2c_event_irq_handler</STRONG> (Thumb, 418 bytes, Stack size 24 bytes, i2c_opt_ie.o(.text.master_i2c_event_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = master_i2c_event_irq_handler &rArr; i2c_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop_on_bus
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_data_transmit
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_data_receive
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_interrupt_disable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_interrupt_enable
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_interrupt_flag_clear
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_interrupt_flag_get
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_info_popup_data_from_buffer
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_buffer_info_data_add
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_EV_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_EV_IRQHandler
</UL>

<P><STRONG><a name="[ec]"></a>master_reg_1byte_size_read</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, i2c_opt_ie.o(.text.master_reg_1byte_size_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = master_reg_1byte_size_read &rArr; master_reg_byte_read &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_read
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_apc_auto_enable_ctrl
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ux3326_get_mpd_ibias
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_get_mpd_ibias
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ux3326_get_ld_ibias
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_get_ld_ibias
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ux3326_get_voltage
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_get_voltage
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm41295_ld_ctrl
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tec_release_limit_refresh
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm41295_vea_ctrl
</UL>

<P><STRONG><a name="[105]"></a>master_reg_2byte_size_read</STRONG> (Thumb, 62 bytes, Stack size 48 bytes, i2c_opt_ie.o(.text.master_reg_2byte_size_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = master_reg_2byte_size_read &rArr; master_reg_byte_read &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_read
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_apc_auto_enable_ctrl
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_get_mpd_ibias
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_get_ld_ibias
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_get_voltage
</UL>

<P><STRONG><a name="[14a]"></a>master_reg_byte_read</STRONG> (Thumb, 700 bytes, Stack size 48 bytes, i2c_opt_ie.o(.text.master_reg_byte_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = master_reg_byte_read &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start_on_bus
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_transfer_byte_number_config
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_addressing
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_master_i2c_by_dev_address
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_interrupt_enable
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_flag_get
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_info_buffer_clear
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_enable
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_disable
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_2byte_size_read
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_1byte_size_read
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_v2_reg_byte_read
</UL>

<P><STRONG><a name="[eb]"></a>master_reg_byte_write</STRONG> (Thumb, 510 bytes, Stack size 40 bytes, i2c_opt_ie.o(.text.master_reg_byte_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = master_reg_byte_write &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start_on_bus
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_transfer_byte_number_config
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_addressing
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_master_i2c_by_dev_address
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_interrupt_disable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_interrupt_enable
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_flag_get
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_info_buffer_clear
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_enable
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_disable
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_apc_target_voltage
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_apc_target_voltage
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_apc_auto_enable_ctrl
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_apc_auto_enable_ctrl
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ux3326_set_rx_los_hyst
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_set_rx_los_hyst
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_set_rx_los_hyst
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ux3326_set_rx_los_threshold
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_set_rx_los_threshold
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_set_rx_los_threshold
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ux3326_set_tx_ld_cpa
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_set_tx_ld_cpa
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_set_tx_ld_cpa
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_set_rx_drv_preemph
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_set_rx_drv_deemph
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_set_tx_ld_preemph
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_set_tx_ld_deemph
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ux3326_set_rx_swing
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_set_rx_swing
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_set_rx_swing
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_set_rx_eq_boost
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_set_rx_eq_boost
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ux3326_set_ld_imod
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_set_ld_imod
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_set_ld_imod
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ux3326_set_ld_ibias
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_set_ld_ibias
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_set_ld_ibias
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_get_mpd_ibias
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_get_mpd_ibias
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_get_ld_ibias
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_get_ld_ibias
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_get_voltage
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_get_voltage
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ux3326_soft_txdsbl_ctrl
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_soft_txdsbl_ctrl
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm41295_ld_ctrl
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_soft_txdsbl_ctrl
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_reg_byte_write
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tec_release_limit_refresh
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm41295_set_vea_reg
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm41295_set_ld_reg
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm41295_vea_ctrl
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ux3326_normal_setting
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_mpd_ibias_monitor_ctrl
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_ld_ibias_monitor_ctrl
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_voltage_monitor_ctrl
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_adc
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_tx_lane_ctrl
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_normal_setting
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_download_firmware
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_mpd_ibias_monitor_ctrl
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_ld_ibias_monitor_ctrl
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_voltage_monitor_ctrl
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_override_ctrl
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_apc_ctrl
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_source_sink_select
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_adc
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_normal_setting
</UL>

<P><STRONG><a name="[151]"></a>mcu_addr0xspec_1byte_reg_byte_read</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, i2c_comm.o(.text.mcu_addr0xspec_1byte_reg_byte_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mcu_addr0xspec_1byte_reg_byte_read
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_addr0xspec_reg_byte_read
</UL>

<P><STRONG><a name="[33]"></a>mcu_addr0xspec_reg_byte_read</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, i2c_comm.o(.text.mcu_addr0xspec_reg_byte_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mcu_addr0xspec_reg_byte_read &rArr; mcu_addr0xspec_1byte_reg_byte_read
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_addr0xspec_1byte_reg_byte_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.i2c_cmd_register_init)
</UL>
<P><STRONG><a name="[32]"></a>mcu_addr0xspec_reg_byte_write</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, i2c_comm.o(.text.mcu_addr0xspec_reg_byte_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mcu_addr0xspec_reg_byte_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.i2c_cmd_register_init)
</UL>
<P><STRONG><a name="[120]"></a>mcu_register_reg_addr_read_callback</STRONG> (Thumb, 136 bytes, Stack size 12 bytes, i2c_comm.o(.text.mcu_register_reg_addr_read_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mcu_register_reg_addr_read_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_cmd_register_init
</UL>

<P><STRONG><a name="[11f]"></a>mcu_register_reg_addr_write_callback</STRONG> (Thumb, 136 bytes, Stack size 12 bytes, i2c_comm.o(.text.mcu_register_reg_addr_write_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mcu_register_reg_addr_write_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_cmd_register_init
</UL>

<P><STRONG><a name="[140]"></a>nvic_irq_enable</STRONG> (Thumb, 298 bytes, Stack size 24 bytes, gd32e501_misc.o(.text.nvic_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nvic_irq_enable &rArr; nvic_priority_group_set
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_device_config
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_i2c_dev_config
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_i2c_dev_config
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm41282c_init
</UL>

<P><STRONG><a name="[152]"></a>nvic_priority_group_set</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, gd32e501_misc.o(.text.nvic_priority_group_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = nvic_priority_group_set
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>

<P><STRONG><a name="[7a]"></a>nvic_vector_table_set</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gd32e501_misc.o(.text.nvic_vector_table_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nvic_vector_table_set
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[3a]"></a>om_cmd_ddm_read_reg_byte</STRONG> (Thumb, 1034 bytes, Stack size 24 bytes, sff_8472.o(.text.om_cmd_ddm_read_reg_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = om_cmd_ddm_read_reg_byte &rArr; set_u16
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.i2c_cmd_register_init)
</UL>
<P><STRONG><a name="[153]"></a>om_crc32_reset</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sff_8472.o(.text.om_crc32_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = om_crc32_reset &rArr; crc_input_data_reverse_config
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_input_data_reverse_config
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_reverse_output_data_enable
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_polynomial_size_set
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_firmware_write_reg_byte
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_app_write_reg_byte
</UL>

<P><STRONG><a name="[135]"></a>om_default_config_flash_init</STRONG> (Thumb, 316 bytes, Stack size 16 bytes, sff_8472.o(.text.om_default_config_flash_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = om_default_config_flash_init &rArr; om_default_config_flash_read &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tec_set_ctrl_temperature_obj
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;om_default_config_flash_read
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ux3326_set_rx_los_hyst
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_set_rx_los_hyst
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_set_rx_los_hyst
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ux3326_set_rx_los_threshold
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_set_rx_los_threshold
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_set_rx_los_threshold
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ux3326_set_tx_ld_cpa
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_set_tx_ld_cpa
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_set_tx_ld_cpa
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_set_rx_drv_preemph
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_set_rx_drv_deemph
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_set_tx_ld_preemph
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_set_tx_ld_deemph
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ux3326_set_rx_swing
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_set_rx_swing
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_set_rx_swing
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_set_rx_eq_boost
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_set_rx_eq_boost
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ux3326_set_ld_imod
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_set_ld_imod
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_set_ld_imod
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ux3326_set_ld_ibias
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_set_ld_ibias
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_set_ld_ibias
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm2508_set_vea
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm41295_set_vea
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm41295_set_ld
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm41282c_set_apd
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[158]"></a>om_default_config_flash_read</STRONG> (Thumb, 2424 bytes, Stack size 112 bytes, sff_8472.o(.text.om_default_config_flash_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = om_default_config_flash_read &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;om_default_config_flash_init
</UL>

<P><STRONG><a name="[aa]"></a>om_erase_data_config_flash</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, sff_8472.o(.text.om_erase_data_config_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = om_erase_data_config_flash &rArr; fmc_erase_single_page &rArr; fmc_page_erase &rArr; fmc_bank1_ready_wait &rArr; fmc_bank1_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_erase_single_page
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_command_map_reg_write
</UL>

<P><STRONG><a name="[19e]"></a>om_flash_block_data_calculate_crc32</STRONG> (Thumb, 196 bytes, Stack size 36 bytes, sff_8472.o(.text.om_flash_block_data_calculate_crc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = om_flash_block_data_calculate_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_firmware_write_reg_byte
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_app_write_reg_byte
</UL>

<P><STRONG><a name="[34]"></a>om_flash_write_reg_byte</STRONG> (Thumb, 680 bytes, Stack size 56 bytes, sff_8472.o(.text.om_flash_write_reg_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = om_flash_write_reg_byte &rArr; flash_write &rArr; fmc_doubleword_program &rArr; fmc_bank1_ready_wait &rArr; fmc_bank1_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_erase_single_page
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.i2c_cmd_register_init)
</UL>
<P><STRONG><a name="[51]"></a>om_memory_state_ctrl_write_reg_byte</STRONG> (Thumb, 422 bytes, Stack size 32 bytes, sff_8472.o(.text.om_memory_state_ctrl_write_reg_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = om_memory_state_ctrl_write_reg_byte &rArr; sgm41295_ld_ctrl &rArr; master_reg_1byte_size_read &rArr; master_reg_byte_read &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ux3326_soft_txdsbl_ctrl
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_soft_txdsbl_ctrl
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm41295_ld_ctrl
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_soft_txdsbl_ctrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.i2c_cmd_register_init)
</UL>
<P><STRONG><a name="[a9]"></a>om_save_data_config_flash</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, sff_8472.o(.text.om_save_data_config_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = om_save_data_config_flash &rArr; flash_write &rArr; fmc_doubleword_program &rArr; fmc_bank1_ready_wait &rArr; fmc_bank1_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_erase_single_page
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_command_map_reg_write
</UL>

<P><STRONG><a name="[35]"></a>om_v2_flash_read_reg_byte</STRONG> (Thumb, 332 bytes, Stack size 40 bytes, sff_8472.o(.text.om_v2_flash_read_reg_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = om_v2_flash_read_reg_byte &rArr; flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.i2c_cmd_register_init)
</UL>
<P><STRONG><a name="[36]"></a>om_v2_memory_read_reg_byte</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, sff_8472.o(.text.om_v2_memory_read_reg_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = om_v2_memory_read_reg_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.i2c_cmd_register_init)
</UL>
<P><STRONG><a name="[164]"></a>rcu_adc_clock_config</STRONG> (Thumb, 428 bytes, Stack size 8 bytes, gd32e501_rcu.o(.text.rcu_adc_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rcu_adc_clock_config
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_config_init
</UL>

<P><STRONG><a name="[1a8]"></a>rcu_clock_freq_get</STRONG> (Thumb, 702 bytes, Stack size 112 bytes, gd32e501_rcu.o(.text.rcu_clock_freq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
</UL>

<P><STRONG><a name="[12e]"></a>rcu_config_init</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, mcu_config_public.o(.text.rcu_config_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rcu_config_init &rArr; rcu_adc_clock_config
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_adc_clock_config
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13a]"></a>rcu_i2c_clock_config</STRONG> (Thumb, 144 bytes, Stack size 12 bytes, gd32e501_rcu.o(.text.rcu_i2c_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rcu_i2c_clock_config
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_i2c_dev_config
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_i2c_dev_config
</UL>

<P><STRONG><a name="[163]"></a>rcu_periph_clock_enable</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, gd32e501_rcu.o(.text.rcu_periph_clock_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_device_config
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_config_init
</UL>

<P><STRONG><a name="[c4]"></a>rcu_periph_reset_disable</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, gd32e501_rcu.o(.text.rcu_periph_reset_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_deinit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscfg_deinit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
</UL>

<P><STRONG><a name="[c3]"></a>rcu_periph_reset_enable</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, gd32e501_rcu.o(.text.rcu_periph_reset_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rcu_periph_reset_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_deinit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscfg_deinit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
</UL>

<P><STRONG><a name="[165]"></a>read_update_flag</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, update_comm.o(.text.read_update_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = read_update_flag &rArr; flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upgrade_dev_version_reg_read
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_firmware_write_reg_byte
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_app_write_reg_byte
</UL>

<P><STRONG><a name="[166]"></a>reset_slave_i2c</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, i2c_opt_ie.o(.text.reset_slave_i2c))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = reset_slave_i2c &rArr; i2c_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_unlock
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_unlock
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_enable
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_event_irq_handler
</UL>

<P><STRONG><a name="[46]"></a>rx_deemph_i2c_reg_write</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, sff_8472.o(.text.rx_deemph_i2c_reg_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rx_deemph_i2c_reg_write &rArr; gn7161_set_rx_drv_deemph &rArr; master_reg_byte_write &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_set_rx_drv_preemph
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_set_rx_drv_deemph
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.i2c_cmd_register_init)
</UL>
<P><STRONG><a name="[48]"></a>rx_los_hyst_i2c_reg_write</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, sff_8472.o(.text.rx_los_hyst_i2c_reg_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rx_los_hyst_i2c_reg_write &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ux3326_set_rx_los_hyst
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_set_rx_los_hyst
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_set_rx_los_hyst
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.i2c_cmd_register_init)
</UL>
<P><STRONG><a name="[47]"></a>rx_los_threshold_i2c_reg_write</STRONG> (Thumb, 352 bytes, Stack size 24 bytes, sff_8472.o(.text.rx_los_threshold_i2c_reg_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rx_los_threshold_i2c_reg_write &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ux3326_set_rx_los_threshold
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_set_rx_los_threshold
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_set_rx_los_threshold
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.i2c_cmd_register_init)
</UL>
<P><STRONG><a name="[e9]"></a>search_bisection_temp_by_adc</STRONG> (Thumb, 432 bytes, Stack size 48 bytes, mcu_system_comm.o(.text.search_bisection_temp_by_adc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = search_bisection_temp_by_adc &rArr; adc_calc_temp_value
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_calc_temp_value
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_case_therm_temperature
</UL>

<P><STRONG><a name="[fe]"></a>set_u16</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mcu_system_comm.o(.text.set_u16))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_apc_target_voltage
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_apc_auto_enable_ctrl
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_set_rx_los_hyst
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_set_rx_los_threshold
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_set_tx_ld_cpa
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_set_rx_drv_deemph
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_set_tx_ld_deemph
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_set_rx_swing
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_set_rx_eq_boost
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_set_ld_imod
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_set_ld_ibias
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_set_ld_ibias
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;om_cmd_ddm_read_reg_byte
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_get_mpd_ibias
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_get_ld_ibias
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_get_voltage
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_soft_txdsbl_ctrl
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_2byte_size_read
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tec_i2c_vtec_ctl_reg_write
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_mpd_ibias_monitor_ctrl
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_ld_ibias_monitor_ctrl
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_voltage_monitor_ctrl
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_adc
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_tx_lane_ctrl
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_normal_setting
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_download_firmware
</UL>

<P><STRONG><a name="[18c]"></a>set_u32</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, mcu_system_comm.o(.text.set_u32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tec_xtec_value_reg_read
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tec_i2_ctl_temperature_reg_read
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tec_i2c_vtec_ctl_reg_read
</UL>

<P><STRONG><a name="[16a]"></a>sgm2508_gpio_init</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, sgm2508.o(.text.sgm2508_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = sgm2508_gpio_init &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm2508_init
</UL>

<P><STRONG><a name="[136]"></a>sgm2508_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sgm2508.o(.text.sgm2508_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = sgm2508_init &rArr; sgm2508_set_vea &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm2508_set_vea
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm2508_gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15c]"></a>sgm2508_set_vea</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, sgm2508.o(.text.sgm2508_set_vea))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sgm2508_set_vea &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_data_set
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;om_default_config_flash_init
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vea_i2c_vcc_reg_write
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm2508_init
</UL>

<P><STRONG><a name="[a3]"></a>sgm41282c_get_rssi_value</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, sgm41282c.o(.text.sgm41282c_get_rssi_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = sgm41282c_get_rssi_value &rArr; adc_channel_sample_average &rArr; fh_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_channel_sample_average
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_om_rx_power
</UL>

<P><STRONG><a name="[16b]"></a>sgm41282c_gpio_init</STRONG> (Thumb, 344 bytes, Stack size 72 bytes, sgm41282c.o(.text.sgm41282c_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = sgm41282c_gpio_init &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm41282c_init
</UL>

<P><STRONG><a name="[134]"></a>sgm41282c_init</STRONG> (Thumb, 208 bytes, Stack size 56 bytes, sgm41282c.o(.text.sgm41282c_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = sgm41282c_init &rArr; sgm41282c_set_apd &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm41282c_set_apd
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscfg_exti_line_config
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm41282c_gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a1]"></a>sgm41282c_set_apd</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, sgm41282c.o(.text.sgm41282c_set_apd))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sgm41282c_set_apd &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm41282c_set_apd_vcc
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;om_default_config_flash_init
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apd_i2c_vcc_reg_write
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm41282c_init
</UL>

<P><STRONG><a name="[16e]"></a>sgm41282c_set_apd_vcc</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, sgm41282c.o(.text.sgm41282c_set_apd_vcc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sgm41282c_set_apd_vcc &rArr; dac_data_set
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_data_set
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm41282c_set_apd
</UL>

<P><STRONG><a name="[72]"></a>sgm41282c_set_rssi_value</STRONG> (Thumb, 94 bytes, Stack size 4 bytes, sgm41282c.o(.text.sgm41282c_set_rssi_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = sgm41282c_set_rssi_value
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
</UL>

<P><STRONG><a name="[16f]"></a>sgm41295_gpio_init</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, sgm41295.o(.text.sgm41295_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = sgm41295_gpio_init &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm41295_init
</UL>

<P><STRONG><a name="[133]"></a>sgm41295_init</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, sgm41295.o(.text.sgm41295_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = sgm41295_init &rArr; sgm41295_ld_ctrl &rArr; master_reg_1byte_size_read &rArr; master_reg_byte_read &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm41295_set_vea
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm41295_set_ld
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm41295_ld_ctrl
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm41295_vea_ctrl
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm41295_gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[160]"></a>sgm41295_ld_ctrl</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, sgm41295.o(.text.sgm41295_ld_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = sgm41295_ld_ctrl &rArr; master_reg_1byte_size_read &rArr; master_reg_byte_read &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_1byte_size_read
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;om_memory_state_ctrl_write_reg_byte
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm41295_init
</UL>

<P><STRONG><a name="[159]"></a>sgm41295_set_ld</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, sgm41295.o(.text.sgm41295_set_ld))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = sgm41295_set_ld &rArr; sgm41295_set_ld_reg &rArr; master_reg_byte_write &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm41295_set_ld_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;om_default_config_flash_init
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soa_i2c_ild_reg_write
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm41295_init
</UL>

<P><STRONG><a name="[171]"></a>sgm41295_set_ld_reg</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sgm41295.o(.text.sgm41295_set_ld_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sgm41295_set_ld_reg &rArr; master_reg_byte_write &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm41295_set_ld
</UL>

<P><STRONG><a name="[15a]"></a>sgm41295_set_vea</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, sgm41295.o(.text.sgm41295_set_vea))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sgm41295_set_vea &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm41295_set_vea_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;om_default_config_flash_init
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vea_i2c_vcc_reg_write
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm41295_init
</UL>

<P><STRONG><a name="[172]"></a>sgm41295_set_vea_reg</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sgm41295.o(.text.sgm41295_set_vea_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sgm41295_set_vea_reg &rArr; master_reg_byte_write &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm41295_set_vea
</UL>

<P><STRONG><a name="[170]"></a>sgm41295_vea_ctrl</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, sgm41295.o(.text.sgm41295_vea_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = sgm41295_vea_ctrl &rArr; master_reg_1byte_size_read &rArr; master_reg_byte_read &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_1byte_size_read
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm41295_init
</UL>

<P><STRONG><a name="[75]"></a>slave_event_irq_handler</STRONG> (Thumb, 560 bytes, Stack size 32 bytes, i2c_opt_ie.o(.text.slave_event_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = slave_event_irq_handler &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_interrupt_disable
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_recevied_address_get
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_interrupt_enable
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_interrupt_flag_clear
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_flag_get
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_interrupt_flag_get
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_slave_i2c
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_unlock
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_lock
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_info_state_is_read
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_info_slave_address_add
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_buffer_info_clear
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_EV_IRQHandler
</UL>

<P><STRONG><a name="[123]"></a>slave_i2c_config_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, i2c_opt_ie.o(.text.slave_i2c_config_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = slave_i2c_config_init &rArr; slave_i2c_dev_config &rArr; nvic_irq_enable &rArr; nvic_priority_group_set
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_i2c_dev_config
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_config_init
</UL>

<P><STRONG><a name="[177]"></a>slave_i2c_dev_config</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, i2c_opt_ie.o(.text.slave_i2c_dev_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = slave_i2c_dev_config &rArr; nvic_irq_enable &rArr; nvic_priority_group_set
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_second_address_config
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_clock_config
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_timing_config
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_i2c_clock_config
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_interrupt_enable
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_buffer_info_clear
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_i2c_config_init
</UL>

<P><STRONG><a name="[12b]"></a>slave_i2c_middle_handle</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, i2c_opt_ie.o(.text.slave_i2c_middle_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = slave_i2c_middle_handle &rArr; slave_i2c_read_handle &rArr; slave_v2_reg_byte_read &rArr; master_reg_byte_read &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_i2c_write_handle
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_i2c_read_handle
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_i2c_receive_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_read_write_handle
</UL>

<P><STRONG><a name="[179]"></a>slave_i2c_read_handle</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, i2c_opt_ie.o(.text.slave_i2c_read_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = slave_i2c_read_handle &rArr; slave_v2_reg_byte_read &rArr; master_reg_byte_read &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_data_transmit
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_v2_reg_byte_read
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_interrupt_enable
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_info_set_state_read_flag
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_info_state_is_read
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_info_popup_data_from_buffer
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_info_get_buff_info
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_buffer_mng_regaddress_info
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_i2c_middle_handle
</UL>

<P><STRONG><a name="[17a]"></a>slave_i2c_receive_handle</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, i2c_opt_ie.o(.text.slave_i2c_receive_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = slave_i2c_receive_handle &rArr; i2c_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_data_receive
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_interrupt_enable
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_get_write_lock
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_info_get_buff_info
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_buffer_info_data_add
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_i2c_middle_handle
</UL>

<P><STRONG><a name="[17b]"></a>slave_i2c_write_handle</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, i2c_opt_ie.o(.text.slave_i2c_write_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = slave_i2c_write_handle &rArr; slave_reg_byte_write &rArr; master_reg_byte_write &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_reg_byte_write
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_get_write_lock
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_unlock
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_info_get_buff_info
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_i2c_middle_handle
</UL>

<P><STRONG><a name="[182]"></a>slave_reg_byte_write</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, i2c_opt_ie.o(.text.slave_reg_byte_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = slave_reg_byte_write &rArr; master_reg_byte_write &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_buffer_info_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_i2c_write_handle
</UL>

<P><STRONG><a name="[17e]"></a>slave_v2_reg_byte_read</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, i2c_opt_ie.o(.text.slave_v2_reg_byte_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = slave_v2_reg_byte_read &rArr; master_reg_byte_read &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_read
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_i2c_read_handle
</UL>

<P><STRONG><a name="[3e]"></a>soa_i2c_ild_reg_write</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, sff_8472.o(.text.soa_i2c_ild_reg_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = soa_i2c_ild_reg_write &rArr; sgm41295_set_ld &rArr; sgm41295_set_ld_reg &rArr; master_reg_byte_write &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm41295_set_ld
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.i2c_cmd_register_init)
</UL>
<P><STRONG><a name="[42]"></a>swing_i2c_reg_write</STRONG> (Thumb, 408 bytes, Stack size 32 bytes, sff_8472.o(.text.swing_i2c_reg_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = swing_i2c_reg_write &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ux3326_set_rx_swing
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_set_rx_swing
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_set_rx_swing
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.i2c_cmd_register_init)
</UL>
<P><STRONG><a name="[130]"></a>syscfg_config</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mcu_config_public.o(.text.syscfg_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = syscfg_config &rArr; syscfg_deinit &rArr; rcu_periph_reset_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscfg_vref_enable
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscfg_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[183]"></a>syscfg_deinit</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gd32e501_syscfg.o(.text.syscfg_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = syscfg_deinit &rArr; rcu_periph_reset_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscfg_config
</UL>

<P><STRONG><a name="[16c]"></a>syscfg_exti_line_config</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, gd32e501_syscfg.o(.text.syscfg_exti_line_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = syscfg_exti_line_config
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm41282c_init
</UL>

<P><STRONG><a name="[184]"></a>syscfg_vref_enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32e501_syscfg.o(.text.syscfg_vref_enable))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscfg_config
</UL>

<P><STRONG><a name="[94]"></a>system_delay_ms</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, mcu_system_comm.o(.text.system_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = system_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_module_config_init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ux3326_reset
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_reset
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_reset
</UL>

<P><STRONG><a name="[12f]"></a>systick_config</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, systick.o(.text.systick_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = systick_config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[186]"></a>tec_calc_auto_rth_temp</STRONG> (Thumb, 812 bytes, Stack size 72 bytes, tec_comm.o(.text.tec_calc_auto_rth_temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = tec_calc_auto_rth_temp &rArr; tec_get_therm_temperature &rArr; find_adc_temp &rArr; calc_temp_value
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tec_set_ctl_voltage
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tec_get_therm_temperature
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tec_pid_calc_auto
</UL>

<P><STRONG><a name="[132]"></a>tec_config_init</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, tec_comm.o(.text.tec_config_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tec_config_init &rArr; tec_set_ctl_voltage &rArr; dac_vtec_ctl_set &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tec_gpio_init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tec_set_ctl_voltage
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[187]"></a>tec_get_therm_temperature</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, tec_comm.o(.text.tec_get_therm_temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = tec_get_therm_temperature &rArr; find_adc_temp &rArr; calc_temp_value
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_channel_sample_average
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_adc_temp
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tec_calc_auto_rth_temp
</UL>

<P><STRONG><a name="[18b]"></a>tec_get_xtec_voltage</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, tec_comm.o(.text.tec_get_xtec_voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = tec_get_xtec_voltage &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_channel_sample_average
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tec_xtec_value_reg_read
</UL>

<P><STRONG><a name="[18a]"></a>tec_gpio_init</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, tec_comm.o(.text.tec_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = tec_gpio_init &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tec_config_init
</UL>

<P><STRONG><a name="[49]"></a>tec_i2_ctl_temperature_reg_read</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, tec_comm.o(.text.tec_i2_ctl_temperature_reg_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = tec_i2_ctl_temperature_reg_read &rArr; find_adc_temp &rArr; calc_temp_value
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_channel_sample_average
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_adc_temp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.i2c_cmd_register_init)
</UL>
<P><STRONG><a name="[4e]"></a>tec_i2c_auto_ctl_reg_write</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, tec_comm.o(.text.tec_i2c_auto_ctl_reg_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tec_i2c_auto_ctl_reg_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.i2c_cmd_register_init)
</UL>
<P><STRONG><a name="[4c]"></a>tec_i2c_calc_ctl_auto_reg_write</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, tec_comm.o(.text.tec_i2c_calc_ctl_auto_reg_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = tec_i2c_calc_ctl_auto_reg_write &rArr; tec_set_ctl_voltage &rArr; dac_vtec_ctl_set &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tec_set_ctl_voltage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.i2c_cmd_register_init)
</UL>
<P><STRONG><a name="[4f]"></a>tec_i2c_temperature_obj_write</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, tec_comm.o(.text.tec_i2c_temperature_obj_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tec_i2c_temperature_obj_write &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tec_save_ctl_temperature_value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.i2c_cmd_register_init)
</UL>
<P><STRONG><a name="[4b]"></a>tec_i2c_vtec_ctl_reg_read</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, tec_comm.o(.text.tec_i2c_vtec_ctl_reg_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tec_i2c_vtec_ctl_reg_read &rArr; set_u32
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.i2c_cmd_register_init)
</UL>
<P><STRONG><a name="[4a]"></a>tec_i2c_vtec_ctl_reg_write</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, tec_comm.o(.text.tec_i2c_vtec_ctl_reg_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = tec_i2c_vtec_ctl_reg_write &rArr; tec_set_ctl_voltage &rArr; dac_vtec_ctl_set &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tec_set_ctl_voltage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.i2c_cmd_register_init)
</UL>
<P><STRONG><a name="[18f]"></a>tec_pid_calc_auto</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tec_comm.o(.text.tec_pid_calc_auto))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = tec_pid_calc_auto &rArr; tec_calc_auto_rth_temp &rArr; tec_get_therm_temperature &rArr; find_adc_temp &rArr; calc_temp_value
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tec_calc_auto_rth_temp
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tec_release_limit_refresh
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tec_process
</UL>

<P><STRONG><a name="[138]"></a>tec_process</STRONG> (Thumb, 392 bytes, Stack size 32 bytes, tec_comm.o(.text.tec_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = tec_process &rArr; tec_pid_calc_auto &rArr; tec_calc_auto_rth_temp &rArr; tec_get_therm_temperature &rArr; find_adc_temp &rArr; calc_temp_value
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tec_pid_calc_auto
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tec_set_ctl_voltage
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[190]"></a>tec_release_limit_refresh</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, tec_comm.o(.text.tec_release_limit_refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = tec_release_limit_refresh &rArr; master_reg_1byte_size_read &rArr; master_reg_byte_read &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_1byte_size_read
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tec_pid_calc_auto
</UL>

<P><STRONG><a name="[18e]"></a>tec_save_ctl_temperature_value</STRONG> (Thumb, 94 bytes, Stack size 4 bytes, tec_comm.o(.text.tec_save_ctl_temperature_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = tec_save_ctl_temperature_value
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tec_i2c_temperature_obj_write
</UL>

<P><STRONG><a name="[189]"></a>tec_set_ctl_voltage</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, tec_comm.o(.text.tec_set_ctl_voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tec_set_ctl_voltage &rArr; dac_vtec_ctl_set &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_vtec_ctl_set
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tec_set_default_mini_status
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tec_process
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tec_config_init
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tec_i2c_calc_ctl_auto_reg_write
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tec_i2c_vtec_ctl_reg_write
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tec_calc_auto_rth_temp
</UL>

<P><STRONG><a name="[15b]"></a>tec_set_ctrl_temperature_obj</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, tec_comm.o(.text.tec_set_ctrl_temperature_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tec_set_ctrl_temperature_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;om_default_config_flash_init
</UL>

<P><STRONG><a name="[191]"></a>tec_set_default_mini_status</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, tec_comm.o(.text.tec_set_default_mini_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tec_set_default_mini_status &rArr; tec_set_ctl_voltage &rArr; dac_vtec_ctl_set &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tec_set_ctl_voltage
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_firmware_write_reg_byte
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_app_write_reg_byte
</UL>

<P><STRONG><a name="[4d]"></a>tec_xtec_value_reg_read</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, tec_comm.o(.text.tec_xtec_value_reg_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = tec_xtec_value_reg_read &rArr; tec_get_xtec_voltage &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tec_get_xtec_voltage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.i2c_cmd_register_init)
</UL>
<P><STRONG><a name="[52]"></a>test_dac_value_write_reg</STRONG> (Thumb, 266 bytes, Stack size 40 bytes, update_comm.o(.text.test_dac_value_write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = test_dac_value_write_reg &rArr; dac_data_set
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_data_set
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.i2c_cmd_register_init)
</UL>
<P><STRONG><a name="[192]"></a>test_get_gpio_periph</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, update_comm.o(.text.test_get_gpio_periph))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = test_get_gpio_periph
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_gpio_info_read_reg
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_gpio_value_write_reg
</UL>

<P><STRONG><a name="[193]"></a>test_get_gpio_pin</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, update_comm.o(.text.test_get_gpio_pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = test_get_gpio_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_gpio_info_read_reg
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_gpio_value_write_reg
</UL>

<P><STRONG><a name="[55]"></a>test_gpio_info_read_reg</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, update_comm.o(.text.test_gpio_info_read_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = test_gpio_info_read_reg &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_bit_get
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_get_gpio_pin
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_get_gpio_periph
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.i2c_cmd_register_init)
</UL>
<P><STRONG><a name="[54]"></a>test_gpio_info_write_reg</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, update_comm.o(.text.test_gpio_info_write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = test_gpio_info_write_reg &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.i2c_cmd_register_init)
</UL>
<P><STRONG><a name="[53]"></a>test_gpio_value_write_reg</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, update_comm.o(.text.test_gpio_value_write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = test_gpio_value_write_reg &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_get_gpio_pin
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_get_gpio_periph
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.i2c_cmd_register_init)
</UL>
<P><STRONG><a name="[195]"></a>timer_deinit</STRONG> (Thumb, 314 bytes, Stack size 56 bytes, gd32e501_timer.o(.text.timer_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = timer_deinit &rArr; rcu_periph_reset_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_device_config
</UL>

<P><STRONG><a name="[196]"></a>timer_device_config</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, timer_comm.o(.text.timer_device_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = timer_device_config &rArr; timer_deinit &rArr; rcu_periph_reset_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_enable
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_struct_para_init
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_process_init
</UL>

<P><STRONG><a name="[19a]"></a>timer_enable</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, gd32e501_timer.o(.text.timer_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = timer_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_device_config
</UL>

<P><STRONG><a name="[198]"></a>timer_init</STRONG> (Thumb, 318 bytes, Stack size 8 bytes, gd32e501_timer.o(.text.timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_device_config
</UL>

<P><STRONG><a name="[199]"></a>timer_interrupt_enable</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gd32e501_timer.o(.text.timer_interrupt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_device_config
</UL>

<P><STRONG><a name="[7c]"></a>timer_interrupt_flag_clear</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gd32e501_timer.o(.text.timer_interrupt_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_interrupt_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_device_config
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER13_IRQHandler
</UL>

<P><STRONG><a name="[7b]"></a>timer_interrupt_flag_get</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, gd32e501_timer.o(.text.timer_interrupt_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_interrupt_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER13_IRQHandler
</UL>

<P><STRONG><a name="[131]"></a>timer_process_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, timer_comm.o(.text.timer_process_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = timer_process_init &rArr; timer_device_config &rArr; timer_deinit &rArr; rcu_periph_reset_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_device_config
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[197]"></a>timer_struct_para_init</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, gd32e501_timer.o(.text.timer_struct_para_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = timer_struct_para_init
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_device_config
</UL>

<P><STRONG><a name="[45]"></a>tx_deemph_i2c_reg_write</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, sff_8472.o(.text.tx_deemph_i2c_reg_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = tx_deemph_i2c_reg_write &rArr; gn7161_set_tx_ld_deemph &rArr; master_reg_byte_write &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_set_tx_ld_preemph
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_set_tx_ld_deemph
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.i2c_cmd_register_init)
</UL>
<P><STRONG><a name="[be]"></a>upate_mem_is_alloc</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, update_comm.o(.text.upate_mem_is_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = upate_mem_is_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_update_write_to_flash
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_firmware_write_reg_byte
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_app_write_reg_byte
</UL>

<P><STRONG><a name="[37]"></a>update_app_write_reg_byte</STRONG> (Thumb, 570 bytes, Stack size 72 bytes, update_comm.o(.text.update_app_write_reg_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = update_app_write_reg_byte &rArr; comm_update_write_mem_one_page_to_flash &rArr; comm_update_flash_finish_one_page &rArr; flash_write &rArr; fmc_doubleword_program &rArr; fmc_bank1_ready_wait &rArr; fmc_bank1_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;om_flash_block_data_calculate_crc32
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;om_crc32_reset
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_update_flag
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_update_write_to_flash
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_update_write_mem_one_page_to_flash
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_update_flag
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_mem_all_memset
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upate_mem_is_alloc
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_mem_malloc
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tec_set_default_mini_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.i2c_cmd_register_init)
</UL>
<P><STRONG><a name="[38]"></a>update_firmware_write_reg_byte</STRONG> (Thumb, 440 bytes, Stack size 40 bytes, update_comm.o(.text.update_firmware_write_reg_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = update_firmware_write_reg_byte &rArr; comm_update_write_mem_one_page_to_flash &rArr; comm_update_flash_finish_one_page &rArr; flash_write &rArr; fmc_doubleword_program &rArr; fmc_bank1_ready_wait &rArr; fmc_bank1_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;om_flash_block_data_calculate_crc32
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;om_crc32_reset
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_update_write_to_flash
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_update_write_mem_one_page_to_flash
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_update_flag
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_mem_all_memset
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upate_mem_is_alloc
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_mem_malloc
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tec_set_default_mini_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.i2c_cmd_register_init)
</UL>
<P><STRONG><a name="[19c]"></a>update_mem_all_memset</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, update_comm.o(.text.update_mem_all_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = update_mem_all_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_firmware_write_reg_byte
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_app_write_reg_byte
</UL>

<P><STRONG><a name="[19b]"></a>update_mem_malloc</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, update_comm.o(.text.update_mem_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = update_mem_malloc &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_firmware_write_reg_byte
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_app_write_reg_byte
</UL>

<P><STRONG><a name="[1a0]"></a>update_om_bias</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, sff_8472.o(.text.update_om_bias))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = update_om_bias &rArr; gn7161_get_ld_ibias &rArr; master_reg_2byte_size_read &rArr; master_reg_byte_read &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ux3326_get_ld_ibias
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_get_ld_ibias
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_get_ld_ibias
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_om_diagnose
</UL>

<P><STRONG><a name="[d2]"></a>update_om_diagnose</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sff_8472.o(.text.update_om_diagnose))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = update_om_diagnose &rArr; update_om_tx_power &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_om_rx_power
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_om_tx_power
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_om_bias
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_om_voltage
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_om_temperature
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddm_process
</UL>

<P><STRONG><a name="[1a5]"></a>update_om_rx_power</STRONG> (Thumb, 380 bytes, Stack size 48 bytes, sff_8472.o(.text.update_om_rx_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = update_om_rx_power &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_om_rx_power
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_om_diagnose
</UL>

<P><STRONG><a name="[1a2]"></a>update_om_temperature</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, sff_8472.o(.text.update_om_temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = update_om_temperature &rArr; get_case_therm_temperature &rArr; search_bisection_temp_by_adc &rArr; adc_calc_temp_value
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_case_therm_temperature
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_om_diagnose
</UL>

<P><STRONG><a name="[1a4]"></a>update_om_tx_power</STRONG> (Thumb, 436 bytes, Stack size 56 bytes, sff_8472.o(.text.update_om_tx_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = update_om_tx_power &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_om_tx_power
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_om_diagnose
</UL>

<P><STRONG><a name="[1a3]"></a>update_om_voltage</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, sff_8472.o(.text.update_om_voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = update_om_voltage &rArr; gn7161_get_voltage &rArr; master_reg_2byte_size_read &rArr; master_reg_byte_read &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ux3326_get_voltage
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7153_get_voltage
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_get_voltage
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_om_diagnose
</UL>

<P><STRONG><a name="[d3]"></a>update_om_warning</STRONG> (Thumb, 3988 bytes, Stack size 188 bytes, sff_8472.o(.text.update_om_warning))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = update_om_warning
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddm_process
</UL>

<P><STRONG><a name="[39]"></a>upgrade_dev_version_reg_read</STRONG> (Thumb, 186 bytes, Stack size 88 bytes, update_comm.o(.text.upgrade_dev_version_reg_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = upgrade_dev_version_reg_read &rArr; read_update_flag &rArr; flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_update_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.i2c_cmd_register_init)
</UL>
<P><STRONG><a name="[b3]"></a>usart_baudrate_set</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, gd32e501_usart.o(.text.usart_baudrate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_usart_init
</UL>

<P><STRONG><a name="[7e]"></a>usart_data_receive</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, gd32e501_usart.o(.text.usart_data_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = usart_data_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[80]"></a>usart_data_transmit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gd32e501_usart.o(.text.usart_data_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_data_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[af]"></a>usart_deinit</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, gd32e501_usart.o(.text.usart_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = usart_deinit &rArr; rcu_periph_reset_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_usart_init
</UL>

<P><STRONG><a name="[b6]"></a>usart_enable</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, gd32e501_usart.o(.text.usart_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = usart_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_usart_init
</UL>

<P><STRONG><a name="[e3]"></a>usart_flag_get</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, gd32e501_usart.o(.text.usart_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usart_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[7f]"></a>usart_interrupt_disable</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gd32e501_usart.o(.text.usart_interrupt_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[b7]"></a>usart_interrupt_enable</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gd32e501_usart.o(.text.usart_interrupt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_usart_init
</UL>

<P><STRONG><a name="[7d]"></a>usart_interrupt_flag_get</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, gd32e501_usart.o(.text.usart_interrupt_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = usart_interrupt_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[b2]"></a>usart_parity_config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gd32e501_usart.o(.text.usart_parity_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_parity_config
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_usart_init
</UL>

<P><STRONG><a name="[b4]"></a>usart_receive_config</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gd32e501_usart.o(.text.usart_receive_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_receive_config
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_usart_init
</UL>

<P><STRONG><a name="[b1]"></a>usart_stop_bit_set</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gd32e501_usart.o(.text.usart_stop_bit_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_stop_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_usart_init
</UL>

<P><STRONG><a name="[b5]"></a>usart_transmit_config</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gd32e501_usart.o(.text.usart_transmit_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_transmit_config
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_usart_init
</UL>

<P><STRONG><a name="[b0]"></a>usart_word_length_set</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gd32e501_usart.o(.text.usart_word_length_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_word_length_set
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_usart_init
</UL>

<P><STRONG><a name="[3b]"></a>user_check_password_write_reg</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, i2c_opt_ie.o(.text.user_check_password_write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = user_check_password_write_reg &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.i2c_cmd_register_init)
</UL>
<P><STRONG><a name="[122]"></a>user_optical_pwd_limit_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, i2c_opt_ie.o(.text.user_optical_pwd_limit_init))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_config_init
</UL>

<P><STRONG><a name="[1a1]"></a>ux3326_get_ld_ibias</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, ux3326.o(.text.ux3326_get_ld_ibias))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ux3326_get_ld_ibias &rArr; master_reg_1byte_size_read &rArr; master_reg_byte_read &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_1byte_size_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_om_bias
</UL>

<P><STRONG><a name="[a7]"></a>ux3326_get_mpd_ibias</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ux3326.o(.text.ux3326_get_mpd_ibias))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ux3326_get_mpd_ibias &rArr; master_reg_1byte_size_read &rArr; master_reg_byte_read &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_1byte_size_read
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_om_tx_power
</UL>

<P><STRONG><a name="[1a7]"></a>ux3326_get_voltage</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, ux3326.o(.text.ux3326_get_voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ux3326_get_voltage &rArr; master_reg_1byte_size_read &rArr; master_reg_byte_read &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_1byte_size_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_om_voltage
</UL>

<P><STRONG><a name="[1ab]"></a>ux3326_gpio_init</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, ux3326.o(.text.ux3326_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ux3326_gpio_init &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ux3326_init
</UL>

<P><STRONG><a name="[137]"></a>ux3326_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ux3326.o(.text.ux3326_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ux3326_init &rArr; ux3326_normal_setting &rArr; master_reg_byte_write &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ux3326_normal_setting
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ux3326_reset
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ux3326_gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ad]"></a>ux3326_normal_setting</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ux3326.o(.text.ux3326_normal_setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ux3326_normal_setting &rArr; master_reg_byte_write &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ux3326_init
</UL>

<P><STRONG><a name="[1ac]"></a>ux3326_reset</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ux3326.o(.text.ux3326_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ux3326_reset &rArr; system_delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_ms
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ux3326_init
</UL>

<P><STRONG><a name="[12c]"></a>ux3326_set_ld_ibias</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, ux3326.o(.text.ux3326_set_ld_ibias))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ux3326_set_ld_ibias &rArr; master_reg_byte_write &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;om_default_config_flash_init
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ibias_i2c_reg_write
</UL>

<P><STRONG><a name="[12d]"></a>ux3326_set_ld_imod</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, ux3326.o(.text.ux3326_set_ld_imod))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ux3326_set_ld_imod &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;om_default_config_flash_init
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imod_i2c_reg_write
</UL>

<P><STRONG><a name="[15f]"></a>ux3326_set_rx_los_hyst</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ux3326.o(.text.ux3326_set_rx_los_hyst))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ux3326_set_rx_los_hyst &rArr; master_reg_byte_write &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;om_default_config_flash_init
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_los_hyst_i2c_reg_write
</UL>

<P><STRONG><a name="[15e]"></a>ux3326_set_rx_los_threshold</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ux3326.o(.text.ux3326_set_rx_los_threshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ux3326_set_rx_los_threshold &rArr; master_reg_byte_write &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;om_default_config_flash_init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_los_threshold_i2c_reg_write
</UL>

<P><STRONG><a name="[15d]"></a>ux3326_set_rx_swing</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ux3326.o(.text.ux3326_set_rx_swing))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ux3326_set_rx_swing &rArr; master_reg_byte_write &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;om_default_config_flash_init
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_i2c_reg_write
</UL>

<P><STRONG><a name="[c1]"></a>ux3326_set_tx_ld_cpa</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ux3326.o(.text.ux3326_set_tx_ld_cpa))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ux3326_set_tx_ld_cpa &rArr; master_reg_byte_write &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;om_default_config_flash_init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpa_i2c_reg_write
</UL>

<P><STRONG><a name="[161]"></a>ux3326_soft_txdsbl_ctrl</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ux3326.o(.text.ux3326_soft_txdsbl_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ux3326_soft_txdsbl_ctrl &rArr; master_reg_byte_write &rArr; get_master_i2c_by_dev_address
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_reg_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;om_memory_state_ctrl_write_reg_byte
</UL>

<P><STRONG><a name="[3f]"></a>vea_i2c_vcc_reg_write</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, sff_8472.o(.text.vea_i2c_vcc_reg_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = vea_i2c_vcc_reg_write &rArr; sgm2508_set_vea &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm2508_set_vea
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm41295_set_vea
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.i2c_cmd_register_init)
</UL>
<P><STRONG><a name="[19d]"></a>write_update_flag</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, update_comm.o(.text.write_update_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = write_update_flag &rArr; flash_write &rArr; fmc_doubleword_program &rArr; fmc_bank1_ready_wait &rArr; fmc_bank1_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_erase_single_page
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_app_write_reg_byte
</UL>

<P><STRONG><a name="[1ae]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1d9]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1da]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1db]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[70]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = printf
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_los_hyst_i2c_reg_write
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_los_threshold_i2c_reg_write
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpa_i2c_reg_write
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_deemph_i2c_reg_write
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_deemph_i2c_reg_write
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_i2c_reg_write
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eq_i2c_reg_write
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imod_i2c_reg_write
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ibias_i2c_reg_write
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vea_i2c_vcc_reg_write
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soa_i2c_ild_reg_write
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apd_i2c_vcc_reg_write
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgm41282c_get_rssi_value
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_get_mpd_ibias
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_get_ld_ibias
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn7161_get_voltage
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_event_irq_handler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_update_flash_finish_one_page
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_update_write_to_flash
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_mem_malloc
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_gpio_info_read_reg
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_gpio_info_write_reg
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dac_value_write_reg
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_app_write_reg_byte
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tec_process
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tec_i2c_temperature_obj_write
</UL>

<P><STRONG><a name="[1bf]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1b0]"></a>__hardfp_log</STRONG> (Thumb, 872 bytes, Stack size 88 bytes, log.o(i.__hardfp_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[a8]"></a>__hardfp_log10</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, log10.o(i.__hardfp_log10))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = __hardfp_log10 &rArr; log &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_om_tx_power
</UL>

<P><STRONG><a name="[1a6]"></a>__hardfp_pow</STRONG> (Thumb, 3088 bytes, Stack size 184 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_om_rx_power
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_om_tx_power
</UL>

<P><STRONG><a name="[1b6]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1b4]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
</UL>

<P><STRONG><a name="[1b1]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
</UL>

<P><STRONG><a name="[1b8]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1b3]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
</UL>

<P><STRONG><a name="[1b9]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_overflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1bc]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1dc]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1dd]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1de]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1b2]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
</UL>

<P><STRONG><a name="[1bb]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1b7]"></a>log</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, log.o(i.log))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = log &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
</UL>

<P><STRONG><a name="[19f]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_mem_malloc
</UL>

<P><STRONG><a name="[1ba]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[76]"></a>SysTick_Config</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, systick.o(.text.SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
</UL>

<P><STRONG><a name="[77]"></a>__NVIC_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, systick.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>

<P><STRONG><a name="[79]"></a>system_clock_config</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_gd32e501.o(.text.system_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = system_clock_config &rArr; system_clock_100m_irc8m
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_100m_irc8m
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[185]"></a>system_clock_100m_irc8m</STRONG> (Thumb, 256 bytes, Stack size 16 bytes, system_gd32e501.o(.text.system_clock_100m_irc8m))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = system_clock_100m_irc8m
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[1c0]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1af]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[1c2]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1c1]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
