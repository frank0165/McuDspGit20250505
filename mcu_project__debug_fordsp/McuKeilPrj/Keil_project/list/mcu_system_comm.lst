	.text
	.syntax unified
	.eabi_attribute	67, "2.09"	@ Tag_conformance
	.cpu	cortex-m33
	.eabi_attribute	6, 17	@ Tag_CPU_arch
	.eabi_attribute	7, 77	@ Tag_CPU_arch_profile
	.eabi_attribute	8, 0	@ Tag_ARM_ISA_use
	.eabi_attribute	9, 3	@ Tag_THUMB_ISA_use
	.fpu	fpv5-sp-d16
	.eabi_attribute	27, 1	@ Tag_ABI_HardFP_use
	.eabi_attribute	36, 1	@ Tag_FP_HP_extension
	.eabi_attribute	34, 1	@ Tag_CPU_unaligned_access
	.eabi_attribute	17, 1	@ Tag_ABI_PCS_GOT_use
	.eabi_attribute	20, 2	@ Tag_ABI_FP_denormal
	.eabi_attribute	21, 0	@ Tag_ABI_FP_exceptions
	.eabi_attribute	23, 1	@ Tag_ABI_FP_number_model
	.eabi_attribute	24, 1	@ Tag_ABI_align_needed
	.eabi_attribute	25, 1	@ Tag_ABI_align_preserved
	.eabi_attribute	28, 1	@ Tag_ABI_VFP_args
	.eabi_attribute	38, 1	@ Tag_ABI_FP_16bit_format
	.eabi_attribute	18, 2	@ Tag_ABI_PCS_wchar_t
	.eabi_attribute	26, 1	@ Tag_ABI_enum_size
	.eabi_attribute	14, 0	@ Tag_ABI_PCS_R9_use
	.file	"mcu_system_comm.c"
	.section	.text.fh_delay_ms,"ax",%progbits
	.hidden	fh_delay_ms                     @ -- Begin function fh_delay_ms
	.globl	fh_delay_ms
	.p2align	2
	.type	fh_delay_ms,%function
	.code	16                              @ @fh_delay_ms
	.thumb_func
fh_delay_ms:
	.fnstart
	.cfi_sections .debug_frame
	.cfi_startproc
@ %bb.0:
	.pad	#16
	sub	sp, #16
	.cfi_def_cfa_offset 16
	str	r0, [sp, #12]
	movs	r0, #0
	str	r0, [sp, #8]
	str	r0, [sp, #4]
	ldr	r1, [sp, #12]
	movs	r2, #110
	mul	r1, r1, r2
	str	r1, [sp]
	str	r0, [sp, #8]
	b	.LBB0_1
.LBB0_1:                                @ =>This Loop Header: Depth=1
                                        @     Child Loop BB0_3 Depth 2
	ldr	r0, [sp, #8]
	ldr	r1, [sp]
	cmp	r0, r1
	bhs	.LBB0_8
	b	.LBB0_2
.LBB0_2:                                @   in Loop: Header=BB0_1 Depth=1
	movs	r0, #0
	str	r0, [sp, #4]
	b	.LBB0_3
.LBB0_3:                                @   Parent Loop BB0_1 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [sp, #4]
	cmp	r0, #71
	bhi	.LBB0_6
	b	.LBB0_4
.LBB0_4:                                @   in Loop: Header=BB0_3 Depth=2
	b	.LBB0_5
.LBB0_5:                                @   in Loop: Header=BB0_3 Depth=2
	ldr	r0, [sp, #4]
	adds	r0, #1
	str	r0, [sp, #4]
	b	.LBB0_3
.LBB0_6:                                @   in Loop: Header=BB0_1 Depth=1
	b	.LBB0_7
.LBB0_7:                                @   in Loop: Header=BB0_1 Depth=1
	ldr	r0, [sp, #8]
	adds	r0, #1
	str	r0, [sp, #8]
	b	.LBB0_1
.LBB0_8:
	add	sp, #16
	bx	lr
.Lfunc_end0:
	.size	fh_delay_ms, .Lfunc_end0-fh_delay_ms
	.cfi_endproc
	.cantunwind
	.fnend
                                        @ -- End function
	.section	.text.fh_delay_us,"ax",%progbits
	.hidden	fh_delay_us                     @ -- Begin function fh_delay_us
	.globl	fh_delay_us
	.p2align	2
	.type	fh_delay_us,%function
	.code	16                              @ @fh_delay_us
	.thumb_func
fh_delay_us:
	.fnstart
	.cfi_startproc
@ %bb.0:
	.pad	#12
	sub	sp, #12
	.cfi_def_cfa_offset 12
	str	r0, [sp, #8]
	movs	r0, #0
	str	r0, [sp, #4]
	str	r0, [sp]
	str	r0, [sp, #4]
	b	.LBB1_1
.LBB1_1:                                @ =>This Loop Header: Depth=1
                                        @     Child Loop BB1_3 Depth 2
	ldr	r0, [sp, #4]
	ldr	r1, [sp, #8]
	cmp	r0, r1
	bhs	.LBB1_8
	b	.LBB1_2
.LBB1_2:                                @   in Loop: Header=BB1_1 Depth=1
	movs	r0, #0
	str	r0, [sp]
	b	.LBB1_3
.LBB1_3:                                @   Parent Loop BB1_1 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [sp]
	cmp	r0, #6
	bhi	.LBB1_6
	b	.LBB1_4
.LBB1_4:                                @   in Loop: Header=BB1_3 Depth=2
	b	.LBB1_5
.LBB1_5:                                @   in Loop: Header=BB1_3 Depth=2
	ldr	r0, [sp]
	adds	r0, #1
	str	r0, [sp]
	b	.LBB1_3
.LBB1_6:                                @   in Loop: Header=BB1_1 Depth=1
	b	.LBB1_7
.LBB1_7:                                @   in Loop: Header=BB1_1 Depth=1
	ldr	r0, [sp, #4]
	adds	r0, #1
	str	r0, [sp, #4]
	b	.LBB1_1
.LBB1_8:
	add	sp, #12
	bx	lr
.Lfunc_end1:
	.size	fh_delay_us, .Lfunc_end1-fh_delay_us
	.cfi_endproc
	.cantunwind
	.fnend
                                        @ -- End function
	.section	.text.system_delay_ms,"ax",%progbits
	.hidden	system_delay_ms                 @ -- Begin function system_delay_ms
	.globl	system_delay_ms
	.p2align	2
	.type	system_delay_ms,%function
	.code	16                              @ @system_delay_ms
	.thumb_func
system_delay_ms:
	.fnstart
	.cfi_startproc
@ %bb.0:
	.pad	#12
	sub	sp, #12
	.cfi_def_cfa_offset 12
	str	r0, [sp, #8]
	movw	r0, :lower16:g_mcu_vars_param
	movt	r0, :upper16:g_mcu_vars_param
	ldr	r0, [r0, #12]
	ldr	r1, [sp, #8]
	add	r0, r1
	str	r0, [sp, #4]
	mov.w	r0, #-1
	str	r0, [sp]
	ldr	r0, [sp, #4]
	ldr	r1, [sp]
	cmp	r0, r1
	beq	.LBB2_2
	b	.LBB2_1
.LBB2_1:
	ldr	r0, [sp, #4]
	cbnz	r0, .LBB2_3
	b	.LBB2_2
.LBB2_2:
	b	.LBB2_7
.LBB2_3:
	b	.LBB2_4
.LBB2_4:                                @ =>This Inner Loop Header: Depth=1
	movw	r0, :lower16:g_mcu_vars_param
	movt	r0, :upper16:g_mcu_vars_param
	ldr	r0, [r0, #12]
	ldr	r1, [sp, #4]
	cmp	r0, r1
	bhs	.LBB2_6
	b	.LBB2_5
.LBB2_5:                                @   in Loop: Header=BB2_4 Depth=1
	b	.LBB2_4
.LBB2_6:
	b	.LBB2_7
.LBB2_7:
	add	sp, #12
	bx	lr
.Lfunc_end2:
	.size	system_delay_ms, .Lfunc_end2-system_delay_ms
	.cfi_endproc
	.cantunwind
	.fnend
                                        @ -- End function
	.section	.text.system_get_current_ticks,"ax",%progbits
	.hidden	system_get_current_ticks        @ -- Begin function system_get_current_ticks
	.globl	system_get_current_ticks
	.p2align	2
	.type	system_get_current_ticks,%function
	.code	16                              @ @system_get_current_ticks
	.thumb_func
system_get_current_ticks:
	.fnstart
	.cfi_startproc
@ %bb.0:
	movw	r0, :lower16:g_mcu_vars_param
	movt	r0, :upper16:g_mcu_vars_param
	ldr	r0, [r0, #12]
	bx	lr
.Lfunc_end3:
	.size	system_get_current_ticks, .Lfunc_end3-system_get_current_ticks
	.cfi_endproc
	.cantunwind
	.fnend
                                        @ -- End function
	.section	.text.set_u16,"ax",%progbits
	.hidden	set_u16                         @ -- Begin function set_u16
	.globl	set_u16
	.p2align	2
	.type	set_u16,%function
	.code	16                              @ @set_u16
	.thumb_func
set_u16:
	.fnstart
	.cfi_startproc
@ %bb.0:
	.pad	#8
	sub	sp, #8
	.cfi_def_cfa_offset 8
                                        @ kill: def $r2 killed $r1
	str	r0, [sp, #4]
	strh.w	r1, [sp, #2]
	ldr	r0, [sp, #4]
	cbnz	r0, .LBB4_2
	b	.LBB4_1
.LBB4_1:
	b	.LBB4_3
.LBB4_2:
	ldrb.w	r0, [sp, #3]
	ldr	r1, [sp, #4]
	strb	r0, [r1]
	ldrh.w	r0, [sp, #2]
	ldr	r1, [sp, #4]
	strb	r0, [r1, #1]
	b	.LBB4_3
.LBB4_3:
	add	sp, #8
	bx	lr
.Lfunc_end4:
	.size	set_u16, .Lfunc_end4-set_u16
	.cfi_endproc
	.cantunwind
	.fnend
                                        @ -- End function
	.section	.text.get_u16,"ax",%progbits
	.hidden	get_u16                         @ -- Begin function get_u16
	.globl	get_u16
	.p2align	2
	.type	get_u16,%function
	.code	16                              @ @get_u16
	.thumb_func
get_u16:
	.fnstart
	.cfi_startproc
@ %bb.0:
	.pad	#12
	sub	sp, #12
	.cfi_def_cfa_offset 12
	str	r0, [sp, #4]
	movs	r0, #0
	strh.w	r0, [sp, #2]
	strb.w	r0, [sp, #1]
	strb.w	r0, [sp]
	ldr	r0, [sp, #4]
	cbnz	r0, .LBB5_2
	b	.LBB5_1
.LBB5_1:
	movs	r0, #0
	strh.w	r0, [sp, #10]
	b	.LBB5_3
.LBB5_2:
	ldr	r0, [sp, #4]
	ldrb	r0, [r0]
	strb.w	r0, [sp, #1]
	ldr	r0, [sp, #4]
	ldrb	r0, [r0, #1]
	strb.w	r0, [sp]
	ldrb.w	r1, [sp, #1]
	ldrb.w	r0, [sp]
	orr.w	r0, r0, r1, lsl #8
	strh.w	r0, [sp, #2]
	ldrh.w	r0, [sp, #2]
	strh.w	r0, [sp, #10]
	b	.LBB5_3
.LBB5_3:
	ldrh.w	r0, [sp, #10]
	add	sp, #12
	bx	lr
.Lfunc_end5:
	.size	get_u16, .Lfunc_end5-get_u16
	.cfi_endproc
	.cantunwind
	.fnend
                                        @ -- End function
	.section	.text.set_u32,"ax",%progbits
	.hidden	set_u32                         @ -- Begin function set_u32
	.globl	set_u32
	.p2align	2
	.type	set_u32,%function
	.code	16                              @ @set_u32
	.thumb_func
set_u32:
	.fnstart
	.cfi_startproc
@ %bb.0:
	.pad	#8
	sub	sp, #8
	.cfi_def_cfa_offset 8
	str	r0, [sp, #4]
	str	r1, [sp]
	ldr	r0, [sp, #4]
	cbnz	r0, .LBB6_2
	b	.LBB6_1
.LBB6_1:
	b	.LBB6_3
.LBB6_2:
	ldrb.w	r0, [sp, #3]
	ldr	r1, [sp, #4]
	strb	r0, [r1]
	ldrh.w	r0, [sp, #2]
	ldr	r1, [sp, #4]
	strb	r0, [r1, #1]
	ldr	r0, [sp]
	lsrs	r0, r0, #8
	ldr	r1, [sp, #4]
	strb	r0, [r1, #2]
	ldr	r0, [sp]
	ldr	r1, [sp, #4]
	strb	r0, [r1, #3]
	b	.LBB6_3
.LBB6_3:
	add	sp, #8
	bx	lr
.Lfunc_end6:
	.size	set_u32, .Lfunc_end6-set_u32
	.cfi_endproc
	.cantunwind
	.fnend
                                        @ -- End function
	.section	.text.get_u32,"ax",%progbits
	.hidden	get_u32                         @ -- Begin function get_u32
	.globl	get_u32
	.p2align	2
	.type	get_u32,%function
	.code	16                              @ @get_u32
	.thumb_func
get_u32:
	.fnstart
	.cfi_startproc
@ %bb.0:
	.pad	#16
	sub	sp, #16
	.cfi_def_cfa_offset 16
	str	r0, [sp, #8]
	movs	r0, #0
	str	r0, [sp, #4]
	strb.w	r0, [sp, #3]
	strb.w	r0, [sp, #2]
	strb.w	r0, [sp, #1]
	strb.w	r0, [sp]
	ldr	r0, [sp, #8]
	cbnz	r0, .LBB7_2
	b	.LBB7_1
.LBB7_1:
	movs	r0, #0
	str	r0, [sp, #12]
	b	.LBB7_3
.LBB7_2:
	ldr	r0, [sp, #8]
	ldrb	r0, [r0]
	strb.w	r0, [sp, #3]
	ldr	r0, [sp, #8]
	ldrb	r0, [r0, #1]
	strb.w	r0, [sp, #2]
	ldr	r0, [sp, #8]
	ldrb	r0, [r0, #2]
	strb.w	r0, [sp, #1]
	ldr	r0, [sp, #8]
	ldrb	r0, [r0, #3]
	strb.w	r0, [sp]
	ldrb.w	r0, [sp, #3]
	lsls	r0, r0, #24
	ldrb.w	r1, [sp, #2]
	orr.w	r0, r0, r1, lsl #16
	ldrb.w	r1, [sp, #1]
	orr.w	r0, r0, r1, lsl #8
	ldrb.w	r1, [sp]
	add	r0, r1
	str	r0, [sp, #4]
	ldr	r0, [sp, #4]
	str	r0, [sp, #12]
	b	.LBB7_3
.LBB7_3:
	ldr	r0, [sp, #12]
	add	sp, #16
	bx	lr
.Lfunc_end7:
	.size	get_u32, .Lfunc_end7-get_u32
	.cfi_endproc
	.cantunwind
	.fnend
                                        @ -- End function
	.section	.text.adc_calc_temp_value,"ax",%progbits
	.hidden	adc_calc_temp_value             @ -- Begin function adc_calc_temp_value
	.globl	adc_calc_temp_value
	.p2align	2
	.type	adc_calc_temp_value,%function
	.code	16                              @ @adc_calc_temp_value
	.thumb_func
adc_calc_temp_value:
	.fnstart
	.cfi_startproc
@ %bb.0:
	.save	{r4, lr}
	push	{r4, lr}
	.cfi_def_cfa_offset 8
	.cfi_offset lr, -4
	.cfi_offset r4, -8
	.pad	#16
	sub	sp, #16
	.cfi_def_cfa_offset 24
	mov	r12, r1
	mov	lr, r0
	ldr	r0, [sp, #32]
	ldr	r0, [sp, #28]
	ldr	r1, [sp, #24]
                                        @ kill: def $r4 killed $r3
                                        @ kill: def $r4 killed $r2
                                        @ kill: def $r4 killed $r12
	str.w	lr, [sp, #12]
	strh.w	r12, [sp, #10]
	strh.w	r2, [sp, #8]
	strh.w	r3, [sp, #6]
	strh.w	r1, [sp, #4]
	strb.w	r0, [sp, #3]
	ldr	r0, [sp, #12]
	cbz	r0, .LBB8_4
	b	.LBB8_1
.LBB8_1:
	ldrh.w	r0, [sp, #10]
	cmp	r0, #1
	blt	.LBB8_4
	b	.LBB8_2
.LBB8_2:
	ldr	r0, [sp, #32]
	cbz	r0, .LBB8_4
	b	.LBB8_3
.LBB8_3:
	ldrb.w	r0, [sp, #3]
	cbnz	r0, .LBB8_5
	b	.LBB8_4
.LBB8_4:
	b	.LBB8_12
.LBB8_5:
	ldrh.w	r0, [sp, #8]
	ldrh.w	r1, [sp, #6]
	cmp	r0, r1
	bgt	.LBB8_7
	b	.LBB8_6
.LBB8_6:
	ldrh.w	r0, [sp, #6]
	ldrh.w	r1, [sp, #10]
	cmp	r0, r1
	blt	.LBB8_8
	b	.LBB8_7
.LBB8_7:
	b	.LBB8_12
.LBB8_8:
	ldrh.w	r0, [sp, #8]
	ldrh.w	r1, [sp, #6]
	cmp	r0, r1
	bne	.LBB8_10
	b	.LBB8_9
.LBB8_9:
	ldrh.w	r0, [sp, #8]
	ldrb.w	r1, [sp, #3]
	mul	r0, r0, r1
	movs	r1, #100
	mul	r0, r0, r1
	ldr	r1, [sp, #32]
	str	r0, [r1]
	b	.LBB8_11
.LBB8_10:
	ldrh.w	r1, [sp, #8]
	ldrb.w	r2, [sp, #3]
	mul	r0, r1, r2
	ldr.w	r12, [sp, #12]
	ldrh.w	r3, [r12, r1, lsl #1]
	ldrh.w	r1, [sp, #4]
	subs	r1, r3, r1
	mul	r2, r1, r2
	movs	r1, #100
	mul	r2, r2, r1
	ldrh.w	lr, [sp, #6]
	ldrh.w	r12, [r12, lr, lsl #1]
	sub.w	r3, r3, r12
	sdiv	r2, r2, r3
	mla	r0, r0, r1, r2
	ldr	r1, [sp, #32]
	str	r0, [r1]
	b	.LBB8_11
.LBB8_11:
	b	.LBB8_12
.LBB8_12:
	add	sp, #16
	pop	{r4, pc}
.Lfunc_end8:
	.size	adc_calc_temp_value, .Lfunc_end8-adc_calc_temp_value
	.cfi_endproc
	.cantunwind
	.fnend
                                        @ -- End function
	.section	.text.search_bisection_temp_by_adc,"ax",%progbits
	.hidden	search_bisection_temp_by_adc    @ -- Begin function search_bisection_temp_by_adc
	.globl	search_bisection_temp_by_adc
	.p2align	2
	.type	search_bisection_temp_by_adc,%function
	.code	16                              @ @search_bisection_temp_by_adc
	.thumb_func
search_bisection_temp_by_adc:
	.fnstart
	.cfi_startproc
@ %bb.0:
	.save	{r4, r5, r7, lr}
	push	{r4, r5, r7, lr}
	.cfi_def_cfa_offset 16
	.cfi_offset lr, -4
	.cfi_offset r7, -8
	.cfi_offset r5, -12
	.cfi_offset r4, -16
	.pad	#32
	sub	sp, #32
	.cfi_def_cfa_offset 48
	ldr.w	r12, [sp, #48]
                                        @ kill: def $r12 killed $r3
                                        @ kill: def $r12 killed $r2
                                        @ kill: def $r12 killed $r0
	strh.w	r0, [sp, #28]
	str	r1, [sp, #24]
	strh.w	r2, [sp, #22]
	strb.w	r3, [sp, #21]
	movs	r0, #0
	strh.w	r0, [sp, #18]
	strh.w	r0, [sp, #16]
	strh.w	r0, [sp, #14]
	ldr	r0, [sp, #24]
	cbz	r0, .LBB9_3
	b	.LBB9_1
.LBB9_1:
	ldrh.w	r0, [sp, #22]
	cmp	r0, #1
	blt	.LBB9_3
	b	.LBB9_2
.LBB9_2:
	ldr	r0, [sp, #48]
	cbnz	r0, .LBB9_4
	b	.LBB9_3
.LBB9_3:
	movs	r0, #0
	strb.w	r0, [sp, #31]
	b	.LBB9_23
.LBB9_4:
	ldrh.w	r0, [sp, #22]
	subs	r0, #1
	strh.w	r0, [sp, #16]
	ldrh.w	r0, [sp, #28]
	ldr	r1, [sp, #24]
	ldrh.w	r2, [sp, #16]
	ldrh.w	r1, [r1, r2, lsl #1]
	cmp	r0, r1
	bge	.LBB9_6
	b	.LBB9_5
.LBB9_5:
	ldr	r0, [sp, #24]
	ldrh.w	r1, [sp, #16]
	ldrh.w	r0, [r0, r1, lsl #1]
	strh.w	r0, [sp, #28]
	b	.LBB9_9
.LBB9_6:
	ldrh.w	r0, [sp, #28]
	ldr	r1, [sp, #24]
	ldrh	r1, [r1]
	cmp	r0, r1
	ble	.LBB9_8
	b	.LBB9_7
.LBB9_7:
	ldr	r0, [sp, #24]
	ldrh	r0, [r0]
	strh.w	r0, [sp, #28]
	b	.LBB9_8
.LBB9_8:
	b	.LBB9_9
.LBB9_9:
	b	.LBB9_10
.LBB9_10:                               @ =>This Inner Loop Header: Depth=1
	ldrh.w	r0, [sp, #18]
	ldrh.w	r1, [sp, #16]
	cmp	r0, r1
	bgt.w	.LBB9_22
	b	.LBB9_11
.LBB9_11:                               @   in Loop: Header=BB9_10 Depth=1
	ldrh.w	r0, [sp, #18]
	ldrh.w	r1, [sp, #16]
	add	r0, r1
	lsrs	r0, r0, #1
	strh.w	r0, [sp, #14]
	ldr	r0, [sp, #24]
	ldrh.w	r1, [sp, #14]
	ldrh.w	r0, [r0, r1, lsl #1]
	ldrh.w	r1, [sp, #28]
	cmp	r0, r1
	bne	.LBB9_13
	b	.LBB9_12
.LBB9_12:
	ldr	r0, [sp, #24]
	ldrh.w	r1, [sp, #22]
	ldrh.w	r3, [sp, #14]
	ldrh.w	r2, [sp, #28]
	ldrb.w	lr, [sp, #21]
	ldr	r4, [sp, #48]
	mov	r12, sp
	str.w	r4, [r12, #8]
	str.w	lr, [r12, #4]
	str.w	r2, [r12]
	mov	r2, r3
	bl	adc_calc_temp_value
	movs	r0, #1
	strb.w	r0, [sp, #31]
	b	.LBB9_23
.LBB9_13:                               @   in Loop: Header=BB9_10 Depth=1
	ldrh.w	r0, [sp, #28]
	ldr	r1, [sp, #24]
	ldrh.w	r2, [sp, #14]
	ldrh.w	r1, [r1, r2, lsl #1]
	cmp	r0, r1
	bge	.LBB9_17
	b	.LBB9_14
.LBB9_14:                               @   in Loop: Header=BB9_10 Depth=1
	ldrh.w	r0, [sp, #14]
	adds	r0, #1
	strh.w	r0, [sp, #18]
	ldrh.w	r0, [sp, #18]
	ldrh.w	r1, [sp, #16]
	cmp	r0, r1
	ble	.LBB9_16
	b	.LBB9_15
.LBB9_15:
	ldr	r0, [sp, #24]
	ldrh.w	r1, [sp, #22]
	ldrh.w	r3, [sp, #16]
	subs	r2, r3, #1
	ldrh.w	r12, [sp, #28]
	ldrb.w	r4, [sp, #21]
	ldr	r5, [sp, #48]
	mov	lr, sp
	str.w	r5, [lr, #8]
	str.w	r4, [lr, #4]
	str.w	r12, [lr]
	uxth	r2, r2
	bl	adc_calc_temp_value
	movs	r0, #1
	strb.w	r0, [sp, #31]
	b	.LBB9_23
.LBB9_16:                               @   in Loop: Header=BB9_10 Depth=1
	b	.LBB9_20
.LBB9_17:                               @   in Loop: Header=BB9_10 Depth=1
	ldrh.w	r0, [sp, #14]
	subs	r0, #1
	strh.w	r0, [sp, #16]
	ldrh.w	r0, [sp, #16]
	ldrh.w	r1, [sp, #18]
	cmp	r0, r1
	bge	.LBB9_19
	b	.LBB9_18
.LBB9_18:
	ldr	r0, [sp, #24]
	ldrh.w	r1, [sp, #22]
	ldrh.w	r3, [sp, #18]
	subs	r2, r3, #1
	ldrh.w	r12, [sp, #28]
	ldrb.w	r4, [sp, #21]
	ldr	r5, [sp, #48]
	mov	lr, sp
	str.w	r5, [lr, #8]
	str.w	r4, [lr, #4]
	str.w	r12, [lr]
	uxth	r2, r2
	bl	adc_calc_temp_value
	movs	r0, #1
	strb.w	r0, [sp, #31]
	b	.LBB9_23
.LBB9_19:                               @   in Loop: Header=BB9_10 Depth=1
	b	.LBB9_20
.LBB9_20:                               @   in Loop: Header=BB9_10 Depth=1
	b	.LBB9_21
.LBB9_21:                               @   in Loop: Header=BB9_10 Depth=1
	b	.LBB9_10
.LBB9_22:
	movs	r0, #0
	strb.w	r0, [sp, #31]
	b	.LBB9_23
.LBB9_23:
	ldrb.w	r0, [sp, #31]
	add	sp, #32
	pop	{r4, r5, r7, pc}
.Lfunc_end9:
	.size	search_bisection_temp_by_adc, .Lfunc_end9-search_bisection_temp_by_adc
	.cfi_endproc
	.cantunwind
	.fnend
                                        @ -- End function
	.section	.text.flash_read,"ax",%progbits
	.hidden	flash_read                      @ -- Begin function flash_read
	.globl	flash_read
	.p2align	2
	.type	flash_read,%function
	.code	16                              @ @flash_read
	.thumb_func
flash_read:
	.fnstart
	.cfi_startproc
@ %bb.0:
	.pad	#20
	sub	sp, #20
	.cfi_def_cfa_offset 20
                                        @ kill: def $r3 killed $r2
	str	r0, [sp, #16]
	str	r1, [sp, #12]
	strh.w	r2, [sp, #10]
	movs	r0, #0
	str	r0, [sp, #4]
	strh.w	r0, [sp, #2]
	ldr	r1, [sp, #12]
	str	r1, [sp, #4]
	strh.w	r0, [sp, #2]
	b	.LBB10_1
.LBB10_1:                               @ =>This Inner Loop Header: Depth=1
	ldrh.w	r0, [sp, #2]
	ldrh.w	r1, [sp, #10]
	cmp	r0, r1
	bge	.LBB10_4
	b	.LBB10_2
.LBB10_2:                               @   in Loop: Header=BB10_1 Depth=1
	ldr	r0, [sp, #4]
	ldrb	r0, [r0]
	ldr	r1, [sp, #16]
	ldrh.w	r2, [sp, #2]
	strb	r0, [r1, r2]
	ldr	r0, [sp, #4]
	adds	r0, #1
	str	r0, [sp, #4]
	b	.LBB10_3
.LBB10_3:                               @   in Loop: Header=BB10_1 Depth=1
	ldrh.w	r0, [sp, #2]
	adds	r0, #1
	strh.w	r0, [sp, #2]
	b	.LBB10_1
.LBB10_4:
	add	sp, #20
	bx	lr
.Lfunc_end10:
	.size	flash_read, .Lfunc_end10-flash_read
	.cfi_endproc
	.cantunwind
	.fnend
                                        @ -- End function
	.section	.text.flash_write,"ax",%progbits
	.hidden	flash_write                     @ -- Begin function flash_write
	.globl	flash_write
	.p2align	2
	.type	flash_write,%function
	.code	16                              @ @flash_write
	.thumb_func
flash_write:
	.fnstart
	.cfi_startproc
@ %bb.0:
	.save	{r7, lr}
	push	{r7, lr}
	.cfi_def_cfa_offset 8
	.cfi_offset lr, -4
	.cfi_offset r7, -8
	.pad	#40
	sub	sp, #40
	.cfi_def_cfa_offset 48
                                        @ kill: def $r3 killed $r2
	str	r0, [sp, #36]
	str	r1, [sp, #32]
	strh.w	r2, [sp, #30]
	movs	r0, #0
	str	r0, [sp]                        @ 4-byte Spill
	str	r0, [sp, #12]
	str	r0, [sp, #8]
	ldr	r0, [sp, #32]
	str	r0, [sp, #20]
	movs	r0, #52
	bl	fmc_bank0_flag_clear
	bl	fmc_unlock
	ldr	r0, [sp]                        @ 4-byte Reload
	strh.w	r0, [sp, #28]
	b	.LBB11_1
.LBB11_1:                               @ =>This Loop Header: Depth=1
                                        @     Child Loop BB11_4 Depth 2
	ldrh.w	r0, [sp, #28]
	ldrh.w	r1, [sp, #30]
	cmp	r0, r1
	bge	.LBB11_10
	b	.LBB11_2
.LBB11_2:                               @   in Loop: Header=BB11_1 Depth=1
	ldrh.w	r0, [sp, #28]
	adds	r0, #1
	lsls	r0, r0, #29
	cbnz	r0, .LBB11_8
	b	.LBB11_3
.LBB11_3:                               @   in Loop: Header=BB11_1 Depth=1
	movs	r0, #7
	strb.w	r0, [sp, #7]
	b	.LBB11_4
.LBB11_4:                               @   Parent Loop BB11_1 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldrsb.w	r0, [sp, #7]
	cmp	r0, #0
	bmi	.LBB11_7
	b	.LBB11_5
.LBB11_5:                               @   in Loop: Header=BB11_4 Depth=2
	ldr	r1, [sp, #8]
	ldr	r0, [sp, #12]
	lsls	r0, r0, #8
	orr.w	r0, r0, r1, lsr #24
	lsls	r1, r1, #8
	str	r1, [sp, #8]
	str	r0, [sp, #12]
	ldrsb.w	r1, [sp, #7]
	ldrh.w	r0, [sp, #28]
	adds	r0, #1
	bic	r0, r0, #7
	add	r0, r1
	subs	r0, #8
	strh.w	r0, [sp, #26]
	ldr	r0, [sp, #36]
	ldrh.w	r1, [sp, #26]
	ldrb	r2, [r0, r1]
	ldr	r0, [sp, #8]
	ldr	r1, [sp, #12]
	orrs	r0, r2
	str	r1, [sp, #12]
	str	r0, [sp, #8]
	b	.LBB11_6
.LBB11_6:                               @   in Loop: Header=BB11_4 Depth=2
	ldrb.w	r0, [sp, #7]
	subs	r0, #1
	strb.w	r0, [sp, #7]
	b	.LBB11_4
.LBB11_7:                               @   in Loop: Header=BB11_1 Depth=1
	ldr	r0, [sp, #20]
	ldr	r2, [sp, #8]
	ldr	r3, [sp, #12]
	bl	fmc_doubleword_program
	movs	r0, #52
	bl	fmc_bank0_flag_clear
	ldr	r0, [sp, #20]
	adds	r0, #8
	str	r0, [sp, #20]
	movs	r0, #0
	str	r0, [sp, #12]
	str	r0, [sp, #8]
	b	.LBB11_8
.LBB11_8:                               @   in Loop: Header=BB11_1 Depth=1
	b	.LBB11_9
.LBB11_9:                               @   in Loop: Header=BB11_1 Depth=1
	ldrh.w	r0, [sp, #28]
	adds	r0, #1
	strh.w	r0, [sp, #28]
	b	.LBB11_1
.LBB11_10:
	bl	fmc_lock
	movs	r0, #0
	add	sp, #40
	pop	{r7, pc}
.Lfunc_end11:
	.size	flash_write, .Lfunc_end11-flash_write
	.cfi_endproc
	.cantunwind
	.fnend
                                        @ -- End function
	.section	.text.fmc_erase_single_page,"ax",%progbits
	.hidden	fmc_erase_single_page           @ -- Begin function fmc_erase_single_page
	.globl	fmc_erase_single_page
	.p2align	2
	.type	fmc_erase_single_page,%function
	.code	16                              @ @fmc_erase_single_page
	.thumb_func
fmc_erase_single_page:
	.fnstart
	.cfi_startproc
@ %bb.0:
	.save	{r7, lr}
	push	{r7, lr}
	.cfi_def_cfa_offset 8
	.cfi_offset lr, -4
	.cfi_offset r7, -8
	.pad	#8
	sub	sp, #8
	.cfi_def_cfa_offset 16
	str	r0, [sp, #4]
	bl	fmc_unlock
	movs	r0, #52
	str	r0, [sp]                        @ 4-byte Spill
	bl	fmc_bank0_flag_clear
	ldr	r0, [sp, #4]
	bl	fmc_page_erase
                                        @ kill: def $r1 killed $r0
	ldr	r0, [sp]                        @ 4-byte Reload
	bl	fmc_bank0_flag_clear
	bl	fmc_lock
	add	sp, #8
	pop	{r7, pc}
.Lfunc_end12:
	.size	fmc_erase_single_page, .Lfunc_end12-fmc_erase_single_page
	.cfi_endproc
	.cantunwind
	.fnend
                                        @ -- End function
	.ident	"Component: Arm Compiler for Embedded 6.19 Tool: armclang [5e73cb00]"
	.section	".note.GNU-stack","",%progbits
	.eabi_attribute	30, 6	@ Tag_ABI_optimization_goals
	.ARM_attribute	16, 1	@ Tag_AV_eba
