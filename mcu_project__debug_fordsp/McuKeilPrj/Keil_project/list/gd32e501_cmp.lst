	.text
	.syntax unified
	.eabi_attribute	67, "2.09"	@ Tag_conformance
	.cpu	cortex-m33
	.eabi_attribute	6, 17	@ Tag_CPU_arch
	.eabi_attribute	7, 77	@ Tag_CPU_arch_profile
	.eabi_attribute	8, 0	@ Tag_ARM_ISA_use
	.eabi_attribute	9, 3	@ Tag_THUMB_ISA_use
	.fpu	fpv5-sp-d16
	.eabi_attribute	27, 1	@ Tag_ABI_HardFP_use
	.eabi_attribute	36, 1	@ Tag_FP_HP_extension
	.eabi_attribute	34, 1	@ Tag_CPU_unaligned_access
	.eabi_attribute	17, 1	@ Tag_ABI_PCS_GOT_use
	.eabi_attribute	20, 2	@ Tag_ABI_FP_denormal
	.eabi_attribute	21, 0	@ Tag_ABI_FP_exceptions
	.eabi_attribute	23, 1	@ Tag_ABI_FP_number_model
	.eabi_attribute	24, 1	@ Tag_ABI_align_needed
	.eabi_attribute	25, 1	@ Tag_ABI_align_preserved
	.eabi_attribute	28, 1	@ Tag_ABI_VFP_args
	.eabi_attribute	38, 1	@ Tag_ABI_FP_16bit_format
	.eabi_attribute	18, 2	@ Tag_ABI_PCS_wchar_t
	.eabi_attribute	26, 1	@ Tag_ABI_enum_size
	.eabi_attribute	14, 0	@ Tag_ABI_PCS_R9_use
	.file	"gd32e501_cmp.c"
	.section	.text.cmp_deinit,"ax",%progbits
	.hidden	cmp_deinit                      @ -- Begin function cmp_deinit
	.globl	cmp_deinit
	.p2align	2
	.type	cmp_deinit,%function
	.code	16                              @ @cmp_deinit
	.thumb_func
cmp_deinit:
	.fnstart
	.cfi_sections .debug_frame
	.cfi_startproc
@ %bb.0:
	movs	r1, #28
	movt	r1, #16385
	movs	r0, #0
	str	r0, [r1]
	bx	lr
.Lfunc_end0:
	.size	cmp_deinit, .Lfunc_end0-cmp_deinit
	.cfi_endproc
	.cantunwind
	.fnend
                                        @ -- End function
	.section	.text.cmp_mode_init,"ax",%progbits
	.hidden	cmp_mode_init                   @ -- Begin function cmp_mode_init
	.globl	cmp_mode_init
	.p2align	2
	.type	cmp_mode_init,%function
	.code	16                              @ @cmp_mode_init
	.thumb_func
cmp_mode_init:
	.fnstart
	.cfi_startproc
@ %bb.0:
	.pad	#8
	sub	sp, #8
	.cfi_def_cfa_offset 8
                                        @ kill: def $r12 killed $r3
                                        @ kill: def $r12 killed $r2
                                        @ kill: def $r12 killed $r1
	str	r0, [sp, #4]
	strb.w	r1, [sp, #3]
	strb.w	r2, [sp, #2]
	strb.w	r3, [sp, #1]
	ldr	r0, [sp, #4]
	cbnz	r0, .LBB1_2
	b	.LBB1_1
.LBB1_1:
	movs	r1, #28
	movt	r1, #16385
	ldr	r0, [r1]
	movw	r2, #12412
	bics	r0, r2
	str	r0, [r1]
	ldrb.w	r2, [sp, #3]
	ldrb.w	r3, [sp, #2]
	movs	r0, #112
	and.w	r0, r0, r3, lsl #4
	bfi	r0, r2, #2, #2
	ldrb.w	r2, [sp, #1]
	and	r2, r2, #3
	orr.w	r2, r0, r2, lsl #12
	ldr	r0, [r1]
	orrs	r0, r2
	str	r0, [r1]
	b	.LBB1_3
.LBB1_2:
	movs	r1, #28
	movt	r1, #16385
	ldr	r0, [r1]
	movw	r2, #65535
	movt	r2, #53123
	ands	r0, r2
	str	r0, [r1]
	ldrb.w	r2, [sp, #3]
	ldrb.w	r3, [sp, #2]
	mov.w	r0, #7340032
	and.w	r0, r0, r3, lsl #20
	bfi	r0, r2, #18, #2
	ldrb.w	r2, [sp, #1]
	and	r2, r2, #3
	orr.w	r2, r0, r2, lsl #28
	ldr	r0, [r1]
	orrs	r0, r2
	str	r0, [r1]
	b	.LBB1_3
.LBB1_3:
	add	sp, #8
	bx	lr
.Lfunc_end1:
	.size	cmp_mode_init, .Lfunc_end1-cmp_mode_init
	.cfi_endproc
	.cantunwind
	.fnend
                                        @ -- End function
	.section	.text.cmp_output_init,"ax",%progbits
	.hidden	cmp_output_init                 @ -- Begin function cmp_output_init
	.globl	cmp_output_init
	.p2align	2
	.type	cmp_output_init,%function
	.code	16                              @ @cmp_output_init
	.thumb_func
cmp_output_init:
	.fnstart
	.cfi_startproc
@ %bb.0:
	.pad	#12
	sub	sp, #12
	.cfi_def_cfa_offset 12
                                        @ kill: def $r3 killed $r1
	str	r0, [sp, #8]
	strb.w	r1, [sp, #7]
	str	r2, [sp]
	ldr	r0, [sp, #8]
	cbnz	r0, .LBB2_5
	b	.LBB2_1
.LBB2_1:
	movs	r1, #28
	movt	r1, #16385
	ldr	r0, [r1]
	bic	r0, r0, #1792
	str	r0, [r1]
	ldrb.w	r0, [sp, #7]
	and	r2, r0, #7
	ldr	r0, [r1]
	orr.w	r0, r0, r2, lsl #8
	str	r0, [r1]
	ldr	r0, [sp]
	cmp	r0, #1
	bne	.LBB2_3
	b	.LBB2_2
.LBB2_2:
	movs	r1, #28
	movt	r1, #16385
	ldr	r0, [r1]
	orr	r0, r0, #2048
	str	r0, [r1]
	b	.LBB2_4
.LBB2_3:
	movs	r1, #28
	movt	r1, #16385
	ldr	r0, [r1]
	bic	r0, r0, #2048
	str	r0, [r1]
	b	.LBB2_4
.LBB2_4:
	b	.LBB2_9
.LBB2_5:
	movs	r1, #28
	movt	r1, #16385
	ldr	r0, [r1]
	bic	r0, r0, #117440512
	str	r0, [r1]
	ldrb.w	r0, [sp, #7]
	and	r2, r0, #7
	ldr	r0, [r1]
	orr.w	r0, r0, r2, lsl #24
	str	r0, [r1]
	ldr	r0, [sp]
	cmp	r0, #1
	bne	.LBB2_7
	b	.LBB2_6
.LBB2_6:
	movs	r1, #28
	movt	r1, #16385
	ldr	r0, [r1]
	orr	r0, r0, #134217728
	str	r0, [r1]
	b	.LBB2_8
.LBB2_7:
	movs	r1, #28
	movt	r1, #16385
	ldr	r0, [r1]
	bic	r0, r0, #134217728
	str	r0, [r1]
	b	.LBB2_8
.LBB2_8:
	b	.LBB2_9
.LBB2_9:
	add	sp, #12
	bx	lr
.Lfunc_end2:
	.size	cmp_output_init, .Lfunc_end2-cmp_output_init
	.cfi_endproc
	.cantunwind
	.fnend
                                        @ -- End function
	.section	.text.cmp_enable,"ax",%progbits
	.hidden	cmp_enable                      @ -- Begin function cmp_enable
	.globl	cmp_enable
	.p2align	2
	.type	cmp_enable,%function
	.code	16                              @ @cmp_enable
	.thumb_func
cmp_enable:
	.fnstart
	.cfi_startproc
@ %bb.0:
	.pad	#4
	sub	sp, #4
	.cfi_def_cfa_offset 4
	str	r0, [sp]
	ldr	r0, [sp]
	cbnz	r0, .LBB3_2
	b	.LBB3_1
.LBB3_1:
	movs	r1, #28
	movt	r1, #16385
	ldr	r0, [r1]
	orr	r0, r0, #1
	str	r0, [r1]
	b	.LBB3_3
.LBB3_2:
	movs	r1, #28
	movt	r1, #16385
	ldr	r0, [r1]
	orr	r0, r0, #65536
	str	r0, [r1]
	b	.LBB3_3
.LBB3_3:
	add	sp, #4
	bx	lr
.Lfunc_end3:
	.size	cmp_enable, .Lfunc_end3-cmp_enable
	.cfi_endproc
	.cantunwind
	.fnend
                                        @ -- End function
	.section	.text.cmp_disable,"ax",%progbits
	.hidden	cmp_disable                     @ -- Begin function cmp_disable
	.globl	cmp_disable
	.p2align	2
	.type	cmp_disable,%function
	.code	16                              @ @cmp_disable
	.thumb_func
cmp_disable:
	.fnstart
	.cfi_startproc
@ %bb.0:
	.pad	#4
	sub	sp, #4
	.cfi_def_cfa_offset 4
	str	r0, [sp]
	ldr	r0, [sp]
	cbnz	r0, .LBB4_2
	b	.LBB4_1
.LBB4_1:
	movs	r1, #28
	movt	r1, #16385
	ldr	r0, [r1]
	bic	r0, r0, #1
	str	r0, [r1]
	b	.LBB4_3
.LBB4_2:
	movs	r1, #28
	movt	r1, #16385
	ldr	r0, [r1]
	bic	r0, r0, #65536
	str	r0, [r1]
	b	.LBB4_3
.LBB4_3:
	add	sp, #4
	bx	lr
.Lfunc_end4:
	.size	cmp_disable, .Lfunc_end4-cmp_disable
	.cfi_endproc
	.cantunwind
	.fnend
                                        @ -- End function
	.section	.text.cmp_switch_enable,"ax",%progbits
	.hidden	cmp_switch_enable               @ -- Begin function cmp_switch_enable
	.globl	cmp_switch_enable
	.p2align	2
	.type	cmp_switch_enable,%function
	.code	16                              @ @cmp_switch_enable
	.thumb_func
cmp_switch_enable:
	.fnstart
	.cfi_startproc
@ %bb.0:
	movs	r1, #28
	movt	r1, #16385
	ldr	r0, [r1]
	orr	r0, r0, #2
	str	r0, [r1]
	bx	lr
.Lfunc_end5:
	.size	cmp_switch_enable, .Lfunc_end5-cmp_switch_enable
	.cfi_endproc
	.cantunwind
	.fnend
                                        @ -- End function
	.section	.text.cmp_switch_disable,"ax",%progbits
	.hidden	cmp_switch_disable              @ -- Begin function cmp_switch_disable
	.globl	cmp_switch_disable
	.p2align	2
	.type	cmp_switch_disable,%function
	.code	16                              @ @cmp_switch_disable
	.thumb_func
cmp_switch_disable:
	.fnstart
	.cfi_startproc
@ %bb.0:
	movs	r1, #28
	movt	r1, #16385
	ldr	r0, [r1]
	bic	r0, r0, #2
	str	r0, [r1]
	bx	lr
.Lfunc_end6:
	.size	cmp_switch_disable, .Lfunc_end6-cmp_switch_disable
	.cfi_endproc
	.cantunwind
	.fnend
                                        @ -- End function
	.section	.text.cmp_window_enable,"ax",%progbits
	.hidden	cmp_window_enable               @ -- Begin function cmp_window_enable
	.globl	cmp_window_enable
	.p2align	2
	.type	cmp_window_enable,%function
	.code	16                              @ @cmp_window_enable
	.thumb_func
cmp_window_enable:
	.fnstart
	.cfi_startproc
@ %bb.0:
	movs	r1, #28
	movt	r1, #16385
	ldr	r0, [r1]
	orr	r0, r0, #8388608
	str	r0, [r1]
	bx	lr
.Lfunc_end7:
	.size	cmp_window_enable, .Lfunc_end7-cmp_window_enable
	.cfi_endproc
	.cantunwind
	.fnend
                                        @ -- End function
	.section	.text.cmp_window_disable,"ax",%progbits
	.hidden	cmp_window_disable              @ -- Begin function cmp_window_disable
	.globl	cmp_window_disable
	.p2align	2
	.type	cmp_window_disable,%function
	.code	16                              @ @cmp_window_disable
	.thumb_func
cmp_window_disable:
	.fnstart
	.cfi_startproc
@ %bb.0:
	movs	r1, #28
	movt	r1, #16385
	ldr	r0, [r1]
	bic	r0, r0, #8388608
	str	r0, [r1]
	bx	lr
.Lfunc_end8:
	.size	cmp_window_disable, .Lfunc_end8-cmp_window_disable
	.cfi_endproc
	.cantunwind
	.fnend
                                        @ -- End function
	.section	.text.cmp_lock_enable,"ax",%progbits
	.hidden	cmp_lock_enable                 @ -- Begin function cmp_lock_enable
	.globl	cmp_lock_enable
	.p2align	2
	.type	cmp_lock_enable,%function
	.code	16                              @ @cmp_lock_enable
	.thumb_func
cmp_lock_enable:
	.fnstart
	.cfi_startproc
@ %bb.0:
	.pad	#4
	sub	sp, #4
	.cfi_def_cfa_offset 4
	str	r0, [sp]
	ldr	r0, [sp]
	cbnz	r0, .LBB9_2
	b	.LBB9_1
.LBB9_1:
	movs	r1, #28
	movt	r1, #16385
	ldr	r0, [r1]
	orr	r0, r0, #32768
	str	r0, [r1]
	b	.LBB9_3
.LBB9_2:
	movs	r1, #28
	movt	r1, #16385
	ldr	r0, [r1]
	orr	r0, r0, #-2147483648
	str	r0, [r1]
	b	.LBB9_3
.LBB9_3:
	add	sp, #4
	bx	lr
.Lfunc_end9:
	.size	cmp_lock_enable, .Lfunc_end9-cmp_lock_enable
	.cfi_endproc
	.cantunwind
	.fnend
                                        @ -- End function
	.section	.text.cmp_output_level_get,"ax",%progbits
	.hidden	cmp_output_level_get            @ -- Begin function cmp_output_level_get
	.globl	cmp_output_level_get
	.p2align	2
	.type	cmp_output_level_get,%function
	.code	16                              @ @cmp_output_level_get
	.thumb_func
cmp_output_level_get:
	.fnstart
	.cfi_startproc
@ %bb.0:
	.pad	#8
	sub	sp, #8
	.cfi_def_cfa_offset 8
	str	r0, [sp]
	ldr	r0, [sp]
	cbnz	r0, .LBB10_4
	b	.LBB10_1
.LBB10_1:
	movs	r0, #28
	movt	r0, #16385
	ldr	r0, [r0]
	lsls	r0, r0, #17
	cmp	r0, #0
	bpl	.LBB10_3
	b	.LBB10_2
.LBB10_2:
	movs	r0, #1
	str	r0, [sp, #4]
	b	.LBB10_7
.LBB10_3:
	movs	r0, #0
	str	r0, [sp, #4]
	b	.LBB10_7
.LBB10_4:
	movs	r0, #28
	movt	r0, #16385
	ldr	r0, [r0]
	lsls	r0, r0, #1
	cmp	r0, #0
	bpl	.LBB10_6
	b	.LBB10_5
.LBB10_5:
	movs	r0, #1
	str	r0, [sp, #4]
	b	.LBB10_7
.LBB10_6:
	movs	r0, #0
	str	r0, [sp, #4]
	b	.LBB10_7
.LBB10_7:
	ldr	r0, [sp, #4]
	add	sp, #8
	bx	lr
.Lfunc_end10:
	.size	cmp_output_level_get, .Lfunc_end10-cmp_output_level_get
	.cfi_endproc
	.cantunwind
	.fnend
                                        @ -- End function
	.ident	"Component: Arm Compiler for Embedded 6.19 Tool: armclang [5e73cb00]"
	.section	".note.GNU-stack","",%progbits
	.eabi_attribute	30, 6	@ Tag_ABI_optimization_goals
	.ARM_attribute	16, 1	@ Tag_AV_eba
