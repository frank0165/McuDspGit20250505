	.text
	.syntax unified
	.eabi_attribute	67, "2.09"	@ Tag_conformance
	.cpu	cortex-m33
	.eabi_attribute	6, 17	@ Tag_CPU_arch
	.eabi_attribute	7, 77	@ Tag_CPU_arch_profile
	.eabi_attribute	8, 0	@ Tag_ARM_ISA_use
	.eabi_attribute	9, 3	@ Tag_THUMB_ISA_use
	.fpu	fpv5-sp-d16
	.eabi_attribute	27, 1	@ Tag_ABI_HardFP_use
	.eabi_attribute	36, 1	@ Tag_FP_HP_extension
	.eabi_attribute	34, 1	@ Tag_CPU_unaligned_access
	.eabi_attribute	17, 1	@ Tag_ABI_PCS_GOT_use
	.eabi_attribute	20, 2	@ Tag_ABI_FP_denormal
	.eabi_attribute	21, 0	@ Tag_ABI_FP_exceptions
	.eabi_attribute	23, 1	@ Tag_ABI_FP_number_model
	.eabi_attribute	24, 1	@ Tag_ABI_align_needed
	.eabi_attribute	25, 1	@ Tag_ABI_align_preserved
	.eabi_attribute	28, 1	@ Tag_ABI_VFP_args
	.eabi_attribute	38, 1	@ Tag_ABI_FP_16bit_format
	.eabi_attribute	18, 2	@ Tag_ABI_PCS_wchar_t
	.eabi_attribute	26, 1	@ Tag_ABI_enum_size
	.eabi_attribute	14, 0	@ Tag_ABI_PCS_R9_use
	.file	"adc_sample_comm.c"
	.section	.text.adc_sample_dma_regular_data_channel,"ax",%progbits
	.hidden	adc_sample_dma_regular_data_channel @ -- Begin function adc_sample_dma_regular_data_channel
	.globl	adc_sample_dma_regular_data_channel
	.p2align	2
	.type	adc_sample_dma_regular_data_channel,%function
	.code	16                              @ @adc_sample_dma_regular_data_channel
	.thumb_func
adc_sample_dma_regular_data_channel:
	.fnstart
	.cfi_sections .debug_frame
	.cfi_startproc
@ %bb.0:
	.pad	#8
	sub	sp, #8
	.cfi_def_cfa_offset 8
                                        @ kill: def $r1 killed $r0
	strb.w	r0, [sp, #5]
	ldrb.w	r0, [sp, #5]
	mov	r1, r0
	str	r1, [sp]                        @ 4-byte Spill
	cmp	r0, #4
	beq	.LBB0_5
	b	.LBB0_1
.LBB0_1:
	ldr	r0, [sp]                        @ 4-byte Reload
	cmp	r0, #10
	beq	.LBB0_4
	b	.LBB0_2
.LBB0_2:
	ldr	r0, [sp]                        @ 4-byte Reload
	cmp	r0, #11
	bne	.LBB0_6
	b	.LBB0_3
.LBB0_3:
	movs	r0, #0
	strb.w	r0, [sp, #4]
	b	.LBB0_7
.LBB0_4:
	movs	r0, #1
	strb.w	r0, [sp, #4]
	b	.LBB0_7
.LBB0_5:
	movs	r0, #2
	strb.w	r0, [sp, #4]
	b	.LBB0_7
.LBB0_6:
	movs	r0, #0
	strh.w	r0, [sp, #6]
	b	.LBB0_8
.LBB0_7:
	ldrb.w	r1, [sp, #4]
	movw	r0, :lower16:adc_dma_sample_value
	movt	r0, :upper16:adc_dma_sample_value
	ldrh.w	r0, [r0, r1, lsl #1]
	strh.w	r0, [sp, #6]
	b	.LBB0_8
.LBB0_8:
	ldrh.w	r0, [sp, #6]
	add	sp, #8
	bx	lr
.Lfunc_end0:
	.size	adc_sample_dma_regular_data_channel, .Lfunc_end0-adc_sample_dma_regular_data_channel
	.cfi_endproc
	.cantunwind
	.fnend
                                        @ -- End function
	.section	.text.adc_regular_channel_sample,"ax",%progbits
	.hidden	adc_regular_channel_sample      @ -- Begin function adc_regular_channel_sample
	.globl	adc_regular_channel_sample
	.p2align	2
	.type	adc_regular_channel_sample,%function
	.code	16                              @ @adc_regular_channel_sample
	.thumb_func
adc_regular_channel_sample:
	.fnstart
	.cfi_startproc
@ %bb.0:
	.save	{r7, lr}
	push	{r7, lr}
	.cfi_def_cfa_offset 8
	.cfi_offset lr, -4
	.cfi_offset r7, -8
	.pad	#16
	sub	sp, #16
	.cfi_def_cfa_offset 24
                                        @ kill: def $r2 killed $r1
                                        @ kill: def $r2 killed $r0
	strb.w	r0, [sp, #15]
	strb.w	r1, [sp, #14]
	movs	r0, #0
	str	r0, [sp]                        @ 4-byte Spill
	str	r0, [sp, #8]
	strb.w	r0, [sp, #7]
	ldrb.w	r0, [sp, #15]
	ldrb.w	r1, [sp, #14]
	movs	r2, #5
	bl	adc_regular_channel_config
	movs	r0, #1
	bl	adc_software_trigger_enable
	ldr	r0, [sp]                        @ 4-byte Reload
	mov.w	r1, #500
	str	r1, [sp, #8]
	strb.w	r0, [sp, #7]
	ldr	r0, [sp, #8]
	add.w	r0, r0, r0, lsl #3
	lsls	r0, r0, #3
	str	r0, [sp, #8]
	b	.LBB1_1
.LBB1_1:                                @ =>This Inner Loop Header: Depth=1
	ldr	r0, [sp, #8]
	cmp	r0, #2
	blo	.LBB1_5
	b	.LBB1_2
.LBB1_2:                                @   in Loop: Header=BB1_1 Depth=1
	movs	r0, #4
	bl	adc_flag_get
	cbz	r0, .LBB1_4
	b	.LBB1_3
.LBB1_3:
	movs	r0, #0
	strb.w	r0, [sp, #7]
	b	.LBB1_5
.LBB1_4:                                @   in Loop: Header=BB1_1 Depth=1
	ldr	r0, [sp, #8]
	subs	r0, #1
	str	r0, [sp, #8]
	b	.LBB1_1
.LBB1_5:
	ldr	r0, [sp, #8]
	cmp	r0, #1
	bne	.LBB1_7
	b	.LBB1_6
.LBB1_6:
	movs	r0, #1
	strb.w	r0, [sp, #7]
	b	.LBB1_7
.LBB1_7:
	movs	r0, #2
	bl	adc_flag_clear
	bl	adc_regular_data_read
	add	sp, #16
	pop	{r7, pc}
.Lfunc_end1:
	.size	adc_regular_channel_sample, .Lfunc_end1-adc_regular_channel_sample
	.cfi_endproc
	.cantunwind
	.fnend
                                        @ -- End function
	.section	.text.adc_dma_config_init,"ax",%progbits
	.hidden	adc_dma_config_init             @ -- Begin function adc_dma_config_init
	.globl	adc_dma_config_init
	.p2align	2
	.type	adc_dma_config_init,%function
	.code	16                              @ @adc_dma_config_init
	.thumb_func
adc_dma_config_init:
	.fnstart
	.cfi_startproc
@ %bb.0:
	.save	{r7, lr}
	push	{r7, lr}
	.cfi_def_cfa_offset 8
	.cfi_offset lr, -4
	.cfi_offset r7, -8
	.pad	#40
	sub	sp, #40
	.cfi_def_cfa_offset 48
	movs	r0, #0
	str	r0, [sp, #8]
	b	.LBB2_1
.LBB2_1:                                @ =>This Inner Loop Header: Depth=1
	ldr	r0, [sp, #8]
	cmp	r0, #2
	bhi	.LBB2_4
	b	.LBB2_2
.LBB2_2:                                @   in Loop: Header=BB2_1 Depth=1
	ldr	r2, [sp, #8]
	movw	r1, :lower16:adc_dma_sample_value
	movt	r1, :upper16:adc_dma_sample_value
	ldrh.w	r0, [r1, r2, lsl #1]
	movs	r0, #0
	strh.w	r0, [r1, r2, lsl #1]
	b	.LBB2_3
.LBB2_3:                                @   in Loop: Header=BB2_1 Depth=1
	ldr	r0, [sp, #8]
	adds	r0, #1
	str	r0, [sp, #8]
	b	.LBB2_1
.LBB2_4:
	movs	r0, #0
	str	r0, [sp, #4]                    @ 4-byte Spill
	bl	dma_deinit
	ldr	r0, [sp, #4]                    @ 4-byte Reload
	movw	r1, #9292
	movt	r1, #16385
	str	r1, [sp, #12]
	strb.w	r0, [sp, #36]
	movw	r1, :lower16:adc_dma_sample_value
	movt	r1, :upper16:adc_dma_sample_value
	str	r1, [sp, #20]
	movs	r1, #1
	strb.w	r1, [sp, #37]
	mov.w	r1, #256
	str	r1, [sp, #16]
	mov.w	r1, #1024
	str	r1, [sp, #24]
	strb.w	r0, [sp, #38]
	movs	r1, #3
	str	r1, [sp, #28]
	mov.w	r1, #8192
	str	r1, [sp, #32]
	add	r1, sp, #12
	bl	dma_init
	ldr	r0, [sp, #4]                    @ 4-byte Reload
	bl	dma_circulation_enable
	ldr	r0, [sp, #4]                    @ 4-byte Reload
	bl	dma_channel_enable
	add	sp, #40
	pop	{r7, pc}
.Lfunc_end2:
	.size	adc_dma_config_init, .Lfunc_end2-adc_dma_config_init
	.cfi_endproc
	.cantunwind
	.fnend
                                        @ -- End function
	.section	.text.adc_sample_function_init,"ax",%progbits
	.hidden	adc_sample_function_init        @ -- Begin function adc_sample_function_init
	.globl	adc_sample_function_init
	.p2align	2
	.type	adc_sample_function_init,%function
	.code	16                              @ @adc_sample_function_init
	.thumb_func
adc_sample_function_init:
	.fnstart
	.cfi_startproc
@ %bb.0:
	.save	{r7, lr}
	push	{r7, lr}
	.cfi_def_cfa_offset 8
	.cfi_offset lr, -4
	.cfi_offset r7, -8
	.pad	#24
	sub	sp, #24
	.cfi_def_cfa_offset 32
	movs	r0, #2
	str	r0, [sp, #20]                   @ 4-byte Spill
	movs	r1, #1
	str	r1, [sp, #16]                   @ 4-byte Spill
	bl	adc_special_function_config
	ldr	r1, [sp, #16]                   @ 4-byte Reload
	mov.w	r0, #256
	bl	adc_special_function_config
	ldr	r0, [sp, #16]                   @ 4-byte Reload
	mov.w	r1, #917504
	bl	adc_external_trigger_source_config
	ldr	r1, [sp, #16]                   @ 4-byte Reload
	mov	r0, r1
	bl	adc_external_trigger_config
	ldr	r0, [sp, #20]                   @ 4-byte Reload
	mov.w	r1, #28672
	bl	adc_external_trigger_source_config
	ldr	r1, [sp, #16]                   @ 4-byte Reload
	ldr	r0, [sp, #20]                   @ 4-byte Reload
	bl	adc_external_trigger_config
	movs	r0, #0
	str	r0, [sp, #8]                    @ 4-byte Spill
	bl	adc_data_alignment_config
	ldr	r0, [sp, #16]                   @ 4-byte Reload
	movs	r1, #3
	str	r1, [sp, #4]                    @ 4-byte Spill
	bl	adc_channel_length_config
	ldr	r0, [sp, #8]                    @ 4-byte Reload
	movs	r1, #11
	movs	r2, #5
	str	r2, [sp, #12]                   @ 4-byte Spill
	bl	adc_regular_channel_config
	ldr	r2, [sp, #12]                   @ 4-byte Reload
	ldr	r0, [sp, #16]                   @ 4-byte Reload
	movs	r1, #10
	bl	adc_regular_channel_config
	ldr	r2, [sp, #12]                   @ 4-byte Reload
	ldr	r0, [sp, #20]                   @ 4-byte Reload
	movs	r1, #4
	bl	adc_regular_channel_config
	ldr	r1, [sp, #4]                    @ 4-byte Reload
	ldr	r0, [sp, #20]                   @ 4-byte Reload
	bl	adc_channel_length_config
	ldr	r0, [sp, #8]                    @ 4-byte Reload
	ldr	r2, [sp, #12]                   @ 4-byte Reload
	movs	r1, #12
	bl	adc_inserted_channel_config
	ldr	r2, [sp, #12]                   @ 4-byte Reload
	ldr	r0, [sp, #16]                   @ 4-byte Reload
	mov	r1, r2
	bl	adc_inserted_channel_config
	ldr	r1, [sp, #8]                    @ 4-byte Reload
	ldr	r2, [sp, #12]                   @ 4-byte Reload
	ldr	r0, [sp, #20]                   @ 4-byte Reload
	bl	adc_inserted_channel_config
	bl	adc_enable
	ldr	r0, [sp, #16]                   @ 4-byte Reload
	bl	system_delay_ms
	bl	adc_calibration_enable
	bl	adc_dma_mode_enable
	ldr	r0, [sp, #16]                   @ 4-byte Reload
	bl	adc_software_trigger_enable
	ldr	r0, [sp, #20]                   @ 4-byte Reload
	bl	adc_software_trigger_enable
	add	sp, #24
	pop	{r7, pc}
.Lfunc_end3:
	.size	adc_sample_function_init, .Lfunc_end3-adc_sample_function_init
	.cfi_endproc
	.cantunwind
	.fnend
                                        @ -- End function
	.section	.text.get_adc_inserted_channel_sample,"ax",%progbits
	.hidden	get_adc_inserted_channel_sample @ -- Begin function get_adc_inserted_channel_sample
	.globl	get_adc_inserted_channel_sample
	.p2align	2
	.type	get_adc_inserted_channel_sample,%function
	.code	16                              @ @get_adc_inserted_channel_sample
	.thumb_func
get_adc_inserted_channel_sample:
	.fnstart
	.cfi_startproc
@ %bb.0:
	.save	{r7, lr}
	push	{r7, lr}
	.cfi_def_cfa_offset 8
	.cfi_offset lr, -4
	.cfi_offset r7, -8
	.pad	#16
	sub	sp, #16
	.cfi_def_cfa_offset 24
                                        @ kill: def $r2 killed $r1
                                        @ kill: def $r2 killed $r0
	strb.w	r0, [sp, #15]
	strb.w	r1, [sp, #14]
	movs	r0, #0
	str	r0, [sp]                        @ 4-byte Spill
	str	r0, [sp, #8]
	strb.w	r0, [sp, #7]
	ldrb.w	r0, [sp, #15]
	ldrb.w	r1, [sp, #14]
	movs	r2, #5
	bl	adc_inserted_channel_config
	movs	r0, #2
	bl	adc_software_trigger_enable
	ldr	r0, [sp]                        @ 4-byte Reload
	mov.w	r1, #500
	str	r1, [sp, #8]
	strb.w	r0, [sp, #7]
	ldr	r0, [sp, #8]
	add.w	r0, r0, r0, lsl #3
	lsls	r0, r0, #3
	str	r0, [sp, #8]
	b	.LBB4_1
.LBB4_1:                                @ =>This Inner Loop Header: Depth=1
	ldr	r0, [sp, #8]
	cmp	r0, #2
	blo	.LBB4_5
	b	.LBB4_2
.LBB4_2:                                @   in Loop: Header=BB4_1 Depth=1
	movs	r0, #4
	bl	adc_flag_get
	cbz	r0, .LBB4_4
	b	.LBB4_3
.LBB4_3:
	movs	r0, #0
	strb.w	r0, [sp, #7]
	b	.LBB4_5
.LBB4_4:                                @   in Loop: Header=BB4_1 Depth=1
	ldr	r0, [sp, #8]
	subs	r0, #1
	str	r0, [sp, #8]
	b	.LBB4_1
.LBB4_5:
	ldr	r0, [sp, #8]
	cmp	r0, #1
	bne	.LBB4_7
	b	.LBB4_6
.LBB4_6:
	movs	r0, #1
	strb.w	r0, [sp, #7]
	b	.LBB4_7
.LBB4_7:
	movs	r0, #4
	bl	adc_flag_clear
	ldrb.w	r0, [sp, #15]
	bl	adc_inserted_data_read
	add	sp, #16
	pop	{r7, pc}
.Lfunc_end4:
	.size	get_adc_inserted_channel_sample, .Lfunc_end4-get_adc_inserted_channel_sample
	.cfi_endproc
	.cantunwind
	.fnend
                                        @ -- End function
	.hidden	adc_dma_sample_value            @ @adc_dma_sample_value
	.type	adc_dma_sample_value,%object
	.section	.bss.adc_dma_sample_value,"aw",%nobits
	.globl	adc_dma_sample_value
	.p2align	1, 0x0
adc_dma_sample_value:
	.zero	6
	.size	adc_dma_sample_value, 6

	.ident	"Component: Arm Compiler for Embedded 6.19 Tool: armclang [5e73cb00]"
	.section	".note.GNU-stack","",%progbits
	.eabi_attribute	30, 6	@ Tag_ABI_optimization_goals
	.ARM_attribute	16, 1	@ Tag_AV_eba
