	.text
	.syntax unified
	.eabi_attribute	67, "2.09"	@ Tag_conformance
	.cpu	cortex-m33
	.eabi_attribute	6, 17	@ Tag_CPU_arch
	.eabi_attribute	7, 77	@ Tag_CPU_arch_profile
	.eabi_attribute	8, 0	@ Tag_ARM_ISA_use
	.eabi_attribute	9, 3	@ Tag_THUMB_ISA_use
	.fpu	fpv5-sp-d16
	.eabi_attribute	27, 1	@ Tag_ABI_HardFP_use
	.eabi_attribute	36, 1	@ Tag_FP_HP_extension
	.eabi_attribute	34, 1	@ Tag_CPU_unaligned_access
	.eabi_attribute	17, 1	@ Tag_ABI_PCS_GOT_use
	.eabi_attribute	20, 2	@ Tag_ABI_FP_denormal
	.eabi_attribute	21, 0	@ Tag_ABI_FP_exceptions
	.eabi_attribute	23, 1	@ Tag_ABI_FP_number_model
	.eabi_attribute	24, 1	@ Tag_ABI_align_needed
	.eabi_attribute	25, 1	@ Tag_ABI_align_preserved
	.eabi_attribute	28, 1	@ Tag_ABI_VFP_args
	.eabi_attribute	38, 1	@ Tag_ABI_FP_16bit_format
	.eabi_attribute	18, 2	@ Tag_ABI_PCS_wchar_t
	.eabi_attribute	26, 1	@ Tag_ABI_enum_size
	.eabi_attribute	14, 0	@ Tag_ABI_PCS_R9_use
	.file	"ddm_sff_i2c_interface.c"
	.section	.text.om_flash_write_reg_byte,"ax",%progbits
	.hidden	om_flash_write_reg_byte         @ -- Begin function om_flash_write_reg_byte
	.globl	om_flash_write_reg_byte
	.p2align	2
	.type	om_flash_write_reg_byte,%function
	.code	16                              @ @om_flash_write_reg_byte
	.thumb_func
om_flash_write_reg_byte:
	.fnstart
	.cfi_sections .debug_frame
	.cfi_startproc
@ %bb.0:
	.save	{r7, lr}
	push	{r7, lr}
	.cfi_def_cfa_offset 8
	.cfi_offset lr, -4
	.cfi_offset r7, -8
	.pad	#48
	sub	sp, #48
	.cfi_def_cfa_offset 56
	str	r0, [sp, #44]
	str	r1, [sp, #40]
	str	r2, [sp, #36]
	ldr	r0, [sp, #40]
	ldrb	r0, [r0]
	strb.w	r0, [sp, #27]
	ldr	r0, [sp, #44]
	cmp	r0, #160
	bne	.LBB0_6
	b	.LBB0_1
.LBB0_1:
	movw	r0, #64512
	movt	r0, #2055
	str	r0, [sp, #20]                   @ 4-byte Spill
	bl	fmc_erase_single_page
	ldr	r0, [sp, #20]                   @ 4-byte Reload
	str	r0, [sp, #28]
	movs	r0, #0
	strh.w	r0, [sp, #34]
	b	.LBB0_2
.LBB0_2:                                @ =>This Inner Loop Header: Depth=1
	ldrh.w	r0, [sp, #34]
	ldr	r1, [sp, #36]
	subs	r1, #1
	cmp	r0, r1
	bhs	.LBB0_5
	b	.LBB0_3
.LBB0_3:                                @   in Loop: Header=BB0_2 Depth=1
	ldr	r0, [sp, #40]
	ldrh.w	r1, [sp, #34]
	add	r0, r1
	ldrb	r0, [r0, #1]
	ldrb.w	r2, [sp, #27]
	add	r2, r1
	movw	r1, :lower16:a0
	movt	r1, :upper16:a0
	strb	r0, [r1, r2]
	b	.LBB0_4
.LBB0_4:                                @   in Loop: Header=BB0_2 Depth=1
	ldrh.w	r0, [sp, #34]
	adds	r0, #1
	strh.w	r0, [sp, #34]
	b	.LBB0_2
.LBB0_5:
	ldr	r1, [sp, #28]
	movw	r0, :lower16:a0
	movt	r0, :upper16:a0
	mov.w	r2, #256
	bl	flash_write
	b	.LBB0_59
.LBB0_6:
	ldr	r0, [sp, #44]
	cmp	r0, #162
	bne	.LBB0_18
	b	.LBB0_7
.LBB0_7:
	ldrb.w	r0, [sp, #27]
	cmp	r0, #110
	bne	.LBB0_12
	b	.LBB0_8
.LBB0_8:
	ldr	r0, [sp, #40]
	ldrb	r0, [r0, #1]
	strb.w	r0, [sp, #26]
	ldrb.w	r0, [sp, #26]
	lsls	r0, r0, #25
	cmp	r0, #0
	bpl	.LBB0_10
	b	.LBB0_9
.LBB0_9:
	movs	r0, #0
	bl	ddm_50g_soft_txdsbl_ctrl
	b	.LBB0_11
.LBB0_10:
	movs	r0, #1
	bl	ddm_50g_soft_txdsbl_ctrl
	b	.LBB0_11
.LBB0_11:
	b	.LBB0_17
.LBB0_12:
	movw	r0, #63488
	movt	r0, #2055
	str	r0, [sp, #16]                   @ 4-byte Spill
	bl	fmc_erase_single_page
	ldr	r0, [sp, #16]                   @ 4-byte Reload
	str	r0, [sp, #28]
	movs	r0, #0
	strh.w	r0, [sp, #34]
	b	.LBB0_13
.LBB0_13:                               @ =>This Inner Loop Header: Depth=1
	ldrh.w	r0, [sp, #34]
	ldr	r1, [sp, #36]
	subs	r1, #1
	cmp	r0, r1
	bhs	.LBB0_16
	b	.LBB0_14
.LBB0_14:                               @   in Loop: Header=BB0_13 Depth=1
	ldr	r0, [sp, #40]
	ldrh.w	r1, [sp, #34]
	add	r0, r1
	ldrb	r0, [r0, #1]
	ldrb.w	r2, [sp, #27]
	add	r2, r1
	movw	r1, :lower16:a2
	movt	r1, :upper16:a2
	strb	r0, [r1, r2]
	b	.LBB0_15
.LBB0_15:                               @   in Loop: Header=BB0_13 Depth=1
	ldrh.w	r0, [sp, #34]
	adds	r0, #1
	strh.w	r0, [sp, #34]
	b	.LBB0_13
.LBB0_16:
	ldr	r1, [sp, #28]
	movw	r0, :lower16:a2
	movt	r0, :upper16:a2
	mov.w	r2, #256
	bl	flash_write
	b	.LBB0_17
.LBB0_17:
	b	.LBB0_58
.LBB0_18:
	ldr	r0, [sp, #44]
	cmp	r0, #176
	bne	.LBB0_24
	b	.LBB0_19
.LBB0_19:
	movw	r0, #62464
	movt	r0, #2055
	str	r0, [sp, #12]                   @ 4-byte Spill
	bl	fmc_erase_single_page
	ldr	r0, [sp, #12]                   @ 4-byte Reload
	str	r0, [sp, #28]
	movs	r0, #0
	strh.w	r0, [sp, #34]
	b	.LBB0_20
.LBB0_20:                               @ =>This Inner Loop Header: Depth=1
	ldrh.w	r0, [sp, #34]
	ldr	r1, [sp, #36]
	subs	r1, #1
	cmp	r0, r1
	bhs	.LBB0_23
	b	.LBB0_21
.LBB0_21:                               @   in Loop: Header=BB0_20 Depth=1
	ldr	r0, [sp, #40]
	ldrh.w	r1, [sp, #34]
	add	r0, r1
	ldrb	r0, [r0, #1]
	ldrb.w	r2, [sp, #27]
	add	r2, r1
	movw	r1, :lower16:b0
	movt	r1, :upper16:b0
	strb	r0, [r1, r2]
	b	.LBB0_22
.LBB0_22:                               @   in Loop: Header=BB0_20 Depth=1
	ldrh.w	r0, [sp, #34]
	adds	r0, #1
	strh.w	r0, [sp, #34]
	b	.LBB0_20
.LBB0_23:
	ldr	r1, [sp, #28]
	movw	r0, :lower16:b0
	movt	r0, :upper16:b0
	mov.w	r2, #256
	bl	flash_write
	b	.LBB0_57
.LBB0_24:
	ldr	r0, [sp, #44]
	cmp	r0, #178
	bne	.LBB0_36
	b	.LBB0_25
.LBB0_25:
	ldrb.w	r0, [sp, #27]
	cmp	r0, #110
	bne	.LBB0_30
	b	.LBB0_26
.LBB0_26:
	ldr	r0, [sp, #40]
	ldrb	r0, [r0, #1]
	strb.w	r0, [sp, #25]
	ldrb.w	r0, [sp, #25]
	lsls	r0, r0, #25
	cmp	r0, #0
	bpl	.LBB0_28
	b	.LBB0_27
.LBB0_27:
	movs	r0, #0
	bl	ddm_10g_soft_txdsbl_ctrl
	b	.LBB0_29
.LBB0_28:
	movs	r0, #1
	bl	ddm_10g_soft_txdsbl_ctrl
	b	.LBB0_29
.LBB0_29:
	b	.LBB0_35
.LBB0_30:
	movw	r0, #61440
	movt	r0, #2055
	str	r0, [sp, #8]                    @ 4-byte Spill
	bl	fmc_erase_single_page
	ldr	r0, [sp, #8]                    @ 4-byte Reload
	str	r0, [sp, #28]
	movs	r0, #0
	strh.w	r0, [sp, #34]
	b	.LBB0_31
.LBB0_31:                               @ =>This Inner Loop Header: Depth=1
	ldrh.w	r0, [sp, #34]
	ldr	r1, [sp, #36]
	subs	r1, #1
	cmp	r0, r1
	bhs	.LBB0_34
	b	.LBB0_32
.LBB0_32:                               @   in Loop: Header=BB0_31 Depth=1
	ldr	r0, [sp, #40]
	ldrh.w	r1, [sp, #34]
	add	r0, r1
	ldrb	r0, [r0, #1]
	ldrb.w	r2, [sp, #27]
	add	r2, r1
	movw	r1, :lower16:b2
	movt	r1, :upper16:b2
	strb	r0, [r1, r2]
	b	.LBB0_33
.LBB0_33:                               @   in Loop: Header=BB0_31 Depth=1
	ldrh.w	r0, [sp, #34]
	adds	r0, #1
	strh.w	r0, [sp, #34]
	b	.LBB0_31
.LBB0_34:
	ldr	r1, [sp, #28]
	movw	r0, :lower16:b2
	movt	r0, :upper16:b2
	mov.w	r2, #256
	bl	flash_write
	b	.LBB0_35
.LBB0_35:
	b	.LBB0_56
.LBB0_36:
	ldr	r0, [sp, #44]
	cmp	r0, #192
	bne	.LBB0_42
	b	.LBB0_37
.LBB0_37:
	movw	r0, #60416
	movt	r0, #2055
	str	r0, [sp, #4]                    @ 4-byte Spill
	bl	fmc_erase_single_page
	ldr	r0, [sp, #4]                    @ 4-byte Reload
	str	r0, [sp, #28]
	movs	r0, #0
	strh.w	r0, [sp, #34]
	b	.LBB0_38
.LBB0_38:                               @ =>This Inner Loop Header: Depth=1
	ldrh.w	r0, [sp, #34]
	ldr	r1, [sp, #36]
	subs	r1, #1
	cmp	r0, r1
	bhs	.LBB0_41
	b	.LBB0_39
.LBB0_39:                               @   in Loop: Header=BB0_38 Depth=1
	ldr	r0, [sp, #40]
	ldrh.w	r1, [sp, #34]
	add	r0, r1
	ldrb	r0, [r0, #1]
	ldrb.w	r2, [sp, #27]
	add	r2, r1
	movw	r1, :lower16:c0
	movt	r1, :upper16:c0
	strb	r0, [r1, r2]
	b	.LBB0_40
.LBB0_40:                               @   in Loop: Header=BB0_38 Depth=1
	ldrh.w	r0, [sp, #34]
	adds	r0, #1
	strh.w	r0, [sp, #34]
	b	.LBB0_38
.LBB0_41:
	ldr	r1, [sp, #28]
	movw	r0, :lower16:c0
	movt	r0, :upper16:c0
	mov.w	r2, #256
	bl	flash_write
	b	.LBB0_55
.LBB0_42:
	ldr	r0, [sp, #44]
	cmp	r0, #194
	bne	.LBB0_54
	b	.LBB0_43
.LBB0_43:
	ldrb.w	r0, [sp, #27]
	cmp	r0, #110
	bne	.LBB0_48
	b	.LBB0_44
.LBB0_44:
	ldr	r0, [sp, #40]
	ldrb	r0, [r0, #1]
	strb.w	r0, [sp, #24]
	ldrb.w	r0, [sp, #24]
	lsls	r0, r0, #25
	cmp	r0, #0
	bpl	.LBB0_46
	b	.LBB0_45
.LBB0_45:
	movs	r0, #0
	bl	ddm_1g_soft_txdsbl_ctrl
	b	.LBB0_47
.LBB0_46:
	movs	r0, #1
	bl	ddm_1g_soft_txdsbl_ctrl
	b	.LBB0_47
.LBB0_47:
	b	.LBB0_53
.LBB0_48:
	movw	r0, #59392
	movt	r0, #2055
	str	r0, [sp]                        @ 4-byte Spill
	bl	fmc_erase_single_page
	ldr	r0, [sp]                        @ 4-byte Reload
	str	r0, [sp, #28]
	movs	r0, #0
	strh.w	r0, [sp, #34]
	b	.LBB0_49
.LBB0_49:                               @ =>This Inner Loop Header: Depth=1
	ldrh.w	r0, [sp, #34]
	ldr	r1, [sp, #36]
	subs	r1, #1
	cmp	r0, r1
	bhs	.LBB0_52
	b	.LBB0_50
.LBB0_50:                               @   in Loop: Header=BB0_49 Depth=1
	ldr	r0, [sp, #40]
	ldrh.w	r1, [sp, #34]
	add	r0, r1
	ldrb	r0, [r0, #1]
	ldrb.w	r2, [sp, #27]
	add	r2, r1
	movw	r1, :lower16:c2
	movt	r1, :upper16:c2
	strb	r0, [r1, r2]
	b	.LBB0_51
.LBB0_51:                               @   in Loop: Header=BB0_49 Depth=1
	ldrh.w	r0, [sp, #34]
	adds	r0, #1
	strh.w	r0, [sp, #34]
	b	.LBB0_49
.LBB0_52:
	ldr	r1, [sp, #28]
	movw	r0, :lower16:c2
	movt	r0, :upper16:c2
	mov.w	r2, #256
	bl	flash_write
	b	.LBB0_53
.LBB0_53:
	b	.LBB0_54
.LBB0_54:
	b	.LBB0_55
.LBB0_55:
	b	.LBB0_56
.LBB0_56:
	b	.LBB0_57
.LBB0_57:
	b	.LBB0_58
.LBB0_58:
	b	.LBB0_59
.LBB0_59:
	add	sp, #48
	pop	{r7, pc}
.Lfunc_end0:
	.size	om_flash_write_reg_byte, .Lfunc_end0-om_flash_write_reg_byte
	.cfi_endproc
	.cantunwind
	.fnend
                                        @ -- End function
	.section	.text.om_memory_state_ctrl_write_reg_byte,"ax",%progbits
	.hidden	om_memory_state_ctrl_write_reg_byte @ -- Begin function om_memory_state_ctrl_write_reg_byte
	.globl	om_memory_state_ctrl_write_reg_byte
	.p2align	2
	.type	om_memory_state_ctrl_write_reg_byte,%function
	.code	16                              @ @om_memory_state_ctrl_write_reg_byte
	.thumb_func
om_memory_state_ctrl_write_reg_byte:
	.fnstart
	.cfi_startproc
@ %bb.0:
	.save	{r7, lr}
	push	{r7, lr}
	.cfi_def_cfa_offset 8
	.cfi_offset lr, -4
	.cfi_offset r7, -8
	.pad	#24
	sub	sp, #24
	.cfi_def_cfa_offset 32
	str	r0, [sp, #20]
	str	r1, [sp, #16]
	str	r2, [sp, #12]
	ldr	r0, [sp, #16]
	ldrb	r0, [r0]
	strb.w	r0, [sp, #9]
	ldr	r0, [sp, #20]
	cmp	r0, #210
	bne	.LBB1_6
	b	.LBB1_1
.LBB1_1:
	movs	r0, #0
	strh.w	r0, [sp, #10]
	b	.LBB1_2
.LBB1_2:                                @ =>This Inner Loop Header: Depth=1
	ldrh.w	r0, [sp, #10]
	ldr	r1, [sp, #12]
	subs	r1, #1
	cmp	r0, r1
	bhs	.LBB1_5
	b	.LBB1_3
.LBB1_3:                                @   in Loop: Header=BB1_2 Depth=1
	ldr	r0, [sp, #16]
	ldrh.w	r1, [sp, #10]
	add	r0, r1
	ldrb	r0, [r0, #1]
	ldrb.w	r2, [sp, #9]
	add	r2, r1
	movw	r1, :lower16:a2
	movt	r1, :upper16:a2
	strb	r0, [r1, r2]
	b	.LBB1_4
.LBB1_4:                                @   in Loop: Header=BB1_2 Depth=1
	ldrh.w	r0, [sp, #10]
	adds	r0, #1
	strh.w	r0, [sp, #10]
	b	.LBB1_2
.LBB1_5:
	b	.LBB1_20
.LBB1_6:
	ldr	r0, [sp, #20]
	cmp	r0, #226
	bne	.LBB1_12
	b	.LBB1_7
.LBB1_7:
	movs	r0, #0
	strh.w	r0, [sp, #10]
	b	.LBB1_8
.LBB1_8:                                @ =>This Inner Loop Header: Depth=1
	ldrh.w	r0, [sp, #10]
	ldr	r1, [sp, #12]
	subs	r1, #1
	cmp	r0, r1
	bhs	.LBB1_11
	b	.LBB1_9
.LBB1_9:                                @   in Loop: Header=BB1_8 Depth=1
	ldr	r0, [sp, #16]
	ldrh.w	r1, [sp, #10]
	add	r0, r1
	ldrb	r0, [r0, #1]
	ldrb.w	r2, [sp, #9]
	add	r2, r1
	movw	r1, :lower16:b2
	movt	r1, :upper16:b2
	strb	r0, [r1, r2]
	b	.LBB1_10
.LBB1_10:                               @   in Loop: Header=BB1_8 Depth=1
	ldrh.w	r0, [sp, #10]
	adds	r0, #1
	strh.w	r0, [sp, #10]
	b	.LBB1_8
.LBB1_11:
	b	.LBB1_19
.LBB1_12:
	ldr	r0, [sp, #20]
	cmp	r0, #232
	bne	.LBB1_18
	b	.LBB1_13
.LBB1_13:
	movs	r0, #0
	strh.w	r0, [sp, #10]
	b	.LBB1_14
.LBB1_14:                               @ =>This Inner Loop Header: Depth=1
	ldrh.w	r0, [sp, #10]
	ldr	r1, [sp, #12]
	subs	r1, #1
	cmp	r0, r1
	bhs	.LBB1_17
	b	.LBB1_15
.LBB1_15:                               @   in Loop: Header=BB1_14 Depth=1
	ldr	r0, [sp, #16]
	ldrh.w	r1, [sp, #10]
	add	r0, r1
	ldrb	r0, [r0, #1]
	ldrb.w	r2, [sp, #9]
	add	r2, r1
	movw	r1, :lower16:c2
	movt	r1, :upper16:c2
	strb	r0, [r1, r2]
	b	.LBB1_16
.LBB1_16:                               @   in Loop: Header=BB1_14 Depth=1
	ldrh.w	r0, [sp, #10]
	adds	r0, #1
	strh.w	r0, [sp, #10]
	b	.LBB1_14
.LBB1_17:
	b	.LBB1_18
.LBB1_18:
	b	.LBB1_19
.LBB1_19:
	b	.LBB1_20
.LBB1_20:
	ldr	r0, [sp, #20]
	cmp	r0, #210
	bne	.LBB1_26
	b	.LBB1_21
.LBB1_21:
	ldr	r0, [sp, #16]
	ldrb	r0, [r0]
	cmp	r0, #110
	bne	.LBB1_26
	b	.LBB1_22
.LBB1_22:
	ldr	r0, [sp, #16]
	ldrb	r0, [r0, #1]
	strb.w	r0, [sp, #8]
	ldrb.w	r0, [sp, #8]
	lsls	r0, r0, #25
	cmp	r0, #0
	bpl	.LBB1_24
	b	.LBB1_23
.LBB1_23:
	movs	r0, #0
	bl	ddm_50g_soft_txdsbl_ctrl
	b	.LBB1_25
.LBB1_24:
	movs	r0, #1
	bl	ddm_50g_soft_txdsbl_ctrl
	b	.LBB1_25
.LBB1_25:
	b	.LBB1_26
.LBB1_26:
	ldr	r0, [sp, #20]
	cmp	r0, #226
	bne	.LBB1_32
	b	.LBB1_27
.LBB1_27:
	ldr	r0, [sp, #16]
	ldrb	r0, [r0]
	cmp	r0, #110
	bne	.LBB1_32
	b	.LBB1_28
.LBB1_28:
	ldr	r0, [sp, #16]
	ldrb	r0, [r0, #1]
	strb.w	r0, [sp, #7]
	ldrb.w	r0, [sp, #7]
	lsls	r0, r0, #25
	cmp	r0, #0
	bpl	.LBB1_30
	b	.LBB1_29
.LBB1_29:
	movs	r0, #0
	bl	ddm_10g_soft_txdsbl_ctrl
	b	.LBB1_31
.LBB1_30:
	movs	r0, #1
	bl	ddm_10g_soft_txdsbl_ctrl
	b	.LBB1_31
.LBB1_31:
	b	.LBB1_32
.LBB1_32:
	ldr	r0, [sp, #20]
	cmp	r0, #232
	bne	.LBB1_38
	b	.LBB1_33
.LBB1_33:
	ldr	r0, [sp, #16]
	ldrb	r0, [r0]
	cmp	r0, #110
	bne	.LBB1_38
	b	.LBB1_34
.LBB1_34:
	ldr	r0, [sp, #16]
	ldrb	r0, [r0, #1]
	strb.w	r0, [sp, #6]
	ldrb.w	r0, [sp, #6]
	lsls	r0, r0, #25
	cmp	r0, #0
	bpl	.LBB1_36
	b	.LBB1_35
.LBB1_35:
	movs	r0, #0
	bl	ddm_1g_soft_txdsbl_ctrl
	b	.LBB1_37
.LBB1_36:
	movs	r0, #1
	bl	ddm_1g_soft_txdsbl_ctrl
	b	.LBB1_37
.LBB1_37:
	b	.LBB1_38
.LBB1_38:
	add	sp, #24
	pop	{r7, pc}
.Lfunc_end1:
	.size	om_memory_state_ctrl_write_reg_byte, .Lfunc_end1-om_memory_state_ctrl_write_reg_byte
	.cfi_endproc
	.cantunwind
	.fnend
                                        @ -- End function
	.section	.text.om_v2_flash_read_reg_byte,"ax",%progbits
	.hidden	om_v2_flash_read_reg_byte       @ -- Begin function om_v2_flash_read_reg_byte
	.globl	om_v2_flash_read_reg_byte
	.p2align	2
	.type	om_v2_flash_read_reg_byte,%function
	.code	16                              @ @om_v2_flash_read_reg_byte
	.thumb_func
om_v2_flash_read_reg_byte:
	.fnstart
	.cfi_startproc
@ %bb.0:
	.save	{r7, lr}
	push	{r7, lr}
	.cfi_def_cfa_offset 8
	.cfi_offset lr, -4
	.cfi_offset r7, -8
	.pad	#32
	sub	sp, #32
	.cfi_def_cfa_offset 40
	str	r0, [sp, #28]
	str	r1, [sp, #24]
	str	r2, [sp, #20]
	movs	r0, #0
	str	r0, [sp, #8]
	strb.w	r0, [sp, #7]
	str	r0, [sp]
	ldr	r0, [sp, #28]
	cbz	r0, .LBB2_2
	b	.LBB2_1
.LBB2_1:
	ldr	r0, [sp, #24]
	cbnz	r0, .LBB2_3
	b	.LBB2_2
.LBB2_2:
	b	.LBB2_34
.LBB2_3:
	ldr	r0, [sp, #28]
	ldrb	r0, [r0]
	cmp	r0, #1
	beq	.LBB2_5
	b	.LBB2_4
.LBB2_4:
	b	.LBB2_34
.LBB2_5:
	ldr	r0, [sp, #28]
	ldr	r0, [r0, #4]
	str	r0, [sp, #8]
	ldr	r0, [sp, #28]
	ldrb	r0, [r0, #8]
	strb.w	r0, [sp, #7]
	ldrb.w	r0, [sp, #7]
	rsb.w	r0, r0, #256
	str	r0, [sp]
	ldr	r0, [sp]
	cmp.w	r0, #256
	bls	.LBB2_7
	b	.LBB2_6
.LBB2_6:
	mov.w	r0, #256
	str	r0, [sp]
	b	.LBB2_7
.LBB2_7:
	ldr	r0, [sp, #8]
	cmp	r0, #160
	bne	.LBB2_9
	b	.LBB2_8
.LBB2_8:
	ldrb.w	r0, [sp, #7]
	movw	r1, #64512
	movt	r1, #2055
	orrs	r0, r1
	str	r0, [sp, #16]
	ldr	r0, [sp, #24]
	ldr	r1, [sp, #16]
	ldrh.w	r2, [sp]
	bl	flash_read
	b	.LBB2_33
.LBB2_9:
	ldr	r0, [sp, #8]
	cmp	r0, #162
	bne	.LBB2_14
	b	.LBB2_10
.LBB2_10:
	ldrb.w	r0, [sp, #7]
	movw	r1, #63488
	movt	r1, #2055
	orrs	r0, r1
	str	r0, [sp, #16]
	ldr	r0, [sp, #24]
	ldr	r1, [sp, #16]
	ldrh.w	r2, [sp]
	bl	flash_read
	ldrb.w	r0, [sp, #7]
	cmp	r0, #96
	blt	.LBB2_13
	b	.LBB2_11
.LBB2_11:
	ldrb.w	r0, [sp, #7]
	cmp	r0, #105
	bgt	.LBB2_13
	b	.LBB2_12
.LBB2_12:
	ldrb.w	r1, [sp, #7]
	movw	r0, :lower16:a2
	movt	r0, :upper16:a2
	ldrb	r0, [r0, r1]
	ldr	r1, [sp, #24]
	strb	r0, [r1]
	b	.LBB2_13
.LBB2_13:
	b	.LBB2_32
.LBB2_14:
	ldr	r0, [sp, #8]
	cmp	r0, #176
	bne	.LBB2_16
	b	.LBB2_15
.LBB2_15:
	ldrb.w	r0, [sp, #7]
	movw	r1, #62464
	movt	r1, #2055
	orrs	r0, r1
	str	r0, [sp, #16]
	ldr	r0, [sp, #24]
	ldr	r1, [sp, #16]
	ldrh.w	r2, [sp]
	bl	flash_read
	b	.LBB2_31
.LBB2_16:
	ldr	r0, [sp, #8]
	cmp	r0, #178
	bne	.LBB2_21
	b	.LBB2_17
.LBB2_17:
	ldrb.w	r0, [sp, #7]
	movw	r1, #61440
	movt	r1, #2055
	orrs	r0, r1
	str	r0, [sp, #16]
	ldr	r0, [sp, #24]
	ldr	r1, [sp, #16]
	ldrh.w	r2, [sp]
	bl	flash_read
	ldrb.w	r0, [sp, #7]
	cmp	r0, #96
	blt	.LBB2_20
	b	.LBB2_18
.LBB2_18:
	ldrb.w	r0, [sp, #7]
	cmp	r0, #105
	bgt	.LBB2_20
	b	.LBB2_19
.LBB2_19:
	ldrb.w	r1, [sp, #7]
	movw	r0, :lower16:b2
	movt	r0, :upper16:b2
	ldrb	r0, [r0, r1]
	ldr	r1, [sp, #24]
	strb	r0, [r1]
	b	.LBB2_20
.LBB2_20:
	b	.LBB2_30
.LBB2_21:
	ldr	r0, [sp, #8]
	cmp	r0, #192
	bne	.LBB2_23
	b	.LBB2_22
.LBB2_22:
	ldrb.w	r0, [sp, #7]
	movw	r1, #60416
	movt	r1, #2055
	orrs	r0, r1
	str	r0, [sp, #16]
	ldr	r0, [sp, #24]
	ldr	r1, [sp, #16]
	ldrh.w	r2, [sp]
	bl	flash_read
	b	.LBB2_29
.LBB2_23:
	ldr	r0, [sp, #8]
	cmp	r0, #194
	bne	.LBB2_28
	b	.LBB2_24
.LBB2_24:
	ldrb.w	r0, [sp, #7]
	movw	r1, #59392
	movt	r1, #2055
	orrs	r0, r1
	str	r0, [sp, #16]
	ldr	r0, [sp, #24]
	ldr	r1, [sp, #16]
	ldrh.w	r2, [sp]
	bl	flash_read
	ldrb.w	r0, [sp, #7]
	cmp	r0, #96
	blt	.LBB2_27
	b	.LBB2_25
.LBB2_25:
	ldrb.w	r0, [sp, #7]
	cmp	r0, #105
	bgt	.LBB2_27
	b	.LBB2_26
.LBB2_26:
	ldrb.w	r1, [sp, #7]
	movw	r0, :lower16:c2
	movt	r0, :upper16:c2
	ldrb	r0, [r0, r1]
	ldr	r1, [sp, #24]
	strb	r0, [r1]
	b	.LBB2_27
.LBB2_27:
	b	.LBB2_28
.LBB2_28:
	b	.LBB2_29
.LBB2_29:
	b	.LBB2_30
.LBB2_30:
	b	.LBB2_31
.LBB2_31:
	b	.LBB2_32
.LBB2_32:
	b	.LBB2_33
.LBB2_33:
	b	.LBB2_34
.LBB2_34:
	add	sp, #32
	pop	{r7, pc}
.Lfunc_end2:
	.size	om_v2_flash_read_reg_byte, .Lfunc_end2-om_v2_flash_read_reg_byte
	.cfi_endproc
	.cantunwind
	.fnend
                                        @ -- End function
	.section	.text.om_cmd_ddm_read_reg_byte,"ax",%progbits
	.hidden	om_cmd_ddm_read_reg_byte        @ -- Begin function om_cmd_ddm_read_reg_byte
	.globl	om_cmd_ddm_read_reg_byte
	.p2align	2
	.type	om_cmd_ddm_read_reg_byte,%function
	.code	16                              @ @om_cmd_ddm_read_reg_byte
	.thumb_func
om_cmd_ddm_read_reg_byte:
	.fnstart
	.cfi_startproc
@ %bb.0:
	.save	{r7, lr}
	push	{r7, lr}
	.cfi_def_cfa_offset 8
	.cfi_offset lr, -4
	.cfi_offset r7, -8
	.pad	#16
	sub	sp, #16
	.cfi_def_cfa_offset 24
                                        @ kill: def $r3 killed $r0
	strb.w	r0, [sp, #15]
	str	r1, [sp, #8]
	str	r2, [sp, #4]
	ldrb.w	r0, [sp, #15]
	cmp	r0, #16
	beq	.LBB3_2
	b	.LBB3_1
.LBB3_1:
	b	.LBB3_65
.LBB3_2:
	ldr	r0, [sp, #8]
	cbz	r0, .LBB3_4
	b	.LBB3_3
.LBB3_3:
	ldr	r0, [sp, #4]
	cmp	r0, #14
	bhi	.LBB3_5
	b	.LBB3_4
.LBB3_4:
	b	.LBB3_65
.LBB3_5:
	movw	r0, :lower16:ddm_adc_out_val
	movt	r0, :upper16:ddm_adc_out_val
	ldrh	r1, [r0]
	mov	r0, sp
	bl	set_u16
	movs	r0, #0
	strh.w	r0, [sp, #2]
	b	.LBB3_6
.LBB3_6:                                @ =>This Inner Loop Header: Depth=1
	ldrh.w	r0, [sp, #2]
	cmp	r0, #1
	bgt	.LBB3_9
	b	.LBB3_7
.LBB3_7:                                @   in Loop: Header=BB3_6 Depth=1
	ldrh.w	r1, [sp, #2]
	mov	r0, sp
	ldrb	r0, [r0, r1]
	ldr	r1, [sp, #8]
	strb	r0, [r1]
	ldr	r0, [sp, #8]
	adds	r0, #1
	str	r0, [sp, #8]
	b	.LBB3_8
.LBB3_8:                                @   in Loop: Header=BB3_6 Depth=1
	ldrh.w	r0, [sp, #2]
	adds	r0, #1
	strh.w	r0, [sp, #2]
	b	.LBB3_6
.LBB3_9:
	movw	r0, :lower16:ddm_adc_out_val
	movt	r0, :upper16:ddm_adc_out_val
	ldrh	r1, [r0, #2]
	mov	r0, sp
	bl	set_u16
	movs	r0, #0
	strh.w	r0, [sp, #2]
	b	.LBB3_10
.LBB3_10:                               @ =>This Inner Loop Header: Depth=1
	ldrh.w	r0, [sp, #2]
	cmp	r0, #1
	bgt	.LBB3_13
	b	.LBB3_11
.LBB3_11:                               @   in Loop: Header=BB3_10 Depth=1
	ldrh.w	r1, [sp, #2]
	mov	r0, sp
	ldrb	r0, [r0, r1]
	ldr	r1, [sp, #8]
	strb	r0, [r1]
	ldr	r0, [sp, #8]
	adds	r0, #1
	str	r0, [sp, #8]
	b	.LBB3_12
.LBB3_12:                               @   in Loop: Header=BB3_10 Depth=1
	ldrh.w	r0, [sp, #2]
	adds	r0, #1
	strh.w	r0, [sp, #2]
	b	.LBB3_10
.LBB3_13:
	movw	r0, :lower16:ddm_adc_out_val
	movt	r0, :upper16:ddm_adc_out_val
	ldrh	r1, [r0, #4]
	mov	r0, sp
	bl	set_u16
	movs	r0, #0
	strh.w	r0, [sp, #2]
	b	.LBB3_14
.LBB3_14:                               @ =>This Inner Loop Header: Depth=1
	ldrh.w	r0, [sp, #2]
	cmp	r0, #1
	bgt	.LBB3_17
	b	.LBB3_15
.LBB3_15:                               @   in Loop: Header=BB3_14 Depth=1
	ldrh.w	r1, [sp, #2]
	mov	r0, sp
	ldrb	r0, [r0, r1]
	ldr	r1, [sp, #8]
	strb	r0, [r1]
	ldr	r0, [sp, #8]
	adds	r0, #1
	str	r0, [sp, #8]
	b	.LBB3_16
.LBB3_16:                               @   in Loop: Header=BB3_14 Depth=1
	ldrh.w	r0, [sp, #2]
	adds	r0, #1
	strh.w	r0, [sp, #2]
	b	.LBB3_14
.LBB3_17:
	movw	r0, :lower16:ddm_adc_out_val
	movt	r0, :upper16:ddm_adc_out_val
	ldrh	r1, [r0, #6]
	mov	r0, sp
	bl	set_u16
	movs	r0, #0
	strh.w	r0, [sp, #2]
	b	.LBB3_18
.LBB3_18:                               @ =>This Inner Loop Header: Depth=1
	ldrh.w	r0, [sp, #2]
	cmp	r0, #1
	bgt	.LBB3_21
	b	.LBB3_19
.LBB3_19:                               @   in Loop: Header=BB3_18 Depth=1
	ldrh.w	r1, [sp, #2]
	mov	r0, sp
	ldrb	r0, [r0, r1]
	ldr	r1, [sp, #8]
	strb	r0, [r1]
	ldr	r0, [sp, #8]
	adds	r0, #1
	str	r0, [sp, #8]
	b	.LBB3_20
.LBB3_20:                               @   in Loop: Header=BB3_18 Depth=1
	ldrh.w	r0, [sp, #2]
	adds	r0, #1
	strh.w	r0, [sp, #2]
	b	.LBB3_18
.LBB3_21:
	movw	r0, :lower16:ddm_adc_out_val
	movt	r0, :upper16:ddm_adc_out_val
	ldrh	r1, [r0, #8]
	mov	r0, sp
	bl	set_u16
	movs	r0, #0
	strh.w	r0, [sp, #2]
	b	.LBB3_22
.LBB3_22:                               @ =>This Inner Loop Header: Depth=1
	ldrh.w	r0, [sp, #2]
	cmp	r0, #1
	bgt	.LBB3_25
	b	.LBB3_23
.LBB3_23:                               @   in Loop: Header=BB3_22 Depth=1
	ldrh.w	r1, [sp, #2]
	mov	r0, sp
	ldrb	r0, [r0, r1]
	ldr	r1, [sp, #8]
	strb	r0, [r1]
	ldr	r0, [sp, #8]
	adds	r0, #1
	str	r0, [sp, #8]
	b	.LBB3_24
.LBB3_24:                               @   in Loop: Header=BB3_22 Depth=1
	ldrh.w	r0, [sp, #2]
	adds	r0, #1
	strh.w	r0, [sp, #2]
	b	.LBB3_22
.LBB3_25:
	movw	r0, :lower16:ddm_adc_out_val
	movt	r0, :upper16:ddm_adc_out_val
	ldrh	r1, [r0]
	mov	r0, sp
	bl	set_u16
	movs	r0, #0
	strh.w	r0, [sp, #2]
	b	.LBB3_26
.LBB3_26:                               @ =>This Inner Loop Header: Depth=1
	ldrh.w	r0, [sp, #2]
	cmp	r0, #1
	bgt	.LBB3_29
	b	.LBB3_27
.LBB3_27:                               @   in Loop: Header=BB3_26 Depth=1
	ldrh.w	r1, [sp, #2]
	mov	r0, sp
	ldrb	r0, [r0, r1]
	ldr	r1, [sp, #8]
	strb	r0, [r1]
	ldr	r0, [sp, #8]
	adds	r0, #1
	str	r0, [sp, #8]
	b	.LBB3_28
.LBB3_28:                               @   in Loop: Header=BB3_26 Depth=1
	ldrh.w	r0, [sp, #2]
	adds	r0, #1
	strh.w	r0, [sp, #2]
	b	.LBB3_26
.LBB3_29:
	movw	r0, :lower16:ddm_adc_out_val
	movt	r0, :upper16:ddm_adc_out_val
	ldrh	r1, [r0, #10]
	mov	r0, sp
	bl	set_u16
	movs	r0, #0
	strh.w	r0, [sp, #2]
	b	.LBB3_30
.LBB3_30:                               @ =>This Inner Loop Header: Depth=1
	ldrh.w	r0, [sp, #2]
	cmp	r0, #1
	bgt	.LBB3_33
	b	.LBB3_31
.LBB3_31:                               @   in Loop: Header=BB3_30 Depth=1
	ldrh.w	r1, [sp, #2]
	mov	r0, sp
	ldrb	r0, [r0, r1]
	ldr	r1, [sp, #8]
	strb	r0, [r1]
	ldr	r0, [sp, #8]
	adds	r0, #1
	str	r0, [sp, #8]
	b	.LBB3_32
.LBB3_32:                               @   in Loop: Header=BB3_30 Depth=1
	ldrh.w	r0, [sp, #2]
	adds	r0, #1
	strh.w	r0, [sp, #2]
	b	.LBB3_30
.LBB3_33:
	movw	r0, :lower16:ddm_adc_out_val
	movt	r0, :upper16:ddm_adc_out_val
	ldrh	r1, [r0, #12]
	mov	r0, sp
	bl	set_u16
	movs	r0, #0
	strh.w	r0, [sp, #2]
	b	.LBB3_34
.LBB3_34:                               @ =>This Inner Loop Header: Depth=1
	ldrh.w	r0, [sp, #2]
	cmp	r0, #1
	bgt	.LBB3_37
	b	.LBB3_35
.LBB3_35:                               @   in Loop: Header=BB3_34 Depth=1
	ldrh.w	r1, [sp, #2]
	mov	r0, sp
	ldrb	r0, [r0, r1]
	ldr	r1, [sp, #8]
	strb	r0, [r1]
	ldr	r0, [sp, #8]
	adds	r0, #1
	str	r0, [sp, #8]
	b	.LBB3_36
.LBB3_36:                               @   in Loop: Header=BB3_34 Depth=1
	ldrh.w	r0, [sp, #2]
	adds	r0, #1
	strh.w	r0, [sp, #2]
	b	.LBB3_34
.LBB3_37:
	movw	r0, :lower16:ddm_adc_out_val
	movt	r0, :upper16:ddm_adc_out_val
	ldrh	r1, [r0, #14]
	mov	r0, sp
	bl	set_u16
	movs	r0, #0
	strh.w	r0, [sp, #2]
	b	.LBB3_38
.LBB3_38:                               @ =>This Inner Loop Header: Depth=1
	ldrh.w	r0, [sp, #2]
	cmp	r0, #1
	bgt	.LBB3_41
	b	.LBB3_39
.LBB3_39:                               @   in Loop: Header=BB3_38 Depth=1
	ldrh.w	r1, [sp, #2]
	mov	r0, sp
	ldrb	r0, [r0, r1]
	ldr	r1, [sp, #8]
	strb	r0, [r1]
	ldr	r0, [sp, #8]
	adds	r0, #1
	str	r0, [sp, #8]
	b	.LBB3_40
.LBB3_40:                               @   in Loop: Header=BB3_38 Depth=1
	ldrh.w	r0, [sp, #2]
	adds	r0, #1
	strh.w	r0, [sp, #2]
	b	.LBB3_38
.LBB3_41:
	movw	r0, :lower16:ddm_adc_out_val
	movt	r0, :upper16:ddm_adc_out_val
	ldrh	r1, [r0, #16]
	mov	r0, sp
	bl	set_u16
	movs	r0, #0
	strh.w	r0, [sp, #2]
	b	.LBB3_42
.LBB3_42:                               @ =>This Inner Loop Header: Depth=1
	ldrh.w	r0, [sp, #2]
	cmp	r0, #1
	bgt	.LBB3_45
	b	.LBB3_43
.LBB3_43:                               @   in Loop: Header=BB3_42 Depth=1
	ldrh.w	r1, [sp, #2]
	mov	r0, sp
	ldrb	r0, [r0, r1]
	ldr	r1, [sp, #8]
	strb	r0, [r1]
	ldr	r0, [sp, #8]
	adds	r0, #1
	str	r0, [sp, #8]
	b	.LBB3_44
.LBB3_44:                               @   in Loop: Header=BB3_42 Depth=1
	ldrh.w	r0, [sp, #2]
	adds	r0, #1
	strh.w	r0, [sp, #2]
	b	.LBB3_42
.LBB3_45:
	movw	r0, :lower16:ddm_adc_out_val
	movt	r0, :upper16:ddm_adc_out_val
	ldrh	r1, [r0]
	mov	r0, sp
	bl	set_u16
	movs	r0, #0
	strh.w	r0, [sp, #2]
	b	.LBB3_46
.LBB3_46:                               @ =>This Inner Loop Header: Depth=1
	ldrh.w	r0, [sp, #2]
	cmp	r0, #1
	bgt	.LBB3_49
	b	.LBB3_47
.LBB3_47:                               @   in Loop: Header=BB3_46 Depth=1
	ldrh.w	r1, [sp, #2]
	mov	r0, sp
	ldrb	r0, [r0, r1]
	ldr	r1, [sp, #8]
	strb	r0, [r1]
	ldr	r0, [sp, #8]
	adds	r0, #1
	str	r0, [sp, #8]
	b	.LBB3_48
.LBB3_48:                               @   in Loop: Header=BB3_46 Depth=1
	ldrh.w	r0, [sp, #2]
	adds	r0, #1
	strh.w	r0, [sp, #2]
	b	.LBB3_46
.LBB3_49:
	movw	r0, :lower16:ddm_adc_out_val
	movt	r0, :upper16:ddm_adc_out_val
	ldrh	r1, [r0, #18]
	mov	r0, sp
	bl	set_u16
	movs	r0, #0
	strh.w	r0, [sp, #2]
	b	.LBB3_50
.LBB3_50:                               @ =>This Inner Loop Header: Depth=1
	ldrh.w	r0, [sp, #2]
	cmp	r0, #1
	bgt	.LBB3_53
	b	.LBB3_51
.LBB3_51:                               @   in Loop: Header=BB3_50 Depth=1
	ldrh.w	r1, [sp, #2]
	mov	r0, sp
	ldrb	r0, [r0, r1]
	ldr	r1, [sp, #8]
	strb	r0, [r1]
	ldr	r0, [sp, #8]
	adds	r0, #1
	str	r0, [sp, #8]
	b	.LBB3_52
.LBB3_52:                               @   in Loop: Header=BB3_50 Depth=1
	ldrh.w	r0, [sp, #2]
	adds	r0, #1
	strh.w	r0, [sp, #2]
	b	.LBB3_50
.LBB3_53:
	movw	r0, :lower16:ddm_adc_out_val
	movt	r0, :upper16:ddm_adc_out_val
	ldrh	r1, [r0, #20]
	mov	r0, sp
	bl	set_u16
	movs	r0, #0
	strh.w	r0, [sp, #2]
	b	.LBB3_54
.LBB3_54:                               @ =>This Inner Loop Header: Depth=1
	ldrh.w	r0, [sp, #2]
	cmp	r0, #1
	bgt	.LBB3_57
	b	.LBB3_55
.LBB3_55:                               @   in Loop: Header=BB3_54 Depth=1
	ldrh.w	r1, [sp, #2]
	mov	r0, sp
	ldrb	r0, [r0, r1]
	ldr	r1, [sp, #8]
	strb	r0, [r1]
	ldr	r0, [sp, #8]
	adds	r0, #1
	str	r0, [sp, #8]
	b	.LBB3_56
.LBB3_56:                               @   in Loop: Header=BB3_54 Depth=1
	ldrh.w	r0, [sp, #2]
	adds	r0, #1
	strh.w	r0, [sp, #2]
	b	.LBB3_54
.LBB3_57:
	movw	r0, :lower16:ddm_adc_out_val
	movt	r0, :upper16:ddm_adc_out_val
	ldrh	r1, [r0, #22]
	mov	r0, sp
	bl	set_u16
	movs	r0, #0
	strh.w	r0, [sp, #2]
	b	.LBB3_58
.LBB3_58:                               @ =>This Inner Loop Header: Depth=1
	ldrh.w	r0, [sp, #2]
	cmp	r0, #1
	bgt	.LBB3_61
	b	.LBB3_59
.LBB3_59:                               @   in Loop: Header=BB3_58 Depth=1
	ldrh.w	r1, [sp, #2]
	mov	r0, sp
	ldrb	r0, [r0, r1]
	ldr	r1, [sp, #8]
	strb	r0, [r1]
	ldr	r0, [sp, #8]
	adds	r0, #1
	str	r0, [sp, #8]
	b	.LBB3_60
.LBB3_60:                               @   in Loop: Header=BB3_58 Depth=1
	ldrh.w	r0, [sp, #2]
	adds	r0, #1
	strh.w	r0, [sp, #2]
	b	.LBB3_58
.LBB3_61:
	movw	r0, :lower16:ddm_adc_out_val
	movt	r0, :upper16:ddm_adc_out_val
	ldrh	r1, [r0, #24]
	mov	r0, sp
	bl	set_u16
	movs	r0, #0
	strh.w	r0, [sp, #2]
	b	.LBB3_62
.LBB3_62:                               @ =>This Inner Loop Header: Depth=1
	ldrh.w	r0, [sp, #2]
	cmp	r0, #1
	bgt	.LBB3_65
	b	.LBB3_63
.LBB3_63:                               @   in Loop: Header=BB3_62 Depth=1
	ldrh.w	r1, [sp, #2]
	mov	r0, sp
	ldrb	r0, [r0, r1]
	ldr	r1, [sp, #8]
	strb	r0, [r1]
	ldr	r0, [sp, #8]
	adds	r0, #1
	str	r0, [sp, #8]
	b	.LBB3_64
.LBB3_64:                               @   in Loop: Header=BB3_62 Depth=1
	ldrh.w	r0, [sp, #2]
	adds	r0, #1
	strh.w	r0, [sp, #2]
	b	.LBB3_62
.LBB3_65:
	add	sp, #16
	pop	{r7, pc}
.Lfunc_end3:
	.size	om_cmd_ddm_read_reg_byte, .Lfunc_end3-om_cmd_ddm_read_reg_byte
	.cfi_endproc
	.cantunwind
	.fnend
                                        @ -- End function
	.section	.text.om_v2_memory_read_reg_byte,"ax",%progbits
	.hidden	om_v2_memory_read_reg_byte      @ -- Begin function om_v2_memory_read_reg_byte
	.globl	om_v2_memory_read_reg_byte
	.p2align	2
	.type	om_v2_memory_read_reg_byte,%function
	.code	16                              @ @om_v2_memory_read_reg_byte
	.thumb_func
om_v2_memory_read_reg_byte:
	.fnstart
	.cfi_startproc
@ %bb.0:
	.pad	#32
	sub	sp, #32
	.cfi_def_cfa_offset 32
	str	r0, [sp, #28]
	str	r1, [sp, #24]
	str	r2, [sp, #20]
	movs	r0, #0
	str	r0, [sp, #8]
	strb.w	r0, [sp, #7]
	str	r0, [sp]
	ldr	r0, [sp, #28]
	cbz	r0, .LBB4_2
	b	.LBB4_1
.LBB4_1:
	ldr	r0, [sp, #24]
	cbnz	r0, .LBB4_3
	b	.LBB4_2
.LBB4_2:
	b	.LBB4_47
.LBB4_3:
	ldr	r0, [sp, #28]
	ldrb	r0, [r0]
	cmp	r0, #1
	beq	.LBB4_5
	b	.LBB4_4
.LBB4_4:
	b	.LBB4_47
.LBB4_5:
	ldr	r0, [sp, #28]
	ldr	r0, [r0, #4]
	str	r0, [sp, #8]
	ldr	r0, [sp, #28]
	ldrb	r0, [r0, #8]
	strb.w	r0, [sp, #7]
	ldrb.w	r0, [sp, #7]
	eor	r0, r0, #255
	str	r0, [sp]
	ldr	r0, [sp, #8]
	cmp	r0, #208
	bne	.LBB4_11
	b	.LBB4_6
.LBB4_6:
	ldrb.w	r0, [sp, #7]
	str	r0, [sp, #16]
	movs	r0, #0
	strh.w	r0, [sp, #14]
	b	.LBB4_7
.LBB4_7:                                @ =>This Inner Loop Header: Depth=1
	ldrh.w	r0, [sp, #14]
	ldr	r1, [sp]
	cmp	r0, r1
	bhs	.LBB4_10
	b	.LBB4_8
.LBB4_8:                                @   in Loop: Header=BB4_7 Depth=1
	ldr	r0, [sp, #16]
	ldrh.w	r1, [sp, #14]
	add	r1, r0
	movw	r0, :lower16:a0
	movt	r0, :upper16:a0
	ldrb	r0, [r0, r1]
	ldr	r1, [sp, #24]
	strb	r0, [r1]
	ldr	r0, [sp, #24]
	adds	r0, #1
	str	r0, [sp, #24]
	b	.LBB4_9
.LBB4_9:                                @   in Loop: Header=BB4_7 Depth=1
	ldrh.w	r0, [sp, #14]
	adds	r0, #1
	strh.w	r0, [sp, #14]
	b	.LBB4_7
.LBB4_10:
	b	.LBB4_46
.LBB4_11:
	ldr	r0, [sp, #8]
	cmp	r0, #210
	bne	.LBB4_17
	b	.LBB4_12
.LBB4_12:
	ldrb.w	r0, [sp, #7]
	str	r0, [sp, #16]
	movs	r0, #0
	strh.w	r0, [sp, #14]
	b	.LBB4_13
.LBB4_13:                               @ =>This Inner Loop Header: Depth=1
	ldrh.w	r0, [sp, #14]
	ldr	r1, [sp]
	cmp	r0, r1
	bhs	.LBB4_16
	b	.LBB4_14
.LBB4_14:                               @   in Loop: Header=BB4_13 Depth=1
	ldr	r0, [sp, #16]
	ldrh.w	r1, [sp, #14]
	add	r1, r0
	movw	r0, :lower16:a2
	movt	r0, :upper16:a2
	ldrb	r0, [r0, r1]
	ldr	r1, [sp, #24]
	strb	r0, [r1]
	ldr	r0, [sp, #24]
	adds	r0, #1
	str	r0, [sp, #24]
	b	.LBB4_15
.LBB4_15:                               @   in Loop: Header=BB4_13 Depth=1
	ldrh.w	r0, [sp, #14]
	adds	r0, #1
	strh.w	r0, [sp, #14]
	b	.LBB4_13
.LBB4_16:
	b	.LBB4_45
.LBB4_17:
	ldr	r0, [sp, #8]
	cmp	r0, #224
	bne	.LBB4_23
	b	.LBB4_18
.LBB4_18:
	ldrb.w	r0, [sp, #7]
	str	r0, [sp, #16]
	movs	r0, #0
	strh.w	r0, [sp, #14]
	b	.LBB4_19
.LBB4_19:                               @ =>This Inner Loop Header: Depth=1
	ldrh.w	r0, [sp, #14]
	ldr	r1, [sp]
	cmp	r0, r1
	bhs	.LBB4_22
	b	.LBB4_20
.LBB4_20:                               @   in Loop: Header=BB4_19 Depth=1
	ldr	r0, [sp, #16]
	ldrh.w	r1, [sp, #14]
	add	r1, r0
	movw	r0, :lower16:b0
	movt	r0, :upper16:b0
	ldrb	r0, [r0, r1]
	ldr	r1, [sp, #24]
	strb	r0, [r1]
	ldr	r0, [sp, #24]
	adds	r0, #1
	str	r0, [sp, #24]
	b	.LBB4_21
.LBB4_21:                               @   in Loop: Header=BB4_19 Depth=1
	ldrh.w	r0, [sp, #14]
	adds	r0, #1
	strh.w	r0, [sp, #14]
	b	.LBB4_19
.LBB4_22:
	b	.LBB4_44
.LBB4_23:
	ldr	r0, [sp, #8]
	cmp	r0, #226
	bne	.LBB4_29
	b	.LBB4_24
.LBB4_24:
	ldrb.w	r0, [sp, #7]
	str	r0, [sp, #16]
	movs	r0, #0
	strh.w	r0, [sp, #14]
	b	.LBB4_25
.LBB4_25:                               @ =>This Inner Loop Header: Depth=1
	ldrh.w	r0, [sp, #14]
	ldr	r1, [sp]
	cmp	r0, r1
	bhs	.LBB4_28
	b	.LBB4_26
.LBB4_26:                               @   in Loop: Header=BB4_25 Depth=1
	ldr	r0, [sp, #16]
	ldrh.w	r1, [sp, #14]
	add	r1, r0
	movw	r0, :lower16:b2
	movt	r0, :upper16:b2
	ldrb	r0, [r0, r1]
	ldr	r1, [sp, #24]
	strb	r0, [r1]
	ldr	r0, [sp, #24]
	adds	r0, #1
	str	r0, [sp, #24]
	b	.LBB4_27
.LBB4_27:                               @   in Loop: Header=BB4_25 Depth=1
	ldrh.w	r0, [sp, #14]
	adds	r0, #1
	strh.w	r0, [sp, #14]
	b	.LBB4_25
.LBB4_28:
	b	.LBB4_43
.LBB4_29:
	ldr	r0, [sp, #8]
	cmp	r0, #240
	bne	.LBB4_35
	b	.LBB4_30
.LBB4_30:
	ldrb.w	r0, [sp, #7]
	str	r0, [sp, #16]
	movs	r0, #0
	strh.w	r0, [sp, #14]
	b	.LBB4_31
.LBB4_31:                               @ =>This Inner Loop Header: Depth=1
	ldrh.w	r0, [sp, #14]
	ldr	r1, [sp]
	cmp	r0, r1
	bhs	.LBB4_34
	b	.LBB4_32
.LBB4_32:                               @   in Loop: Header=BB4_31 Depth=1
	ldr	r0, [sp, #16]
	ldrh.w	r1, [sp, #14]
	add	r1, r0
	movw	r0, :lower16:c0
	movt	r0, :upper16:c0
	ldrb	r0, [r0, r1]
	ldr	r1, [sp, #24]
	strb	r0, [r1]
	ldr	r0, [sp, #24]
	adds	r0, #1
	str	r0, [sp, #24]
	b	.LBB4_33
.LBB4_33:                               @   in Loop: Header=BB4_31 Depth=1
	ldrh.w	r0, [sp, #14]
	adds	r0, #1
	strh.w	r0, [sp, #14]
	b	.LBB4_31
.LBB4_34:
	b	.LBB4_42
.LBB4_35:
	ldr	r0, [sp, #8]
	cmp	r0, #232
	bne	.LBB4_41
	b	.LBB4_36
.LBB4_36:
	ldrb.w	r0, [sp, #7]
	str	r0, [sp, #16]
	movs	r0, #0
	strh.w	r0, [sp, #14]
	b	.LBB4_37
.LBB4_37:                               @ =>This Inner Loop Header: Depth=1
	ldrh.w	r0, [sp, #14]
	ldr	r1, [sp]
	cmp	r0, r1
	bhs	.LBB4_40
	b	.LBB4_38
.LBB4_38:                               @   in Loop: Header=BB4_37 Depth=1
	ldr	r0, [sp, #16]
	ldrh.w	r1, [sp, #14]
	add	r1, r0
	movw	r0, :lower16:c2
	movt	r0, :upper16:c2
	ldrb	r0, [r0, r1]
	ldr	r1, [sp, #24]
	strb	r0, [r1]
	ldr	r0, [sp, #24]
	adds	r0, #1
	str	r0, [sp, #24]
	b	.LBB4_39
.LBB4_39:                               @   in Loop: Header=BB4_37 Depth=1
	ldrh.w	r0, [sp, #14]
	adds	r0, #1
	strh.w	r0, [sp, #14]
	b	.LBB4_37
.LBB4_40:
	b	.LBB4_41
.LBB4_41:
	b	.LBB4_42
.LBB4_42:
	b	.LBB4_43
.LBB4_43:
	b	.LBB4_44
.LBB4_44:
	b	.LBB4_45
.LBB4_45:
	b	.LBB4_46
.LBB4_46:
	b	.LBB4_47
.LBB4_47:
	add	sp, #32
	bx	lr
.Lfunc_end4:
	.size	om_v2_memory_read_reg_byte, .Lfunc_end4-om_v2_memory_read_reg_byte
	.cfi_endproc
	.cantunwind
	.fnend
                                        @ -- End function
	.section	.text.om_save_data_config_flash_write,"ax",%progbits
	.hidden	om_save_data_config_flash_write @ -- Begin function om_save_data_config_flash_write
	.globl	om_save_data_config_flash_write
	.p2align	2
	.type	om_save_data_config_flash_write,%function
	.code	16                              @ @om_save_data_config_flash_write
	.thumb_func
om_save_data_config_flash_write:
	.fnstart
	.cfi_startproc
@ %bb.0:
	.save	{r7, lr}
	push	{r7, lr}
	.cfi_def_cfa_offset 8
	.cfi_offset lr, -4
	.cfi_offset r7, -8
	.pad	#16
	sub	sp, #16
	.cfi_def_cfa_offset 24
	str	r0, [sp, #12]
	str	r1, [sp, #8]
	ldr	r0, [sp, #12]
	cbz	r0, .LBB5_2
	b	.LBB5_1
.LBB5_1:
	ldr	r0, [sp, #8]
	cmp	r0, #1
	bhi	.LBB5_3
	b	.LBB5_2
.LBB5_2:
	b	.LBB5_7
.LBB5_3:
	ldr	r0, [sp, #12]
	ldrb	r0, [r0, #1]
	cbnz	r0, .LBB5_5
	b	.LBB5_4
.LBB5_4:
	ldr	r0, [sp, #12]
	ldrb	r0, [r0]
	cmp	r0, #28
	beq	.LBB5_6
	b	.LBB5_5
.LBB5_5:
	b	.LBB5_7
.LBB5_6:
	movw	r0, #18432
	movt	r0, #2054
	str	r0, [sp, #4]                    @ 4-byte Spill
	bl	fmc_erase_single_page
	ldr	r1, [sp, #4]                    @ 4-byte Reload
	movw	r0, :lower16:default_config_value
	movt	r0, :upper16:default_config_value
	movs	r2, #120
	bl	flash_write
	b	.LBB5_7
.LBB5_7:
	add	sp, #16
	pop	{r7, pc}
.Lfunc_end5:
	.size	om_save_data_config_flash_write, .Lfunc_end5-om_save_data_config_flash_write
	.cfi_endproc
	.cantunwind
	.fnend
                                        @ -- End function
	.section	.text.om_erase_data_config_flash_write,"ax",%progbits
	.hidden	om_erase_data_config_flash_write @ -- Begin function om_erase_data_config_flash_write
	.globl	om_erase_data_config_flash_write
	.p2align	2
	.type	om_erase_data_config_flash_write,%function
	.code	16                              @ @om_erase_data_config_flash_write
	.thumb_func
om_erase_data_config_flash_write:
	.fnstart
	.cfi_startproc
@ %bb.0:
	.save	{r7, lr}
	push	{r7, lr}
	.cfi_def_cfa_offset 8
	.cfi_offset lr, -4
	.cfi_offset r7, -8
	.pad	#8
	sub	sp, #8
	.cfi_def_cfa_offset 16
	str	r0, [sp, #4]
	str	r1, [sp]
	ldr	r0, [sp, #4]
	cbz	r0, .LBB6_2
	b	.LBB6_1
.LBB6_1:
	ldr	r0, [sp]
	cmp	r0, #1
	bhi	.LBB6_3
	b	.LBB6_2
.LBB6_2:
	b	.LBB6_7
.LBB6_3:
	ldr	r0, [sp, #4]
	ldrb	r0, [r0, #1]
	cmp	r0, #1
	bne	.LBB6_5
	b	.LBB6_4
.LBB6_4:
	ldr	r0, [sp, #4]
	ldrb	r0, [r0]
	cmp	r0, #28
	beq	.LBB6_6
	b	.LBB6_5
.LBB6_5:
	b	.LBB6_7
.LBB6_6:
	movw	r0, #18432
	movt	r0, #2054
	bl	fmc_erase_single_page
	b	.LBB6_7
.LBB6_7:
	add	sp, #8
	pop	{r7, pc}
.Lfunc_end6:
	.size	om_erase_data_config_flash_write, .Lfunc_end6-om_erase_data_config_flash_write
	.cfi_endproc
	.cantunwind
	.fnend
                                        @ -- End function
	.section	.text.cfg_v2_flash_read_reg_byte,"ax",%progbits
	.hidden	cfg_v2_flash_read_reg_byte      @ -- Begin function cfg_v2_flash_read_reg_byte
	.globl	cfg_v2_flash_read_reg_byte
	.p2align	2
	.type	cfg_v2_flash_read_reg_byte,%function
	.code	16                              @ @cfg_v2_flash_read_reg_byte
	.thumb_func
cfg_v2_flash_read_reg_byte:
	.fnstart
	.cfi_startproc
@ %bb.0:
	.save	{r7, lr}
	push	{r7, lr}
	.cfi_def_cfa_offset 8
	.cfi_offset lr, -4
	.cfi_offset r7, -8
	.pad	#32
	sub	sp, #32
	.cfi_def_cfa_offset 40
	str	r0, [sp, #28]
	str	r1, [sp, #24]
	str	r2, [sp, #20]
	movs	r0, #0
	str	r0, [sp, #16]
	strh.w	r0, [sp, #14]
	str	r0, [sp, #8]
	strb.w	r0, [sp, #7]
	str	r0, [sp]
	ldr	r0, [sp, #28]
	cbz	r0, .LBB7_2
	b	.LBB7_1
.LBB7_1:
	ldr	r0, [sp, #24]
	cbnz	r0, .LBB7_3
	b	.LBB7_2
.LBB7_2:
	b	.LBB7_10
.LBB7_3:
	ldr	r0, [sp, #28]
	ldrb	r0, [r0]
	cmp	r0, #1
	beq	.LBB7_5
	b	.LBB7_4
.LBB7_4:
	b	.LBB7_10
.LBB7_5:
	ldr	r0, [sp, #28]
	ldr	r0, [r0, #4]
	str	r0, [sp, #8]
	ldr	r0, [sp, #28]
	ldrb	r0, [r0, #8]
	strb.w	r0, [sp, #7]
	ldrb.w	r0, [sp, #7]
	rsb.w	r0, r0, #256
	str	r0, [sp]
	ldr	r0, [sp]
	cmp.w	r0, #256
	bls	.LBB7_7
	b	.LBB7_6
.LBB7_6:
	mov.w	r0, #256
	str	r0, [sp]
	b	.LBB7_7
.LBB7_7:
	ldr	r0, [sp, #8]
	cmp	r0, #168
	bne	.LBB7_9
	b	.LBB7_8
.LBB7_8:
	ldrb.w	r0, [sp, #7]
	movw	r1, #18432
	movt	r1, #2054
	orrs	r0, r1
	str	r0, [sp, #16]
	ldr	r0, [sp, #24]
	ldr	r1, [sp, #16]
	ldrh.w	r2, [sp]
	bl	flash_read
	b	.LBB7_9
.LBB7_9:
	b	.LBB7_10
.LBB7_10:
	add	sp, #32
	pop	{r7, pc}
.Lfunc_end7:
	.size	cfg_v2_flash_read_reg_byte, .Lfunc_end7-cfg_v2_flash_read_reg_byte
	.cfi_endproc
	.cantunwind
	.fnend
                                        @ -- End function
	.section	.text.cmd_common_reg_read,"ax",%progbits
	.hidden	cmd_common_reg_read             @ -- Begin function cmd_common_reg_read
	.globl	cmd_common_reg_read
	.p2align	2
	.type	cmd_common_reg_read,%function
	.code	16                              @ @cmd_common_reg_read
	.thumb_func
cmd_common_reg_read:
	.fnstart
	.cfi_startproc
@ %bb.0:
	.pad	#12
	sub	sp, #12
	.cfi_def_cfa_offset 12
                                        @ kill: def $r3 killed $r0
	strb.w	r0, [sp, #11]
	str	r1, [sp, #4]
	str	r2, [sp]
	ldrb.w	r0, [sp, #11]
	cmp	r0, #39
	beq	.LBB8_2
	b	.LBB8_1
.LBB8_1:
	b	.LBB8_5
.LBB8_2:
	ldr	r0, [sp, #4]
	cbnz	r0, .LBB8_4
	b	.LBB8_3
.LBB8_3:
	b	.LBB8_5
.LBB8_4:
	ldr	r1, [sp, #4]
	movs	r0, #120
	strb	r0, [r1]
	b	.LBB8_5
.LBB8_5:
	add	sp, #12
	bx	lr
.Lfunc_end8:
	.size	cmd_common_reg_read, .Lfunc_end8-cmd_common_reg_read
	.cfi_endproc
	.cantunwind
	.fnend
                                        @ -- End function
	.ident	"Component: Arm Compiler for Embedded 6.19 Tool: armclang [5e73cb00]"
	.section	".note.GNU-stack","",%progbits
	.eabi_attribute	30, 6	@ Tag_ABI_optimization_goals
	.ARM_attribute	16, 1	@ Tag_AV_eba
