	.text
	.syntax unified
	.eabi_attribute	67, "2.09"	@ Tag_conformance
	.cpu	cortex-m33
	.eabi_attribute	6, 17	@ Tag_CPU_arch
	.eabi_attribute	7, 77	@ Tag_CPU_arch_profile
	.eabi_attribute	8, 0	@ Tag_ARM_ISA_use
	.eabi_attribute	9, 3	@ Tag_THUMB_ISA_use
	.fpu	fpv5-sp-d16
	.eabi_attribute	27, 1	@ Tag_ABI_HardFP_use
	.eabi_attribute	36, 1	@ Tag_FP_HP_extension
	.eabi_attribute	34, 1	@ Tag_CPU_unaligned_access
	.eabi_attribute	17, 1	@ Tag_ABI_PCS_GOT_use
	.eabi_attribute	20, 2	@ Tag_ABI_FP_denormal
	.eabi_attribute	21, 0	@ Tag_ABI_FP_exceptions
	.eabi_attribute	23, 1	@ Tag_ABI_FP_number_model
	.eabi_attribute	24, 1	@ Tag_ABI_align_needed
	.eabi_attribute	25, 1	@ Tag_ABI_align_preserved
	.eabi_attribute	28, 1	@ Tag_ABI_VFP_args
	.eabi_attribute	38, 1	@ Tag_ABI_FP_16bit_format
	.eabi_attribute	18, 2	@ Tag_ABI_PCS_wchar_t
	.eabi_attribute	26, 1	@ Tag_ABI_enum_size
	.eabi_attribute	14, 0	@ Tag_ABI_PCS_R9_use
	.file	"i2c_comm.c"
	.section	.text.i2c_config_init,"ax",%progbits
	.hidden	i2c_config_init                 @ -- Begin function i2c_config_init
	.globl	i2c_config_init
	.p2align	2
	.type	i2c_config_init,%function
	.code	16                              @ @i2c_config_init
	.thumb_func
i2c_config_init:
	.fnstart
	.cfi_sections .debug_frame
	.cfi_startproc
@ %bb.0:
	.save	{r7, lr}
	push	{r7, lr}
	.cfi_def_cfa_offset 8
	.cfi_offset lr, -4
	.cfi_offset r7, -8
	bl	i2c_global_param_init
	movw	r0, :lower16:g_mcu_addr0xspec_reg_write_callback_array
	movt	r0, :upper16:g_mcu_addr0xspec_reg_write_callback_array
	mov.w	r1, #352
	bl	__aeabi_memclr4
	bl	gpio_slave_i2c_config_init
	bl	gpio_master_i2c_config_init
	bl	user_optical_pwd_limit_init
	bl	slave_i2c_config_init
	bl	master_i2c_config_init
	pop	{r7, pc}
.Lfunc_end0:
	.size	i2c_config_init, .Lfunc_end0-i2c_config_init
	.cfi_endproc
	.cantunwind
	.fnend
                                        @ -- End function
	.section	.text.mcu_register_reg_addr_write_callback,"ax",%progbits
	.hidden	mcu_register_reg_addr_write_callback @ -- Begin function mcu_register_reg_addr_write_callback
	.globl	mcu_register_reg_addr_write_callback
	.p2align	2
	.type	mcu_register_reg_addr_write_callback,%function
	.code	16                              @ @mcu_register_reg_addr_write_callback
	.thumb_func
mcu_register_reg_addr_write_callback:
	.fnstart
	.cfi_startproc
@ %bb.0:
	.pad	#12
	sub	sp, #12
	.cfi_def_cfa_offset 12
                                        @ kill: def $r2 killed $r0
	strb.w	r0, [sp, #11]
	str	r1, [sp, #4]
	movs	r0, #0
	str	r0, [sp]
	str	r0, [sp]
	b	.LBB1_1
.LBB1_1:                                @ =>This Inner Loop Header: Depth=1
	ldr	r0, [sp]
	movw	r1, :lower16:g_mcu_addr0xspec_reg_write_idx
	movt	r1, :upper16:g_mcu_addr0xspec_reg_write_idx
	ldr	r1, [r1]
	cmp	r0, r1
	bhs	.LBB1_6
	b	.LBB1_2
.LBB1_2:                                @   in Loop: Header=BB1_1 Depth=1
	ldrb.w	r0, [sp, #11]
	ldr	r2, [sp]
	movw	r1, :lower16:g_mcu_addr0xspec_reg_write_callback_array
	movt	r1, :upper16:g_mcu_addr0xspec_reg_write_callback_array
	ldrb.w	r1, [r1, r2, lsl #3]
	cmp	r0, r1
	bne	.LBB1_4
	b	.LBB1_3
.LBB1_3:
	b	.LBB1_9
.LBB1_4:                                @   in Loop: Header=BB1_1 Depth=1
	b	.LBB1_5
.LBB1_5:                                @   in Loop: Header=BB1_1 Depth=1
	ldr	r0, [sp]
	adds	r0, #1
	str	r0, [sp]
	b	.LBB1_1
.LBB1_6:
	movw	r0, :lower16:g_mcu_addr0xspec_reg_write_idx
	movt	r0, :upper16:g_mcu_addr0xspec_reg_write_idx
	ldr	r0, [r0]
	cmp	r0, #43
	bhi	.LBB1_8
	b	.LBB1_7
.LBB1_7:
	ldr	r0, [sp, #4]
	movw	r1, :lower16:g_mcu_addr0xspec_reg_write_idx
	movt	r1, :upper16:g_mcu_addr0xspec_reg_write_idx
	ldr	r3, [r1]
	movw	r2, :lower16:g_mcu_addr0xspec_reg_write_callback_array
	movt	r2, :upper16:g_mcu_addr0xspec_reg_write_callback_array
	add.w	r3, r2, r3, lsl #3
	str	r0, [r3, #4]
	ldrb.w	r0, [sp, #11]
	ldr	r3, [r1]
	strb.w	r0, [r2, r3, lsl #3]
	ldr	r0, [r1]
	adds	r0, #1
	str	r0, [r1]
	b	.LBB1_8
.LBB1_8:
	b	.LBB1_9
.LBB1_9:
	add	sp, #12
	bx	lr
.Lfunc_end1:
	.size	mcu_register_reg_addr_write_callback, .Lfunc_end1-mcu_register_reg_addr_write_callback
	.cfi_endproc
	.cantunwind
	.fnend
                                        @ -- End function
	.section	.text.mcu_register_reg_addr_read_callback,"ax",%progbits
	.hidden	mcu_register_reg_addr_read_callback @ -- Begin function mcu_register_reg_addr_read_callback
	.globl	mcu_register_reg_addr_read_callback
	.p2align	2
	.type	mcu_register_reg_addr_read_callback,%function
	.code	16                              @ @mcu_register_reg_addr_read_callback
	.thumb_func
mcu_register_reg_addr_read_callback:
	.fnstart
	.cfi_startproc
@ %bb.0:
	.pad	#12
	sub	sp, #12
	.cfi_def_cfa_offset 12
                                        @ kill: def $r2 killed $r0
	strb.w	r0, [sp, #11]
	str	r1, [sp, #4]
	movs	r0, #0
	str	r0, [sp]
	str	r0, [sp]
	b	.LBB2_1
.LBB2_1:                                @ =>This Inner Loop Header: Depth=1
	ldr	r0, [sp]
	movw	r1, :lower16:g_mcu_addr0xspec_reg_read_idx
	movt	r1, :upper16:g_mcu_addr0xspec_reg_read_idx
	ldr	r1, [r1]
	cmp	r0, r1
	bhs	.LBB2_6
	b	.LBB2_2
.LBB2_2:                                @   in Loop: Header=BB2_1 Depth=1
	ldrb.w	r0, [sp, #11]
	ldr	r2, [sp]
	movw	r1, :lower16:g_mcu_addr0xspec_reg_read_callback_array
	movt	r1, :upper16:g_mcu_addr0xspec_reg_read_callback_array
	ldrb.w	r1, [r1, r2, lsl #3]
	cmp	r0, r1
	bne	.LBB2_4
	b	.LBB2_3
.LBB2_3:
	b	.LBB2_9
.LBB2_4:                                @   in Loop: Header=BB2_1 Depth=1
	b	.LBB2_5
.LBB2_5:                                @   in Loop: Header=BB2_1 Depth=1
	ldr	r0, [sp]
	adds	r0, #1
	str	r0, [sp]
	b	.LBB2_1
.LBB2_6:
	movw	r0, :lower16:g_mcu_addr0xspec_reg_read_idx
	movt	r0, :upper16:g_mcu_addr0xspec_reg_read_idx
	ldr	r0, [r0]
	cmp	r0, #43
	bhi	.LBB2_8
	b	.LBB2_7
.LBB2_7:
	ldr	r0, [sp, #4]
	movw	r1, :lower16:g_mcu_addr0xspec_reg_read_idx
	movt	r1, :upper16:g_mcu_addr0xspec_reg_read_idx
	ldr	r3, [r1]
	movw	r2, :lower16:g_mcu_addr0xspec_reg_read_callback_array
	movt	r2, :upper16:g_mcu_addr0xspec_reg_read_callback_array
	add.w	r3, r2, r3, lsl #3
	str	r0, [r3, #4]
	ldrb.w	r0, [sp, #11]
	ldr	r3, [r1]
	strb.w	r0, [r2, r3, lsl #3]
	ldr	r0, [r1]
	adds	r0, #1
	str	r0, [r1]
	b	.LBB2_8
.LBB2_8:
	b	.LBB2_9
.LBB2_9:
	add	sp, #12
	bx	lr
.Lfunc_end2:
	.size	mcu_register_reg_addr_read_callback, .Lfunc_end2-mcu_register_reg_addr_read_callback
	.cfi_endproc
	.cantunwind
	.fnend
                                        @ -- End function
	.section	.text.mcu_addr0xspec_reg_byte_write,"ax",%progbits
	.hidden	mcu_addr0xspec_reg_byte_write   @ -- Begin function mcu_addr0xspec_reg_byte_write
	.globl	mcu_addr0xspec_reg_byte_write
	.p2align	2
	.type	mcu_addr0xspec_reg_byte_write,%function
	.code	16                              @ @mcu_addr0xspec_reg_byte_write
	.thumb_func
mcu_addr0xspec_reg_byte_write:
	.fnstart
	.cfi_startproc
@ %bb.0:
	.save	{r7, lr}
	push	{r7, lr}
	.cfi_def_cfa_offset 8
	.cfi_offset lr, -4
	.cfi_offset r7, -8
	.pad	#24
	sub	sp, #24
	.cfi_def_cfa_offset 32
	str	r0, [sp, #20]
	str	r1, [sp, #16]
	str	r2, [sp, #12]
	movs	r0, #0
	strb.w	r0, [sp, #11]
	str	r0, [sp, #4]
	ldr	r0, [sp, #20]
	cmp	r0, #206
	beq	.LBB3_2
	b	.LBB3_1
.LBB3_1:
	b	.LBB3_14
.LBB3_2:
	ldr	r0, [sp, #16]
	cbz	r0, .LBB3_4
	b	.LBB3_3
.LBB3_3:
	ldr	r0, [sp, #12]
	cmp	r0, #1
	bhi	.LBB3_5
	b	.LBB3_4
.LBB3_4:
	b	.LBB3_14
.LBB3_5:
	ldr	r0, [sp, #16]
	ldrb	r1, [r0]
	ldrb.w	r0, [sp, #11]
	orrs	r0, r1
	strb.w	r0, [sp, #11]
	movs	r0, #0
	str	r0, [sp, #4]
	b	.LBB3_6
.LBB3_6:                                @ =>This Inner Loop Header: Depth=1
	ldr	r0, [sp, #4]
	movw	r1, :lower16:g_mcu_addr0xspec_reg_write_idx
	movt	r1, :upper16:g_mcu_addr0xspec_reg_write_idx
	ldr	r1, [r1]
	cmp	r0, r1
	bhs	.LBB3_11
	b	.LBB3_7
.LBB3_7:                                @   in Loop: Header=BB3_6 Depth=1
	ldrb.w	r0, [sp, #11]
	ldr	r2, [sp, #4]
	movw	r1, :lower16:g_mcu_addr0xspec_reg_write_callback_array
	movt	r1, :upper16:g_mcu_addr0xspec_reg_write_callback_array
	ldrb.w	r1, [r1, r2, lsl #3]
	cmp	r0, r1
	bne	.LBB3_9
	b	.LBB3_8
.LBB3_8:
	b	.LBB3_11
.LBB3_9:                                @   in Loop: Header=BB3_6 Depth=1
	b	.LBB3_10
.LBB3_10:                               @   in Loop: Header=BB3_6 Depth=1
	ldr	r0, [sp, #4]
	adds	r0, #1
	str	r0, [sp, #4]
	b	.LBB3_6
.LBB3_11:
	ldr	r0, [sp, #4]
	movw	r1, :lower16:g_mcu_addr0xspec_reg_write_idx
	movt	r1, :upper16:g_mcu_addr0xspec_reg_write_idx
	ldr	r1, [r1]
	cmp	r0, r1
	bhs	.LBB3_13
	b	.LBB3_12
.LBB3_12:
	ldr	r1, [sp, #4]
	movw	r0, :lower16:g_mcu_addr0xspec_reg_write_callback_array
	movt	r0, :upper16:g_mcu_addr0xspec_reg_write_callback_array
	add.w	r0, r0, r1, lsl #3
	ldr	r2, [r0, #4]
	ldr	r0, [sp, #16]
	ldr	r1, [sp, #12]
	blx	r2
	b	.LBB3_13
.LBB3_13:
	b	.LBB3_14
.LBB3_14:
	add	sp, #24
	pop	{r7, pc}
.Lfunc_end3:
	.size	mcu_addr0xspec_reg_byte_write, .Lfunc_end3-mcu_addr0xspec_reg_byte_write
	.cfi_endproc
	.cantunwind
	.fnend
                                        @ -- End function
	.section	.text.mcu_addr0xspec_1byte_reg_byte_read,"ax",%progbits
	.hidden	mcu_addr0xspec_1byte_reg_byte_read @ -- Begin function mcu_addr0xspec_1byte_reg_byte_read
	.globl	mcu_addr0xspec_1byte_reg_byte_read
	.p2align	2
	.type	mcu_addr0xspec_1byte_reg_byte_read,%function
	.code	16                              @ @mcu_addr0xspec_1byte_reg_byte_read
	.thumb_func
mcu_addr0xspec_1byte_reg_byte_read:
	.fnstart
	.cfi_startproc
@ %bb.0:
	.save	{r7, lr}
	push	{r7, lr}
	.cfi_def_cfa_offset 8
	.cfi_offset lr, -4
	.cfi_offset r7, -8
	.pad	#24
	sub	sp, #24
	.cfi_def_cfa_offset 32
                                        @ kill: def $r12 killed $r1
	str	r0, [sp, #20]
	strb.w	r1, [sp, #19]
	str	r2, [sp, #12]
	str	r3, [sp, #8]
	movs	r0, #0
	str	r0, [sp, #4]
	ldr	r0, [sp, #20]
	cmp	r0, #206
	beq	.LBB4_2
	b	.LBB4_1
.LBB4_1:
	b	.LBB4_12
.LBB4_2:
	ldr	r0, [sp, #12]
	cbnz	r0, .LBB4_4
	b	.LBB4_3
.LBB4_3:
	b	.LBB4_12
.LBB4_4:
	movs	r0, #0
	str	r0, [sp, #4]
	b	.LBB4_5
.LBB4_5:                                @ =>This Inner Loop Header: Depth=1
	ldr	r0, [sp, #4]
	movw	r1, :lower16:g_mcu_addr0xspec_reg_read_idx
	movt	r1, :upper16:g_mcu_addr0xspec_reg_read_idx
	ldr	r1, [r1]
	cmp	r0, r1
	bhs	.LBB4_10
	b	.LBB4_6
.LBB4_6:                                @   in Loop: Header=BB4_5 Depth=1
	ldrb.w	r0, [sp, #19]
	ldr	r2, [sp, #4]
	movw	r1, :lower16:g_mcu_addr0xspec_reg_read_callback_array
	movt	r1, :upper16:g_mcu_addr0xspec_reg_read_callback_array
	ldrb.w	r1, [r1, r2, lsl #3]
	cmp	r0, r1
	bne	.LBB4_8
	b	.LBB4_7
.LBB4_7:
	b	.LBB4_10
.LBB4_8:                                @   in Loop: Header=BB4_5 Depth=1
	b	.LBB4_9
.LBB4_9:                                @   in Loop: Header=BB4_5 Depth=1
	ldr	r0, [sp, #4]
	adds	r0, #1
	str	r0, [sp, #4]
	b	.LBB4_5
.LBB4_10:
	ldr	r0, [sp, #4]
	movw	r1, :lower16:g_mcu_addr0xspec_reg_read_idx
	movt	r1, :upper16:g_mcu_addr0xspec_reg_read_idx
	ldr	r1, [r1]
	cmp	r0, r1
	bhs	.LBB4_12
	b	.LBB4_11
.LBB4_11:
	ldr	r1, [sp, #4]
	movw	r0, :lower16:g_mcu_addr0xspec_reg_read_callback_array
	movt	r0, :upper16:g_mcu_addr0xspec_reg_read_callback_array
	add.w	r0, r0, r1, lsl #3
	ldr	r3, [r0, #4]
	ldrb.w	r0, [sp, #19]
	ldr	r1, [sp, #12]
	ldr	r2, [sp, #8]
	blx	r3
	b	.LBB4_12
.LBB4_12:
	add	sp, #24
	pop	{r7, pc}
.Lfunc_end4:
	.size	mcu_addr0xspec_1byte_reg_byte_read, .Lfunc_end4-mcu_addr0xspec_1byte_reg_byte_read
	.cfi_endproc
	.cantunwind
	.fnend
                                        @ -- End function
	.section	.text.mcu_addr0xspec_reg_byte_read,"ax",%progbits
	.hidden	mcu_addr0xspec_reg_byte_read    @ -- Begin function mcu_addr0xspec_reg_byte_read
	.globl	mcu_addr0xspec_reg_byte_read
	.p2align	2
	.type	mcu_addr0xspec_reg_byte_read,%function
	.code	16                              @ @mcu_addr0xspec_reg_byte_read
	.thumb_func
mcu_addr0xspec_reg_byte_read:
	.fnstart
	.cfi_startproc
@ %bb.0:
	.save	{r7, lr}
	push	{r7, lr}
	.cfi_def_cfa_offset 8
	.cfi_offset lr, -4
	.cfi_offset r7, -8
	.pad	#16
	sub	sp, #16
	.cfi_def_cfa_offset 24
	str	r0, [sp, #12]
	str	r1, [sp, #8]
	str	r2, [sp, #4]
	ldr	r0, [sp, #12]
	cbnz	r0, .LBB5_2
	b	.LBB5_1
.LBB5_1:
	b	.LBB5_5
.LBB5_2:
	ldr	r0, [sp, #12]
	ldrb	r0, [r0]
	cmp	r0, #1
	bne	.LBB5_4
	b	.LBB5_3
.LBB5_3:
	ldr	r1, [sp, #12]
	ldr	r0, [r1, #4]
	ldrb	r1, [r1, #8]
	ldr	r2, [sp, #8]
	ldr	r3, [sp, #4]
	bl	mcu_addr0xspec_1byte_reg_byte_read
	b	.LBB5_4
.LBB5_4:
	b	.LBB5_5
.LBB5_5:
	add	sp, #16
	pop	{r7, pc}
.Lfunc_end5:
	.size	mcu_addr0xspec_reg_byte_read, .Lfunc_end5-mcu_addr0xspec_reg_byte_read
	.cfi_endproc
	.cantunwind
	.fnend
                                        @ -- End function
	.hidden	g_mcu_addr0xspec_reg_write_idx  @ @g_mcu_addr0xspec_reg_write_idx
	.type	g_mcu_addr0xspec_reg_write_idx,%object
	.section	.bss.g_mcu_addr0xspec_reg_write_idx,"aw",%nobits
	.globl	g_mcu_addr0xspec_reg_write_idx
	.p2align	2, 0x0
g_mcu_addr0xspec_reg_write_idx:
	.long	0                               @ 0x0
	.size	g_mcu_addr0xspec_reg_write_idx, 4

	.hidden	g_mcu_addr0xspec_reg_read_idx   @ @g_mcu_addr0xspec_reg_read_idx
	.type	g_mcu_addr0xspec_reg_read_idx,%object
	.section	.bss.g_mcu_addr0xspec_reg_read_idx,"aw",%nobits
	.globl	g_mcu_addr0xspec_reg_read_idx
	.p2align	2, 0x0
g_mcu_addr0xspec_reg_read_idx:
	.long	0                               @ 0x0
	.size	g_mcu_addr0xspec_reg_read_idx, 4

	.hidden	g_mcu_addr0xspec_reg_write_callback_array @ @g_mcu_addr0xspec_reg_write_callback_array
	.type	g_mcu_addr0xspec_reg_write_callback_array,%object
	.section	.bss.g_mcu_addr0xspec_reg_write_callback_array,"aw",%nobits
	.globl	g_mcu_addr0xspec_reg_write_callback_array
	.p2align	2, 0x0
g_mcu_addr0xspec_reg_write_callback_array:
	.zero	352
	.size	g_mcu_addr0xspec_reg_write_callback_array, 352

	.hidden	g_mcu_addr0xspec_reg_read_callback_array @ @g_mcu_addr0xspec_reg_read_callback_array
	.type	g_mcu_addr0xspec_reg_read_callback_array,%object
	.section	.bss.g_mcu_addr0xspec_reg_read_callback_array,"aw",%nobits
	.globl	g_mcu_addr0xspec_reg_read_callback_array
	.p2align	2, 0x0
g_mcu_addr0xspec_reg_read_callback_array:
	.zero	352
	.size	g_mcu_addr0xspec_reg_read_callback_array, 352

	.ident	"Component: Arm Compiler for Embedded 6.19 Tool: armclang [5e73cb00]"
	.section	".note.GNU-stack","",%progbits
	.eabi_attribute	30, 6	@ Tag_ABI_optimization_goals
	.ARM_attribute	16, 1	@ Tag_AV_eba
